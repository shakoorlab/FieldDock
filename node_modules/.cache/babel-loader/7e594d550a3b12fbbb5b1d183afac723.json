{"ast":null,"code":"var __extends = this && this.t || function () {\n  var extendStatics = function (r, t) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (r, t) {\n      r.__proto__ = t;\n    } || function (r, t) {\n      for (var e in t) if (Object.prototype.hasOwnProperty.call(t, e)) r[e] = t[e];\n    };\n    return extendStatics(r, t);\n  };\n  return function (r, t) {\n    if (typeof t !== \"function\" && t !== null) throw new TypeError(\"Class extends value \" + String(t) + \" is not a constructor or null\");\n    extendStatics(r, t);\n    function __() {\n      this.constructor = r;\n    }\n    r.prototype = t === null ? Object.create(t) : (__.prototype = t.prototype, new __());\n  };\n}();\nimport { ContainerIterator } from \"../../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nvar TreeIterator = function (r) {\n  __extends(TreeIterator, r);\n  function TreeIterator(t, e, i) {\n    var n = r.call(this, i) || this;\n    n.o = t;\n    n.h = e;\n    if (n.iteratorType === 0) {\n      n.pre = function () {\n        if (this.o === this.h.K) {\n          throwIteratorAccessError();\n        }\n        this.o = this.o.L();\n        return this;\n      };\n      n.next = function () {\n        if (this.o === this.h) {\n          throwIteratorAccessError();\n        }\n        this.o = this.o.m();\n        return this;\n      };\n    } else {\n      n.pre = function () {\n        if (this.o === this.h.N) {\n          throwIteratorAccessError();\n        }\n        this.o = this.o.m();\n        return this;\n      };\n      n.next = function () {\n        if (this.o === this.h) {\n          throwIteratorAccessError();\n        }\n        this.o = this.o.L();\n        return this;\n      };\n    }\n    return n;\n  }\n  Object.defineProperty(TreeIterator.prototype, \"index\", {\n    get: function () {\n      var r = this.o;\n      var t = this.h.rr;\n      if (r === this.h) {\n        if (t) {\n          return t.tr - 1;\n        }\n        return 0;\n      }\n      var e = 0;\n      if (r.K) {\n        e += r.K.tr;\n      }\n      while (r !== t) {\n        var i = r.rr;\n        if (r === i.N) {\n          e += 1;\n          if (i.K) {\n            e += i.K.tr;\n          }\n        }\n        r = i;\n      }\n      return e;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TreeIterator;\n}(ContainerIterator);\nexport default TreeIterator;","map":{"version":3,"names":["__extends","t","extendStatics","r","Object","setPrototypeOf","__proto__","Array","e","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","ContainerIterator","throwIteratorAccessError","TreeIterator","i","n","o","h","iteratorType","pre","K","L","next","m","N","defineProperty","get","rr","tr","enumerable","configurable"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/js-sdsl/dist/esm/container/TreeContainer/Base/container/TreeContainer/Base/TreeIterator.js","/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/js-sdsl/dist/esm/container/src/container/TreeContainer/Base/TreeIterator.ts"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ContainerIterator } from \"../../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nvar TreeIterator = /** @class */ (function (_super) {\n    __extends(TreeIterator, _super);\n    /**\n     * @internal\n     */\n    function TreeIterator(node, header, iteratorType) {\n        var _this = _super.call(this, iteratorType) || this;\n        _this._node = node;\n        _this._header = header;\n        if (_this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            _this.pre = function () {\n                if (this._node === this._header._left) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre();\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next();\n                return this;\n            };\n        }\n        else {\n            _this.pre = function () {\n                if (this._node === this._header._right) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next();\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre();\n                return this;\n            };\n        }\n        return _this;\n    }\n    Object.defineProperty(TreeIterator.prototype, \"index\", {\n        /**\n         * @description Get the sequential index of the iterator in the tree container.<br/>\n         *              <strong>Note:</strong>\n         *              This function only takes effect when the specified tree container `enableIndex = true`.\n         * @returns The index subscript of the node in the tree.\n         * @example\n         * const st = new OrderedSet([1, 2, 3], true);\n         * console.log(st.begin().next().index);  // 1\n         */\n        get: function () {\n            var _node = this._node;\n            var root = this._header._parent;\n            if (_node === this._header) {\n                if (root) {\n                    return root._subTreeSize - 1;\n                }\n                return 0;\n            }\n            var index = 0;\n            if (_node._left) {\n                index += _node._left._subTreeSize;\n            }\n            while (_node !== root) {\n                var _parent = _node._parent;\n                if (_node === _parent._right) {\n                    index += 1;\n                    if (_parent._left) {\n                        index += _parent._left._subTreeSize;\n                    }\n                }\n                _node = _parent;\n            }\n            return index;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return TreeIterator;\n}(ContainerIterator));\nexport default TreeIterator;\n","import { TreeNode } from './TreeNode';\nimport type { TreeNodeEnableIndex } from './TreeNode';\nimport { ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport TreeContainer from '@/container/TreeContainer/Base/index';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nabstract class TreeIterator<K, V> extends ContainerIterator<K | [K, V]> {\n  abstract readonly container: TreeContainer<K, V>;\n  /**\n   * @internal\n   */\n  _node: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected _header: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected constructor(\n    node: TreeNode<K, V>,\n    header: TreeNode<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = node;\n    this._header = header;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node === this._header._left) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre();\n        return this;\n      };\n\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next();\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node === this._header._right) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next();\n        return this;\n      };\n\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre();\n        return this;\n      };\n    }\n  }\n  /**\n   * @description Get the sequential index of the iterator in the tree container.<br/>\n   *              <strong>Note:</strong>\n   *              This function only takes effect when the specified tree container `enableIndex = true`.\n   * @returns The index subscript of the node in the tree.\n   * @example\n   * const st = new OrderedSet([1, 2, 3], true);\n   * console.log(st.begin().next().index);  // 1\n   */\n  get index() {\n    let _node = this._node as TreeNodeEnableIndex<K, V>;\n    const root = this._header._parent as TreeNodeEnableIndex<K, V>;\n    if (_node === this._header) {\n      if (root) {\n        return root._subTreeSize - 1;\n      }\n      return 0;\n    }\n    let index = 0;\n    if (_node._left) {\n      index += (_node._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n    while (_node !== root) {\n      const _parent = _node._parent as TreeNodeEnableIndex<K, V>;\n      if (_node === _parent._right) {\n        index += 1;\n        if (_parent._left) {\n          index += (_parent._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n        }\n      }\n      _node = _parent;\n    }\n    return index;\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport default TreeIterator;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}