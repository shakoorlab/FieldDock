{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"position\", \"rowHeight\", \"className\", \"visibleColumns\", \"renderedColumns\", \"containerWidth\", \"firstColumnToRender\", \"lastColumnToRender\", \"cellFocus\", \"cellTabIndex\", \"editRowsState\", \"isLastVisible\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnsTotalWidthSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { gridDensityHeaderGroupingMaxDepthSelector } from '../hooks/features/density/densitySelector';\nimport { randomNumberBetween } from '../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isLastVisible,\n    rowHeight,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst EmptyCell = _ref => {\n  let {\n    width\n  } = _ref;\n\n  if (!width) {\n    return null;\n  }\n\n  const style = {\n    width\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"MuiDataGrid-cell\",\n    style: style\n  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller\n};\n\nfunction GridRow(props) {\n  var _apiRef$current$getRo;\n\n  const {\n    selected,\n    rowId,\n    row,\n    index,\n    style: styleProp,\n    position,\n    rowHeight,\n    className,\n    visibleColumns,\n    renderedColumns,\n    containerWidth,\n    firstColumnToRender,\n    cellFocus,\n    cellTabIndex,\n    editRowsState,\n    isLastVisible = false,\n    onClick,\n    onDoubleClick,\n    onMouseEnter,\n    onMouseLeave\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowTreeDepthSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridDensityHeaderGroupingMaxDepthSelector);\n  const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based\n\n  const {\n    hasScrollX,\n    hasScrollY\n  } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {\n    hasScrollX: false,\n    hasScrollY: false\n  };\n  const ownerState = {\n    selected,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row,\n    rowHeight\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (rowHeight === 'auto' && ref.current && typeof ResizeObserver === 'undefined') {\n      // Fallback for IE\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight, position);\n    }\n  }, [apiRef, rowHeight, rowId, position]);\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if pageSize=5 and page=1. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId); // pinned rows are not part of the visible rows\n\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height, position);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId, position]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    // The target is not an element when triggered by a Select inside the cell\n    // See https://github.com/mui/material-ui/issues/10534\n    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {\n      return;\n    } // The row might have been deleted\n\n\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell == null ? void 0 : cell.getAttribute('data-field'); // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      } // User opened a detail panel\n\n\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      } // User reorders a row\n\n\n      if (field === '__reorder__') {\n        return;\n      } // User is editing a cell\n\n\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      } // User clicked a button from the \"actions\" column type\n\n\n      const column = apiRef.current.getColumn(field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const getCell = React.useCallback((column, cellProps) => {\n    var _rootProps$components;\n\n    const cellParams = apiRef.current.getCellParams(rowId, column.field);\n    const classNames = [];\n    const disableDragEvents = rootProps.disableColumnReorder && column.disableReorder || !rootProps.rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;\n\n    if (column.cellClassName) {\n      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));\n    }\n\n    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;\n    let content = null;\n\n    if (editCellState == null && column.renderCell) {\n      var _rootProps$classes;\n\n      content = column.renderCell(_extends({}, cellParams, {\n        api: apiRef.current\n      })); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--withRenderer'], (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes['cell--withRenderer']));\n    }\n\n    if (editCellState != null && column.renderEditCell) {\n      var _rootProps$classes2;\n\n      let updatedRow = row;\n\n      if (apiRef.current.unstable_getRowWithUpdatedValues) {\n        // Only the new editing API has this method\n        updatedRow = apiRef.current.unstable_getRowWithUpdatedValues(rowId, column.field);\n      }\n\n      const params = _extends({}, cellParams, {\n        row: updatedRow\n      }, editCellState, {\n        api: apiRef.current\n      });\n\n      content = column.renderEditCell(params); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--editing'], (_rootProps$classes2 = rootProps.classes) == null ? void 0 : _rootProps$classes2['cell--editing']));\n    }\n\n    if (rootProps.getCellClassName) {\n      // TODO move to GridCell\n      classNames.push(rootProps.getCellClassName(cellParams));\n    }\n\n    const hasFocus = cellFocus !== null && cellFocus.id === rowId && cellFocus.field === column.field;\n    const tabIndex = cellTabIndex !== null && cellTabIndex.id === rowId && cellTabIndex.field === column.field && cellParams.cellMode === 'view' ? 0 : -1;\n    return /*#__PURE__*/_jsx(rootProps.components.Cell, _extends({\n      value: cellParams.value,\n      field: column.field,\n      width: cellProps.width,\n      rowId: rowId,\n      height: rowHeight,\n      showRightBorder: cellProps.showRightBorder,\n      formattedValue: cellParams.formattedValue,\n      align: column.align || 'left',\n      cellMode: cellParams.cellMode,\n      colIndex: cellProps.indexRelativeToAllColumns,\n      isEditable: cellParams.isEditable,\n      hasFocus: hasFocus,\n      tabIndex: tabIndex,\n      className: clsx(classNames),\n      colSpan: cellProps.colSpan,\n      disableDragEvents: disableDragEvents\n    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.cell, {\n      children: content\n    }), column.field);\n  }, [apiRef, cellTabIndex, editRowsState, cellFocus, rootProps, row, rowHeight, rowId, treeDepth, sortModel.length]);\n  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n  let minHeight = rowHeight;\n\n  if (minHeight === 'auto' && sizes) {\n    let numberOfBaseSizes = 0;\n    const maximumSize = Object.entries(sizes).reduce((acc, _ref2) => {\n      let [key, size] = _ref2;\n      const isBaseHeight = /^base[A-Z]/.test(key);\n\n      if (!isBaseHeight) {\n        return acc;\n      }\n\n      numberOfBaseSizes += 1;\n\n      if (size > acc) {\n        return size;\n      }\n\n      return acc;\n    }, 0);\n\n    if (maximumSize > 0 && numberOfBaseSizes > 1) {\n      minHeight = maximumSize;\n    }\n  }\n\n  const style = _extends({}, styleProp, {\n    maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n    // max-height doesn't support \"auto\"\n    minHeight\n  });\n\n  if (sizes != null && sizes.spacingTop) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n    style[property] = sizes.spacingTop;\n  }\n\n  if (sizes != null && sizes.spacingBottom) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n    style[property] = sizes.spacingBottom;\n  }\n\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n\n  if (typeof rootProps.getRowClassName === 'function') {\n    var _currentPage$range;\n\n    const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);\n\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n\n  const randomNumber = randomNumberBetween(10000, 20, 80);\n  const cells = [];\n\n  for (let i = 0; i < renderedColumns.length; i += 1) {\n    const column = renderedColumns[i];\n    const indexRelativeToAllColumns = firstColumnToRender + i;\n    const isLastColumn = indexRelativeToAllColumns === visibleColumns.length - 1;\n    const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;\n    const showRightBorder = !isLastColumn ? rootProps.showCellRightBorder : !removeLastBorderRight && rootProps.disableExtendRowFullWidth;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n\n    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n      if (row) {\n        const {\n          colSpan,\n          width\n        } = cellColSpanInfo.cellProps;\n        const cellProps = {\n          width,\n          colSpan,\n          showRightBorder,\n          indexRelativeToAllColumns\n        };\n        cells.push(getCell(column, cellProps));\n      } else {\n        const {\n          width\n        } = cellColSpanInfo.cellProps;\n        const contentWidth = Math.round(randomNumber());\n        cells.push( /*#__PURE__*/_jsx(rootProps.components.SkeletonCell, {\n          width: width,\n          contentWidth: contentWidth,\n          field: column.field,\n          align: column.align\n        }, column.field));\n      }\n    }\n  }\n\n  const emptyCellWidth = containerWidth - columnsTotalWidth;\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave)\n  } : null;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: ref,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style\n  }, eventHandlers, other, {\n    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    })]\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  cellFocus: PropTypes.object,\n  cellTabIndex: PropTypes.object,\n  containerWidth: PropTypes.number.isRequired,\n  editRowsState: PropTypes.object.isRequired,\n  firstColumnToRender: PropTypes.number.isRequired,\n\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isLastVisible: PropTypes.bool,\n  lastColumnToRender: PropTypes.number.isRequired,\n  position: PropTypes.oneOf(['center', 'left', 'right']).isRequired,\n  renderedColumns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  row: PropTypes.object,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  selected: PropTypes.bool.isRequired,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nexport { GridRow };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_composeClasses","composeClasses","GridEditModes","GridRowModes","GridCellModes","useGridApiContext","getDataGridUtilityClass","gridClasses","useGridRootProps","gridColumnsTotalWidthSelector","useGridSelector","useGridVisibleRows","findParentElementFromClassName","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridSortModelSelector","gridRowTreeDepthSelector","gridDensityHeaderGroupingMaxDepthSelector","randomNumberBetween","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","editable","editing","selected","isLastVisible","rowHeight","classes","slots","root","EmptyCell","width","style","className","GridRow","props","_apiRef$current$getRo","rowId","row","index","styleProp","position","visibleColumns","renderedColumns","containerWidth","firstColumnToRender","cellFocus","cellTabIndex","editRowsState","onClick","onDoubleClick","onMouseEnter","onMouseLeave","other","apiRef","ref","useRef","rootProps","currentPage","columnsTotalWidth","sortModel","treeDepth","headerGroupingMaxDepth","ariaRowIndex","hasScrollX","hasScrollY","current","getRootDimensions","getRowMode","Edit","editMode","Row","useLayoutEffect","ResizeObserver","unstable_storeRowHeightMeasurement","clientHeight","range","rowIndex","getRowIndexRelativeToVisibleRows","unstable_setLastMeasuredRowIndex","rootElement","hasFixedHeight","undefined","resizeObserver","entries","entry","height","borderBoxSize","length","blockSize","contentRect","observe","disconnect","publish","useCallback","eventName","propHandler","event","target","nodeType","currentTarget","contains","getRow","publishEvent","getRowParams","publishClick","cell","field","getAttribute","getCellMode","column","getColumn","type","getCell","cellProps","_rootProps$components","cellParams","getCellParams","classNames","disableDragEvents","disableColumnReorder","disableReorder","rowReordering","Object","keys","cellClassName","push","editCellState","content","renderCell","_rootProps$classes","api","renderEditCell","_rootProps$classes2","updatedRow","unstable_getRowWithUpdatedValues","params","getCellClassName","hasFocus","id","tabIndex","cellMode","components","Cell","value","showRightBorder","formattedValue","align","colIndex","indexRelativeToAllColumns","isEditable","colSpan","componentsProps","children","sizes","unstable_getRowInternalSizes","minHeight","numberOfBaseSizes","maximumSize","reduce","acc","key","size","isBaseHeight","test","maxHeight","spacingTop","property","rowSpacingType","spacingBottom","rowClassNames","unstable_applyPipeProcessors","getRowClassName","_currentPage$range","indexRelativeToCurrentPage","firstRowIndex","rowParams","isFirstVisible","rows","randomNumber","cells","i","isLastColumn","removeLastBorderRight","showCellRightBorder","disableExtendRowFullWidth","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","contentWidth","Math","round","SkeletonCell","emptyCellWidth","eventHandlers","role","process","env","NODE_ENV","propTypes","object","number","isRequired","bool","lastColumnToRender","oneOf","arrayOf","oneOfType","string"],"sources":["/Users/jstanton/Desktop/react-admin-dashboard/node_modules/@mui/x-data-grid/components/GridRow.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"position\", \"rowHeight\", \"className\", \"visibleColumns\", \"renderedColumns\", \"containerWidth\", \"firstColumnToRender\", \"lastColumnToRender\", \"cellFocus\", \"cellTabIndex\", \"editRowsState\", \"isLastVisible\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnsTotalWidthSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { gridDensityHeaderGroupingMaxDepthSelector } from '../hooks/features/density/densitySelector';\nimport { randomNumberBetween } from '../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isLastVisible,\n    rowHeight,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst EmptyCell = ({\n  width\n}) => {\n  if (!width) {\n    return null;\n  }\n\n  const style = {\n    width\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"MuiDataGrid-cell\",\n    style: style\n  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller\n};\n\nfunction GridRow(props) {\n  var _apiRef$current$getRo;\n\n  const {\n    selected,\n    rowId,\n    row,\n    index,\n    style: styleProp,\n    position,\n    rowHeight,\n    className,\n    visibleColumns,\n    renderedColumns,\n    containerWidth,\n    firstColumnToRender,\n    cellFocus,\n    cellTabIndex,\n    editRowsState,\n    isLastVisible = false,\n    onClick,\n    onDoubleClick,\n    onMouseEnter,\n    onMouseLeave\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowTreeDepthSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridDensityHeaderGroupingMaxDepthSelector);\n  const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based\n\n  const {\n    hasScrollX,\n    hasScrollY\n  } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {\n    hasScrollX: false,\n    hasScrollY: false\n  };\n  const ownerState = {\n    selected,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row,\n    rowHeight\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (rowHeight === 'auto' && ref.current && typeof ResizeObserver === 'undefined') {\n      // Fallback for IE\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight, position);\n    }\n  }, [apiRef, rowHeight, rowId, position]);\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if pageSize=5 and page=1. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId); // pinned rows are not part of the visible rows\n\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height, position);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId, position]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    // The target is not an element when triggered by a Select inside the cell\n    // See https://github.com/mui/material-ui/issues/10534\n    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {\n      return;\n    } // The row might have been deleted\n\n\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell == null ? void 0 : cell.getAttribute('data-field'); // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      } // User opened a detail panel\n\n\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      } // User reorders a row\n\n\n      if (field === '__reorder__') {\n        return;\n      } // User is editing a cell\n\n\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      } // User clicked a button from the \"actions\" column type\n\n\n      const column = apiRef.current.getColumn(field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const getCell = React.useCallback((column, cellProps) => {\n    var _rootProps$components;\n\n    const cellParams = apiRef.current.getCellParams(rowId, column.field);\n    const classNames = [];\n    const disableDragEvents = rootProps.disableColumnReorder && column.disableReorder || !rootProps.rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;\n\n    if (column.cellClassName) {\n      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));\n    }\n\n    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;\n    let content = null;\n\n    if (editCellState == null && column.renderCell) {\n      var _rootProps$classes;\n\n      content = column.renderCell(_extends({}, cellParams, {\n        api: apiRef.current\n      })); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--withRenderer'], (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes['cell--withRenderer']));\n    }\n\n    if (editCellState != null && column.renderEditCell) {\n      var _rootProps$classes2;\n\n      let updatedRow = row;\n\n      if (apiRef.current.unstable_getRowWithUpdatedValues) {\n        // Only the new editing API has this method\n        updatedRow = apiRef.current.unstable_getRowWithUpdatedValues(rowId, column.field);\n      }\n\n      const params = _extends({}, cellParams, {\n        row: updatedRow\n      }, editCellState, {\n        api: apiRef.current\n      });\n\n      content = column.renderEditCell(params); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--editing'], (_rootProps$classes2 = rootProps.classes) == null ? void 0 : _rootProps$classes2['cell--editing']));\n    }\n\n    if (rootProps.getCellClassName) {\n      // TODO move to GridCell\n      classNames.push(rootProps.getCellClassName(cellParams));\n    }\n\n    const hasFocus = cellFocus !== null && cellFocus.id === rowId && cellFocus.field === column.field;\n    const tabIndex = cellTabIndex !== null && cellTabIndex.id === rowId && cellTabIndex.field === column.field && cellParams.cellMode === 'view' ? 0 : -1;\n    return /*#__PURE__*/_jsx(rootProps.components.Cell, _extends({\n      value: cellParams.value,\n      field: column.field,\n      width: cellProps.width,\n      rowId: rowId,\n      height: rowHeight,\n      showRightBorder: cellProps.showRightBorder,\n      formattedValue: cellParams.formattedValue,\n      align: column.align || 'left',\n      cellMode: cellParams.cellMode,\n      colIndex: cellProps.indexRelativeToAllColumns,\n      isEditable: cellParams.isEditable,\n      hasFocus: hasFocus,\n      tabIndex: tabIndex,\n      className: clsx(classNames),\n      colSpan: cellProps.colSpan,\n      disableDragEvents: disableDragEvents\n    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.cell, {\n      children: content\n    }), column.field);\n  }, [apiRef, cellTabIndex, editRowsState, cellFocus, rootProps, row, rowHeight, rowId, treeDepth, sortModel.length]);\n  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n  let minHeight = rowHeight;\n\n  if (minHeight === 'auto' && sizes) {\n    let numberOfBaseSizes = 0;\n    const maximumSize = Object.entries(sizes).reduce((acc, [key, size]) => {\n      const isBaseHeight = /^base[A-Z]/.test(key);\n\n      if (!isBaseHeight) {\n        return acc;\n      }\n\n      numberOfBaseSizes += 1;\n\n      if (size > acc) {\n        return size;\n      }\n\n      return acc;\n    }, 0);\n\n    if (maximumSize > 0 && numberOfBaseSizes > 1) {\n      minHeight = maximumSize;\n    }\n  }\n\n  const style = _extends({}, styleProp, {\n    maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n    // max-height doesn't support \"auto\"\n    minHeight\n  });\n\n  if (sizes != null && sizes.spacingTop) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n    style[property] = sizes.spacingTop;\n  }\n\n  if (sizes != null && sizes.spacingBottom) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n    style[property] = sizes.spacingBottom;\n  }\n\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n\n  if (typeof rootProps.getRowClassName === 'function') {\n    var _currentPage$range;\n\n    const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);\n\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n\n  const randomNumber = randomNumberBetween(10000, 20, 80);\n  const cells = [];\n\n  for (let i = 0; i < renderedColumns.length; i += 1) {\n    const column = renderedColumns[i];\n    const indexRelativeToAllColumns = firstColumnToRender + i;\n    const isLastColumn = indexRelativeToAllColumns === visibleColumns.length - 1;\n    const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;\n    const showRightBorder = !isLastColumn ? rootProps.showCellRightBorder : !removeLastBorderRight && rootProps.disableExtendRowFullWidth;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n\n    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n      if (row) {\n        const {\n          colSpan,\n          width\n        } = cellColSpanInfo.cellProps;\n        const cellProps = {\n          width,\n          colSpan,\n          showRightBorder,\n          indexRelativeToAllColumns\n        };\n        cells.push(getCell(column, cellProps));\n      } else {\n        const {\n          width\n        } = cellColSpanInfo.cellProps;\n        const contentWidth = Math.round(randomNumber());\n        cells.push( /*#__PURE__*/_jsx(rootProps.components.SkeletonCell, {\n          width: width,\n          contentWidth: contentWidth,\n          field: column.field,\n          align: column.align\n        }, column.field));\n      }\n    }\n  }\n\n  const emptyCellWidth = containerWidth - columnsTotalWidth;\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave)\n  } : null;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: ref,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style\n  }, eventHandlers, other, {\n    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    })]\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  cellFocus: PropTypes.object,\n  cellTabIndex: PropTypes.object,\n  containerWidth: PropTypes.number.isRequired,\n  editRowsState: PropTypes.object.isRequired,\n  firstColumnToRender: PropTypes.number.isRequired,\n\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isLastVisible: PropTypes.bool,\n  lastColumnToRender: PropTypes.number.isRequired,\n  position: PropTypes.oneOf(['center', 'left', 'right']).isRequired,\n  renderedColumns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  row: PropTypes.object,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  selected: PropTypes.bool.isRequired,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nexport { GridRow };"],"mappings":"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"},"metadata":{},"sourceType":"module"}