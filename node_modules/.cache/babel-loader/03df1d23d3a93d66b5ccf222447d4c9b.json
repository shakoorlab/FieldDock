{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsMetaSelector, gridColumnsSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { hydrateColumnsWidth, computeColumnTypes, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _props$initialState$c, _props$initialState2, _ref, _props$columnVisibili, _props$initialState3, _props$initialState3$;\n\n  const isUsingColumnVisibilityModel = !!props.columnVisibilityModel || !!((_props$initialState = props.initialState) != null && (_props$initialState$c = _props$initialState.columns) != null && _props$initialState$c.columnVisibilityModel);\n  apiRef.current.unstable_caches.columns = {\n    isUsingColumnVisibilityModel\n  };\n  const columnsTypes = computeColumnTypes(props.columnTypes);\n  const columnsState = createColumnsState({\n    apiRef,\n    columnTypes: columnsTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.columns,\n    shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n    currentColumnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\n\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState5, _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const columnTypes = React.useMemo(() => computeColumnTypes(props.columnTypes), [props.columnTypes]);\n  const previousColumnsProp = React.useRef(props.columns);\n  const previousColumnTypesProp = React.useRef(columnTypes);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('columnsChange', columnsState.all);\n  }, [logger, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnsMeta = React.useCallback(() => gridColumnsMetaSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback(function (field) {\n    let useVisibleColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnTypes,\n          columnsToUpsert: [],\n          initialState: undefined,\n          shouldRegenColumnVisibilityModelFromColumns: false,\n          currentColumnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnTypes]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: true,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnTypes]);\n  const updateColumn = React.useCallback(column => apiRef.current.updateColumns([column]), [apiRef]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    // We keep updating the `hide` option of `GridColDef` when not controlling the model to avoid any breaking change.\n    // `updateColumns` take care of updating the model itself if needs be.\n    // TODO v6: stop using the `hide` field even when the model is not defined\n    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {\n      var _columnVisibilityMode;\n\n      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n\n      if (isVisible !== isCurrentlyVisible) {\n        const newModel = _extends({}, columnVisibilityModel, {\n          [field]: isVisible\n        });\n\n        apiRef.current.setColumnVisibilityModel(newModel);\n      }\n    } else {\n      const column = apiRef.current.getColumn(field);\n\n      const newColumn = _extends({}, column, {\n        hide: !isVisible\n      });\n\n      apiRef.current.updateColumns([newColumn]);\n      const params = {\n        field,\n        colDef: newColumn,\n        isVisible\n      };\n      apiRef.current.publishEvent('columnVisibilityChange', params);\n    }\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = allColumns.findIndex(col => col === field);\n\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsSelector(apiRef.current.state), {\n      all: updatedColumns\n    }));\n    const params = {\n      field,\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: apiRef.current.getColumn(field),\n      targetIndex: targetIndexPosition,\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnOrderChange', params);\n  }, [apiRef, logger, setGridColumnsState]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const column = apiRef.current.getColumn(field);\n\n    const newColumn = _extends({}, column, {\n      width\n    });\n\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnsMeta,\n    updateColumn,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnIndex,\n    setColumnWidth\n  };\n  useGridApiMethod(apiRef, columnApi, 'GridColumnApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const columnsStateToExport = {};\n\n    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {\n      var _props$initialState$c2, _props$initialState4, _props$initialState4$;\n\n      const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n      const shouldExportColumnVisibilityModel = // Always export if the `exportOnlyDirtyModels` property is activated\n      !context.exportOnlyDirtyModels || // Always export if the model is controlled\n      props.columnVisibilityModel != null || // Always export if the model has been initialized\n      // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n      Object.keys((_props$initialState$c2 = (_props$initialState4 = props.initialState) == null ? void 0 : (_props$initialState4$ = _props$initialState4.columns) == null ? void 0 : _props$initialState4$.columnVisibilityModel) != null ? _props$initialState$c2 : {}).length > 0 || // Always export if the model is not empty\n      Object.keys(columnVisibilityModelToExport).length > 0;\n\n      if (shouldExportColumnVisibilityModel) {\n        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n      }\n    }\n\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, (_props$initialState5 = props.initialState) == null ? void 0 : _props$initialState5.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const columnVisibilityModelToImport = apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel ? (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel : undefined;\n    const initialState = context.stateToRestore.columns;\n\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState,\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      currentColumnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.all);\n    }\n\n    return params;\n  }, [apiRef, columnTypes]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$componentsProp;\n\n      const ColumnsPanel = props.components.ColumnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.columnsPanel));\n    }\n\n    return initialValue;\n  }, [props.components.ColumnsPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.columnsPanel]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n  useGridApiOptionHandler(apiRef, 'columnVisibilityChange', props.onColumnVisibilityChange);\n  /**\n   * APPLIERS\n   */\n\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnTypes]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n\n    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {\n      return;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    previousColumnTypesProp.current = columnTypes;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridColumnFieldsSelector","gridColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnsMetaSelector","gridColumnsSelector","gridColumnVisibilityModelSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","useGridApiEventHandler","useGridApiOptionHandler","useGridRegisterPipeProcessor","useGridRegisterPipeApplier","hydrateColumnsWidth","computeColumnTypes","createColumnsState","mergeColumnsState","COLUMNS_DIMENSION_PROPERTIES","GridPreferencePanelsValue","jsx","_jsx","columnsStateInitializer","state","props","apiRef","_props$initialState","_props$initialState$c","_props$initialState2","_ref","_props$columnVisibili","_props$initialState3","_props$initialState3$","isUsingColumnVisibilityModel","columnVisibilityModel","initialState","columns","current","unstable_caches","columnsTypes","columnTypes","columnsState","columnsToUpsert","shouldRegenColumnVisibilityModelFromColumns","currentColumnVisibilityModel","keepOnlyColumnsToUpsert","useGridColumns","_props$initialState5","_props$componentsProp2","logger","useMemo","previousColumnsProp","useRef","previousColumnTypesProp","unstable_registerControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","changeEvent","setGridColumnsState","useCallback","debug","setState","forceUpdate","publishEvent","all","getColumn","field","getAllColumns","getVisibleColumns","getColumnsMeta","getColumnIndex","useVisibleColumns","findIndex","col","getColumnPosition","index","setColumnVisibilityModel","model","currentModel","undefined","updateColumns","updateColumn","column","setColumnVisibility","isVisible","_columnVisibilityMode","isCurrentlyVisible","newModel","newColumn","hide","params","colDef","setColumnIndex","targetIndexPosition","allColumns","oldIndexPosition","updatedColumns","fieldRemoved","splice","element","getColumnHeaderElement","targetIndex","oldIndex","setColumnWidth","width","columnApi","stateExportPreProcessing","prevState","context","columnsStateToExport","_props$initialState$c2","_props$initialState4","_props$initialState4$","columnVisibilityModelToExport","shouldExportColumnVisibilityModel","exportOnlyDirtyModels","Object","keys","length","orderedFields","dimensions","forEach","hasBeenResized","colDefDimensions","propertyName","propertyValue","Infinity","stateRestorePreProcessing","_context$stateToResto","columnVisibilityModelToImport","stateToRestore","preferencePanelPreProcessing","initialValue","value","_props$componentsProp","ColumnsPanel","components","componentsProps","columnsPanel","prevInnerWidth","handleGridSizeChange","viewportInnerSize","onColumnVisibilityChange","hydrateColumns","info","isFirstRender","useEffect"],"sources":["/Users/jstanton/Desktop/react-admin-dashboard/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsMetaSelector, gridColumnsSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { hydrateColumnsWidth, computeColumnTypes, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _props$initialState$c, _props$initialState2, _ref, _props$columnVisibili, _props$initialState3, _props$initialState3$;\n\n  const isUsingColumnVisibilityModel = !!props.columnVisibilityModel || !!((_props$initialState = props.initialState) != null && (_props$initialState$c = _props$initialState.columns) != null && _props$initialState$c.columnVisibilityModel);\n  apiRef.current.unstable_caches.columns = {\n    isUsingColumnVisibilityModel\n  };\n  const columnsTypes = computeColumnTypes(props.columnTypes);\n  const columnsState = createColumnsState({\n    apiRef,\n    columnTypes: columnsTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.columns,\n    shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n    currentColumnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\n\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState5, _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const columnTypes = React.useMemo(() => computeColumnTypes(props.columnTypes), [props.columnTypes]);\n  const previousColumnsProp = React.useRef(props.columns);\n  const previousColumnTypesProp = React.useRef(columnTypes);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('columnsChange', columnsState.all);\n  }, [logger, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnsMeta = React.useCallback(() => gridColumnsMetaSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnTypes,\n          columnsToUpsert: [],\n          initialState: undefined,\n          shouldRegenColumnVisibilityModelFromColumns: false,\n          currentColumnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnTypes]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: true,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnTypes]);\n  const updateColumn = React.useCallback(column => apiRef.current.updateColumns([column]), [apiRef]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    // We keep updating the `hide` option of `GridColDef` when not controlling the model to avoid any breaking change.\n    // `updateColumns` take care of updating the model itself if needs be.\n    // TODO v6: stop using the `hide` field even when the model is not defined\n    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {\n      var _columnVisibilityMode;\n\n      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n\n      if (isVisible !== isCurrentlyVisible) {\n        const newModel = _extends({}, columnVisibilityModel, {\n          [field]: isVisible\n        });\n\n        apiRef.current.setColumnVisibilityModel(newModel);\n      }\n    } else {\n      const column = apiRef.current.getColumn(field);\n\n      const newColumn = _extends({}, column, {\n        hide: !isVisible\n      });\n\n      apiRef.current.updateColumns([newColumn]);\n      const params = {\n        field,\n        colDef: newColumn,\n        isVisible\n      };\n      apiRef.current.publishEvent('columnVisibilityChange', params);\n    }\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = allColumns.findIndex(col => col === field);\n\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsSelector(apiRef.current.state), {\n      all: updatedColumns\n    }));\n    const params = {\n      field,\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: apiRef.current.getColumn(field),\n      targetIndex: targetIndexPosition,\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnOrderChange', params);\n  }, [apiRef, logger, setGridColumnsState]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const column = apiRef.current.getColumn(field);\n\n    const newColumn = _extends({}, column, {\n      width\n    });\n\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnsMeta,\n    updateColumn,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnIndex,\n    setColumnWidth\n  };\n  useGridApiMethod(apiRef, columnApi, 'GridColumnApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const columnsStateToExport = {};\n\n    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {\n      var _props$initialState$c2, _props$initialState4, _props$initialState4$;\n\n      const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n      const shouldExportColumnVisibilityModel = // Always export if the `exportOnlyDirtyModels` property is activated\n      !context.exportOnlyDirtyModels || // Always export if the model is controlled\n      props.columnVisibilityModel != null || // Always export if the model has been initialized\n      // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n      Object.keys((_props$initialState$c2 = (_props$initialState4 = props.initialState) == null ? void 0 : (_props$initialState4$ = _props$initialState4.columns) == null ? void 0 : _props$initialState4$.columnVisibilityModel) != null ? _props$initialState$c2 : {}).length > 0 || // Always export if the model is not empty\n      Object.keys(columnVisibilityModelToExport).length > 0;\n\n      if (shouldExportColumnVisibilityModel) {\n        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n      }\n    }\n\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, (_props$initialState5 = props.initialState) == null ? void 0 : _props$initialState5.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const columnVisibilityModelToImport = apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel ? (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel : undefined;\n    const initialState = context.stateToRestore.columns;\n\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState,\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      currentColumnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.all);\n    }\n\n    return params;\n  }, [apiRef, columnTypes]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$componentsProp;\n\n      const ColumnsPanel = props.components.ColumnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.columnsPanel));\n    }\n\n    return initialValue;\n  }, [props.components.ColumnsPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.columnsPanel]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n  useGridApiOptionHandler(apiRef, 'columnVisibilityChange', props.onColumnVisibilityChange);\n  /**\n   * APPLIERS\n   */\n\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnTypes]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n\n    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {\n      return;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    previousColumnTypesProp.current = columnTypes;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}