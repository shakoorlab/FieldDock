{"ast":null,"code":"var __extends = this && this.t || function () {\n  var extendStatics = function (e, n) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (e, n) {\n      e.__proto__ = n;\n    } || function (e, n) {\n      for (var t in n) if (Object.prototype.hasOwnProperty.call(n, t)) e[t] = n[t];\n    };\n    return extendStatics(e, n);\n  };\n  return function (e, n) {\n    if (typeof n !== \"function\" && n !== null) throw new TypeError(\"Class extends value \" + String(n) + \" is not a constructor or null\");\n    extendStatics(e, n);\n    function __() {\n      this.constructor = e;\n    }\n    e.prototype = n === null ? Object.create(n) : (__.prototype = n.prototype, new __());\n  };\n}();\nvar TreeNode = function () {\n  function TreeNode(e, n) {\n    this.ee = 1;\n    this.u = undefined;\n    this.p = undefined;\n    this.K = undefined;\n    this.N = undefined;\n    this.rr = undefined;\n    this.u = e;\n    this.p = n;\n  }\n  TreeNode.prototype.L = function () {\n    var e = this;\n    if (e.ee === 1 && e.rr.rr === e) {\n      e = e.N;\n    } else if (e.K) {\n      e = e.K;\n      while (e.N) {\n        e = e.N;\n      }\n    } else {\n      var n = e.rr;\n      while (n.K === e) {\n        e = n;\n        n = e.rr;\n      }\n      e = n;\n    }\n    return e;\n  };\n  TreeNode.prototype.m = function () {\n    var e = this;\n    if (e.N) {\n      e = e.N;\n      while (e.K) {\n        e = e.K;\n      }\n      return e;\n    } else {\n      var n = e.rr;\n      while (n.N === e) {\n        e = n;\n        n = e.rr;\n      }\n      if (e.N !== n) {\n        return n;\n      } else return e;\n    }\n  };\n  TreeNode.prototype.ne = function () {\n    var e = this.rr;\n    var n = this.N;\n    var t = n.K;\n    if (e.rr === this) e.rr = n;else if (e.K === this) e.K = n;else e.N = n;\n    n.rr = e;\n    n.K = this;\n    this.rr = n;\n    this.N = t;\n    if (t) t.rr = this;\n    return n;\n  };\n  TreeNode.prototype.te = function () {\n    var e = this.rr;\n    var n = this.K;\n    var t = n.N;\n    if (e.rr === this) e.rr = n;else if (e.K === this) e.K = n;else e.N = n;\n    n.rr = e;\n    n.N = this;\n    this.rr = n;\n    this.K = t;\n    if (t) t.rr = this;\n    return n;\n  };\n  return TreeNode;\n}();\nexport { TreeNode };\nvar TreeNodeEnableIndex = function (e) {\n  __extends(TreeNodeEnableIndex, e);\n  function TreeNodeEnableIndex() {\n    var n = e !== null && e.apply(this, arguments) || this;\n    n.tr = 1;\n    return n;\n  }\n  TreeNodeEnableIndex.prototype.ne = function () {\n    var n = e.prototype.ne.call(this);\n    this.ie();\n    n.ie();\n    return n;\n  };\n  TreeNodeEnableIndex.prototype.te = function () {\n    var n = e.prototype.te.call(this);\n    this.ie();\n    n.ie();\n    return n;\n  };\n  TreeNodeEnableIndex.prototype.ie = function () {\n    this.tr = 1;\n    if (this.K) {\n      this.tr += this.K.tr;\n    }\n    if (this.N) {\n      this.tr += this.N.tr;\n    }\n  };\n  return TreeNodeEnableIndex;\n}(TreeNode);\nexport { TreeNodeEnableIndex };","map":{"version":3,"names":["__extends","t","extendStatics","e","n","Object","setPrototypeOf","__proto__","Array","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","TreeNode","ee","u","undefined","p","K","N","rr","L","m","ne","te","TreeNodeEnableIndex","apply","arguments","tr","ie"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/js-sdsl/dist/esm/container/TreeContainer/Base/container/TreeContainer/Base/TreeNode.js","/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/js-sdsl/dist/esm/container/src/container/TreeContainer/Base/TreeNode.ts"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar TreeNode = /** @class */ (function () {\n    function TreeNode(key, value) {\n        this._color = 1 /* TreeNodeColor.RED */;\n        this._key = undefined;\n        this._value = undefined;\n        this._left = undefined;\n        this._right = undefined;\n        this._parent = undefined;\n        this._key = key;\n        this._value = value;\n    }\n    /**\n     * @description Get the pre node.\n     * @returns TreeNode about the pre node.\n     */\n    TreeNode.prototype._pre = function () {\n        var preNode = this;\n        if (preNode._color === 1 /* TreeNodeColor.RED */ &&\n            preNode._parent._parent === preNode) {\n            preNode = preNode._right;\n        }\n        else if (preNode._left) {\n            preNode = preNode._left;\n            while (preNode._right) {\n                preNode = preNode._right;\n            }\n        }\n        else {\n            var pre = preNode._parent;\n            while (pre._left === preNode) {\n                preNode = pre;\n                pre = preNode._parent;\n            }\n            preNode = pre;\n        }\n        return preNode;\n    };\n    /**\n     * @description Get the next node.\n     * @returns TreeNode about the next node.\n     */\n    TreeNode.prototype._next = function () {\n        var nextNode = this;\n        if (nextNode._right) {\n            nextNode = nextNode._right;\n            while (nextNode._left) {\n                nextNode = nextNode._left;\n            }\n            return nextNode;\n        }\n        else {\n            var pre = nextNode._parent;\n            while (pre._right === nextNode) {\n                nextNode = pre;\n                pre = nextNode._parent;\n            }\n            if (nextNode._right !== pre) {\n                return pre;\n            }\n            else\n                return nextNode;\n        }\n    };\n    /**\n     * @description Rotate left.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNode.prototype._rotateLeft = function () {\n        var PP = this._parent;\n        var V = this._right;\n        var R = V._left;\n        if (PP._parent === this)\n            PP._parent = V;\n        else if (PP._left === this)\n            PP._left = V;\n        else\n            PP._right = V;\n        V._parent = PP;\n        V._left = this;\n        this._parent = V;\n        this._right = R;\n        if (R)\n            R._parent = this;\n        return V;\n    };\n    /**\n     * @description Rotate right.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNode.prototype._rotateRight = function () {\n        var PP = this._parent;\n        var F = this._left;\n        var K = F._right;\n        if (PP._parent === this)\n            PP._parent = F;\n        else if (PP._left === this)\n            PP._left = F;\n        else\n            PP._right = F;\n        F._parent = PP;\n        F._right = this;\n        this._parent = F;\n        this._left = K;\n        if (K)\n            K._parent = this;\n        return F;\n    };\n    return TreeNode;\n}());\nexport { TreeNode };\nvar TreeNodeEnableIndex = /** @class */ (function (_super) {\n    __extends(TreeNodeEnableIndex, _super);\n    function TreeNodeEnableIndex() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._subTreeSize = 1;\n        return _this;\n    }\n    /**\n     * @description Rotate left and do recount.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNodeEnableIndex.prototype._rotateLeft = function () {\n        var parent = _super.prototype._rotateLeft.call(this);\n        this._recount();\n        parent._recount();\n        return parent;\n    };\n    /**\n     * @description Rotate right and do recount.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNodeEnableIndex.prototype._rotateRight = function () {\n        var parent = _super.prototype._rotateRight.call(this);\n        this._recount();\n        parent._recount();\n        return parent;\n    };\n    TreeNodeEnableIndex.prototype._recount = function () {\n        this._subTreeSize = 1;\n        if (this._left) {\n            this._subTreeSize += this._left._subTreeSize;\n        }\n        if (this._right) {\n            this._subTreeSize += this._right._subTreeSize;\n        }\n    };\n    return TreeNodeEnableIndex;\n}(TreeNode));\nexport { TreeNodeEnableIndex };\n","export const enum TreeNodeColor {\n  RED = 1,\n  BLACK = 0\n}\n\nexport class TreeNode<K, V> {\n  _color = TreeNodeColor.RED;\n  _key: K | undefined = undefined;\n  _value: V | undefined = undefined;\n  _left: TreeNode<K, V> | undefined = undefined;\n  _right: TreeNode<K, V> | undefined = undefined;\n  _parent: TreeNode<K, V> | undefined = undefined;\n  constructor(key?: K, value?: V) {\n    this._key = key;\n    this._value = value;\n  }\n  /**\n   * @description Get the pre node.\n   * @returns TreeNode about the pre node.\n   */\n  _pre() {\n    let preNode: TreeNode<K, V> = this;\n    if (\n      preNode._color === TreeNodeColor.RED &&\n      preNode._parent!._parent === preNode\n    ) {\n      preNode = preNode._right!;\n    } else if (preNode._left) {\n      preNode = preNode._left;\n      while (preNode._right) {\n        preNode = preNode._right;\n      }\n    } else {\n      let pre = preNode._parent!;\n      while (pre._left === preNode) {\n        preNode = pre;\n        pre = preNode._parent!;\n      }\n      preNode = pre;\n    }\n    return preNode;\n  }\n  /**\n   * @description Get the next node.\n   * @returns TreeNode about the next node.\n   */\n  _next() {\n    let nextNode: TreeNode<K, V> = this;\n    if (nextNode._right) {\n      nextNode = nextNode._right;\n      while (nextNode._left) {\n        nextNode = nextNode._left;\n      }\n      return nextNode;\n    } else {\n      let pre = nextNode._parent!;\n      while (pre._right === nextNode) {\n        nextNode = pre;\n        pre = nextNode._parent!;\n      }\n      if (nextNode._right !== pre) {\n        return pre;\n      } else return nextNode;\n    }\n  }\n  /**\n   * @description Rotate left.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateLeft() {\n    const PP = this._parent!;\n    const V = this._right!;\n    const R = V._left;\n\n    if (PP._parent === this) PP._parent = V;\n    else if (PP._left === this) PP._left = V;\n    else PP._right = V;\n\n    V._parent = PP;\n    V._left = this;\n\n    this._parent = V;\n    this._right = R;\n\n    if (R) R._parent = this;\n\n    return V;\n  }\n  /**\n   * @description Rotate right.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateRight() {\n    const PP = this._parent!;\n    const F = this._left!;\n    const K = F._right;\n\n    if (PP._parent === this) PP._parent = F;\n    else if (PP._left === this) PP._left = F;\n    else PP._right = F;\n\n    F._parent = PP;\n    F._right = this;\n\n    this._parent = F;\n    this._left = K;\n\n    if (K) K._parent = this;\n\n    return F;\n  }\n}\n\nexport class TreeNodeEnableIndex<K, V> extends TreeNode<K, V> {\n  _subTreeSize = 1;\n  /**\n   * @description Rotate left and do recount.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateLeft() {\n    const parent = super._rotateLeft() as TreeNodeEnableIndex<K, V>;\n    this._recount();\n    parent._recount();\n    return parent;\n  }\n  /**\n   * @description Rotate right and do recount.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateRight() {\n    const parent = super._rotateRight() as TreeNodeEnableIndex<K, V>;\n    this._recount();\n    parent._recount();\n    return parent;\n  }\n  _recount() {\n    this._subTreeSize = 1;\n    if (this._left) {\n      this._subTreeSize += (this._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n    if (this._right) {\n      this._subTreeSize += (this._right as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}