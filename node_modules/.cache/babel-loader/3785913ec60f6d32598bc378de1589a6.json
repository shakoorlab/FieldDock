{"ast":null,"code":"import { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\n\nconst flatRowTreeCreationMethod = _ref => {\n  let {\n    ids,\n    idRowsLookup,\n    idToIdLookup,\n    previousTree\n  } = _ref;\n  const tree = {};\n\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n\n    if (previousTree && previousTree[rowId] && previousTree[rowId].depth === 0 && previousTree[rowId].parent == null && // pinned row can be unpinned\n    !previousTree[rowId].isPinned) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    idToIdLookup,\n    ids\n  };\n};\n\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};","map":{"version":3,"names":["GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","flatRowTreeCreationMethod","ids","idRowsLookup","idToIdLookup","previousTree","tree","i","length","rowId","depth","parent","isPinned","id","groupingKey","groupingField","groupingName","treeDepth","useGridRowsPreProcessors","apiRef"],"sources":["/Users/jstanton/Desktop/Coding/react-admin-dashboard/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js"],"sourcesContent":["import { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\n\nconst flatRowTreeCreationMethod = ({\n  ids,\n  idRowsLookup,\n  idToIdLookup,\n  previousTree\n}) => {\n  const tree = {};\n\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n\n    if (previousTree && previousTree[rowId] && previousTree[rowId].depth === 0 && previousTree[rowId].parent == null && // pinned row can be unpinned\n    !previousTree[rowId].isPinned) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    idToIdLookup,\n    ids\n  };\n};\n\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,gCAAhC,QAAwE,+BAAxE;;AAEA,MAAMC,yBAAyB,GAAG,QAK5B;EAAA,IAL6B;IACjCC,GADiC;IAEjCC,YAFiC;IAGjCC,YAHiC;IAIjCC;EAJiC,CAK7B;EACJ,MAAMC,IAAI,GAAG,EAAb;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACM,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;IACtC,MAAME,KAAK,GAAGP,GAAG,CAACK,CAAD,CAAjB;;IAEA,IAAIF,YAAY,IAAIA,YAAY,CAACI,KAAD,CAA5B,IAAuCJ,YAAY,CAACI,KAAD,CAAZ,CAAoBC,KAApB,KAA8B,CAArE,IAA0EL,YAAY,CAACI,KAAD,CAAZ,CAAoBE,MAApB,IAA8B,IAAxG,IAAgH;IACpH,CAACN,YAAY,CAACI,KAAD,CAAZ,CAAoBG,QADrB,EAC+B;MAC7BN,IAAI,CAACG,KAAD,CAAJ,GAAcJ,YAAY,CAACI,KAAD,CAA1B;IACD,CAHD,MAGO;MACLH,IAAI,CAACG,KAAD,CAAJ,GAAc;QACZI,EAAE,EAAEJ,KADQ;QAEZC,KAAK,EAAE,CAFK;QAGZC,MAAM,EAAE,IAHI;QAIZG,WAAW,EAAE,EAJD;QAKZC,aAAa,EAAE;MALH,CAAd;IAOD;EACF;;EAED,OAAO;IACLC,YAAY,EAAEjB,qBADT;IAELO,IAFK;IAGLW,SAAS,EAAE,CAHN;IAILd,YAJK;IAKLC,YALK;IAMLF;EANK,CAAP;AAQD,CAjCD;;AAmCA,OAAO,MAAMgB,wBAAwB,GAAGC,MAAM,IAAI;EAChDnB,gCAAgC,CAACmB,MAAD,EAASpB,qBAAT,EAAgC,iBAAhC,EAAmDE,yBAAnD,CAAhC;AACD,CAFM"},"metadata":{},"sourceType":"module"}