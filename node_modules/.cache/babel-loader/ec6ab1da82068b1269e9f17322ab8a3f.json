{"ast":null,"code":"var _jsxFileName = \"/Users/jstanton/Coding/FieldDock/FieldDockMain/src/components/Mission Planner/latLongTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from \"react\";\nimport { useTable, useRowSelect } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LatLongTable = () => {\n  _s();\n  // ------------------------------Define the structure of your table----------------------------------- //\n  const columns = useMemo(() => [{\n    Header: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"60px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 23\n    }, this),\n    accessor: \"id\",\n    Cell: _ref => {\n      let {\n        row,\n        updateMyData\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.id,\n          onChange: e => updateMyData(row.index, \"id\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"Command\",\n    accessor: \"command\",\n    Cell: _ref2 => {\n      let {\n        row,\n        updateMyData\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"select\", {\n        value: row.values.command,\n        onChange: e => updateMyData(row.index, \"command\", e.target.value),\n        style: {\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Maybe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"So\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"P1\",\n    accessor: \"P1\",\n    Cell: _ref3 => {\n      let {\n        row,\n        updateMyData\n      } = _ref3;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.P1,\n          onChange: e => updateMyData(row.index, \"P1\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"P2\",\n    accessor: \"P2\",\n    Cell: _ref4 => {\n      let {\n        row,\n        updateMyData\n      } = _ref4;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.P2,\n          onChange: e => updateMyData(row.index, \"P2\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"P3\",\n    accessor: \"P3\",\n    Cell: _ref5 => {\n      let {\n        row,\n        updateMyData\n      } = _ref5;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.P3,\n          onChange: e => updateMyData(row.index, \"P3\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"P4\",\n    accessor: \"P4\",\n    Cell: _ref6 => {\n      let {\n        row,\n        updateMyData\n      } = _ref6;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.P4,\n          onChange: e => updateMyData(row.index, \"P4\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"Latitude\",\n    accessor: \"Latitude\",\n    Cell: _ref7 => {\n      let {\n        row,\n        updateMyData\n      } = _ref7;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.Latitude,\n          onChange: e => updateMyData(row.index, \"Latitude\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"Longitude\",\n    accessor: \"Longitude\",\n    Cell: _ref8 => {\n      let {\n        row,\n        updateMyData\n      } = _ref8;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.Longitude,\n          onChange: e => updateMyData(row.index, \"Longitude\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"Alt\",\n    accessor: \"Alt\",\n    Cell: _ref9 => {\n      let {\n        row,\n        updateMyData\n      } = _ref9;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.Alt,\n          onChange: e => updateMyData(row.index, \"Alt\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"Frame\",\n    accessor: \"Frame\",\n    Cell: _ref10 => {\n      let {\n        row,\n        updateMyData\n      } = _ref10;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.Frame,\n          onChange: e => updateMyData(row.index, \"Frame\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"Grad\",\n    accessor: \"Grad\",\n    Cell: _ref11 => {\n      let {\n        row,\n        updateMyData\n      } = _ref11;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.Grad,\n          onChange: e => updateMyData(row.index, \"Grad\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"Angle\",\n    accessor: \"Angle\",\n    Cell: _ref12 => {\n      let {\n        row,\n        updateMyData\n      } = _ref12;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.Angle,\n          onChange: e => updateMyData(row.index, \"Angle\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"Dist\",\n    accessor: \"Dist\",\n    Cell: _ref13 => {\n      let {\n        row,\n        updateMyData\n      } = _ref13;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.Dist,\n          onChange: e => updateMyData(row.index, \"Dist\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"AZ\",\n    accessor: \"AZ\",\n    Cell: _ref14 => {\n      let {\n        row,\n        updateMyData\n      } = _ref14;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"60px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: row.values.AZ,\n          onChange: e => updateMyData(row.index, \"AZ\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this);\n    }\n  }], []);\n  // ------------------------------Define the structure of your table----------------------------------- //\n  //\n  //\n  //\n  //\n  // ------------------------------Create a state for your table data----------------------------------- //\n  //\n  //initializes your data state with a single row, which is empty of values except for the id field.\n  //In this line, data is initialized as an array with a single object representing the first row.\n  //The id field is set to 1, and the command field is set to an empty string. You can add more fields to this row as per your requirements.\n  const [data, setData] = useState([{\n    id: 1,\n    command: \"\",\n    p1: \"\",\n    p2: \"\",\n    p3: \"\",\n    p4: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    alt: \"\",\n    frame: \"\",\n    grad: \"\",\n    angle: \"\",\n    dist: \"\",\n    az: \"\"\n  }]);\n\n  // ------------------------------Create a function to handle changes in your table-------------------- //\n  //\n  //The updateMyData function is designed to be reusable for all the columns. It takes three parameters: rowIndex, columnId, and value.\n  //The rowIndex and columnId identify the cell to be updated, and value is the new value for that cell.\n  //This is a common pattern in table components: a single function is used to update any cell, and it uses parameters to determine which cell to update.\n  const updateMyData = (rowIndex, columnId, value) => {\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return {\n          ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n      return row;\n    }));\n  };\n  // ------------------------------Create a function to handle changes in your table-------------------- //\n  //\n  //\n  //\n  //\n  // ------------------------------Check if the last row is complete, and if so, add a new row---------- //\n  //\n  //As you interact with the table, filling in values for the cells, the state (data) will be updated accordingly.\n  //Once all cells in the current row are filled, a new empty row will be added, ready to be filled in.\n  //This behavior is managed by this part of the code:\n  const lastRow = data[data.length - 1];\n  if (Object.values(lastRow).every(cell => cell !== \"\")) {\n    setData([...data, {\n      id: data.length + 1,\n      command: \"\"\n    }]);\n  }\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }, useRowSelect);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n        ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n          ...column.getHeaderProps(),\n          className: \"table-header\",\n          children: column.render(\"Header\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      ...getTableBodyProps(),\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...row.getRowProps(),\n          children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n            ...cell.getCellProps(),\n            children: cell.render(\"Cell\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n// ------------------------------Check if the last row is complete, and if so, add a new row---------- //\n_s(LatLongTable, \"KFWBgNIpy39FWBgegDvGE0jL8ZE=\", false, function () {\n  return [useTable];\n});\n_c = LatLongTable;\nexport default LatLongTable;\nvar _c;\n$RefreshReg$(_c, \"LatLongTable\");","map":{"version":3,"names":["React","useState","useMemo","useTable","useRowSelect","jsxDEV","_jsxDEV","LatLongTable","_s","columns","Header","style","width","fileName","_jsxFileName","lineNumber","columnNumber","accessor","Cell","_ref","row","updateMyData","children","value","values","id","onChange","e","index","target","_ref2","command","_ref3","P1","_ref4","P2","_ref5","P3","_ref6","P4","_ref7","Latitude","_ref8","Longitude","_ref9","Alt","_ref10","Frame","_ref11","Grad","_ref12","Angle","_ref13","Dist","_ref14","AZ","data","setData","p1","p2","p3","p4","latitude","longitude","alt","frame","grad","angle","dist","az","rowIndex","columnId","old","map","lastRow","length","Object","every","cell","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","className","render","getRowProps","cells","getCellProps","_c","$RefreshReg$"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/src/components/Mission Planner/latLongTable.jsx"],"sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport { useTable, useRowSelect } from \"react-table\";\n\nconst LatLongTable = () => {\n  // ------------------------------Define the structure of your table----------------------------------- //\n  const columns = useMemo(\n    () => [\n      {\n        Header: () => <div style={{ width: \"60px\" }}></div>,\n        accessor: \"id\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.id}\n              onChange={(e) => updateMyData(row.index, \"id\", e.target.value)}\n            />\n          </div>\n        ),\n      },\n\n      {\n        Header: \"Command\",\n        accessor: \"command\",\n        Cell: ({ row, updateMyData }) => (\n          <select\n            value={row.values.command}\n            onChange={(e) => updateMyData(row.index, \"command\", e.target.value)}\n            style={{ width: \"100%\" }}\n          >\n            <option>Yes</option>\n            <option>No</option>\n            <option>Maybe</option>\n            <option>So</option>\n          </select>\n        ),\n      },\n      {\n        Header: \"P1\",\n        accessor: \"P1\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.P1}\n              onChange={(e) => updateMyData(row.index, \"P1\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"P2\",\n        accessor: \"P2\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.P2}\n              onChange={(e) => updateMyData(row.index, \"P2\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"P3\",\n        accessor: \"P3\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.P3}\n              onChange={(e) => updateMyData(row.index, \"P3\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"P4\",\n        accessor: \"P4\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.P4}\n              onChange={(e) => updateMyData(row.index, \"P4\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"Latitude\",\n        accessor: \"Latitude\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.Latitude}\n              onChange={(e) =>\n                updateMyData(row.index, \"Latitude\", e.target.value)\n              }\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"Longitude\",\n        accessor: \"Longitude\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.Longitude}\n              onChange={(e) =>\n                updateMyData(row.index, \"Longitude\", e.target.value)\n              }\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"Alt\",\n        accessor: \"Alt\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.Alt}\n              onChange={(e) => updateMyData(row.index, \"Alt\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"Frame\",\n        accessor: \"Frame\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.Frame}\n              onChange={(e) => updateMyData(row.index, \"Frame\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"Grad\",\n        accessor: \"Grad\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.Grad}\n              onChange={(e) => updateMyData(row.index, \"Grad\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"Angle\",\n        accessor: \"Angle\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.Angle}\n              onChange={(e) => updateMyData(row.index, \"Angle\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"Dist\",\n        accessor: \"Dist\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.Dist}\n              onChange={(e) => updateMyData(row.index, \"Dist\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"AZ\",\n        accessor: \"AZ\",\n        Cell: ({ row, updateMyData }) => (\n          <div style={{ width: \"60px\" }}>\n            <input\n              value={row.values.AZ}\n              onChange={(e) => updateMyData(row.index, \"AZ\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        ),\n      },\n    ],\n    []\n  );\n  // ------------------------------Define the structure of your table----------------------------------- //\n  //\n  //\n  //\n  //\n  // ------------------------------Create a state for your table data----------------------------------- //\n  //\n  //initializes your data state with a single row, which is empty of values except for the id field.\n  //In this line, data is initialized as an array with a single object representing the first row.\n  //The id field is set to 1, and the command field is set to an empty string. You can add more fields to this row as per your requirements.\n  const [data, setData] = useState([\n    {\n      id: 1,\n      command: \"\",\n      p1: \"\",\n      p2: \"\",\n      p3: \"\",\n      p4: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      alt: \"\",\n      frame: \"\",\n      grad: \"\",\n      angle: \"\",\n      dist: \"\",\n      az: \"\",\n    },\n  ]);\n\n  // ------------------------------Create a function to handle changes in your table-------------------- //\n  //\n  //The updateMyData function is designed to be reusable for all the columns. It takes three parameters: rowIndex, columnId, and value.\n  //The rowIndex and columnId identify the cell to be updated, and value is the new value for that cell.\n  //This is a common pattern in table components: a single function is used to update any cell, and it uses parameters to determine which cell to update.\n  const updateMyData = (rowIndex, columnId, value) => {\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          };\n        }\n        return row;\n      })\n    );\n  };\n  // ------------------------------Create a function to handle changes in your table-------------------- //\n  //\n  //\n  //\n  //\n  // ------------------------------Check if the last row is complete, and if so, add a new row---------- //\n  //\n  //As you interact with the table, filling in values for the cells, the state (data) will be updated accordingly.\n  //Once all cells in the current row are filled, a new empty row will be added, ready to be filled in.\n  //This behavior is managed by this part of the code:\n  const lastRow = data[data.length - 1];\n  if (Object.values(lastRow).every((cell) => cell !== \"\")) {\n    setData([...data, { id: data.length + 1, command: \"\" }]);\n  }\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable(\n      {\n        columns,\n        data,\n      },\n      useRowSelect\n    );\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th {...column.getHeaderProps()} className=\"table-header\">\n                {column.render(\"Header\")}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => (\n                <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n              ))}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n// ------------------------------Check if the last row is complete, and if so, add a new row---------- //\n\nexport default LatLongTable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}