{"ast":null,"code":"var _jsxFileName = \"/Users/jstanton/Coding/FieldDock/FieldDockMain/src/components/Mission Planner/latLongTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from \"react\";\nimport { useTable, useRowSelect } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LatLongTable = () => {\n  _s();\n  // ------------------------------Define the structure of your table----------------------------------- //\n  const columns = useMemo(() => [{\n    Header: \"ID\",\n    accessor: \"id\"\n  }, {\n    Header: \"Command\",\n    accessor: \"command\",\n    Cell: _ref => {\n      let {\n        row,\n        updateMyData\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"select\", {\n        value: row.values.command,\n        onChange: e => updateMyData(row.index, \"command\", e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Maybe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"So\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    Header: \"P1\",\n    accessor: \"p1\"\n  }, {\n    Header: \"P2\",\n    accessor: \"p2\"\n  }, {\n    Header: \"P3\",\n    accessor: \"p3\"\n  }, {\n    Header: \"P4\",\n    accessor: \"p4\"\n  }, {\n    Header: \"Latitude\",\n    accessor: \"latitude\"\n  }, {\n    Header: \"Longitude\",\n    accessor: \"longitude\"\n  }, {\n    Header: \"Alt\",\n    accessor: \"alt\"\n  }, {\n    Header: \"Frame\",\n    accessor: \"frame\"\n  }, {\n    Header: \"Grad %\",\n    accessor: \"grad\"\n  }, {\n    Header: \"Angle\",\n    accessor: \"angle\"\n  }, {\n    Header: \"Dist\",\n    accessor: \"dist\"\n  }, {\n    Header: \"AZ\",\n    accessor: \"az\"\n  }], []);\n  // ------------------------------Define the structure of your table----------------------------------- //\n  //\n  //\n  //\n  //\n  // ------------------------------Create a state for your table data----------------------------------- //\n  //\n  //initializes your data state with a single row, which is empty of values except for the id field.\n  //In this line, data is initialized as an array with a single object representing the first row.\n  //The id field is set to 1, and the command field is set to an empty string. You can add more fields to this row as per your requirements.\n  const [data, setData] = useState([{\n    id: 1,\n    command: \"\",\n    p1: \"\",\n    p2: \"\",\n    p3: \"\",\n    p4: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    alt: \"\",\n    frame: \"\",\n    grad: \"\",\n    angle: \"\",\n    dist: \"\",\n    az: \"\"\n  }]);\n\n  // ------------------------------Create a function to handle changes in your table-------------------- //\n  const updateMyData = (rowIndex, columnId, value) => {\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return {\n          ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n      return row;\n    }));\n  };\n  // ------------------------------Create a function to handle changes in your table-------------------- //\n  //\n  //\n  //\n  //\n  // ------------------------------Check if the last row is complete, and if so, add a new row---------- //\n  //\n  //As you interact with the table, filling in values for the cells, the state (data) will be updated accordingly.\n  //Once all cells in the current row are filled, a new empty row will be added, ready to be filled in.\n  //This behavior is managed by this part of the code:\n  const lastRow = data[data.length - 1];\n  if (Object.values(lastRow).every(cell => cell !== \"\")) {\n    setData([...data, {\n      id: data.length + 1,\n      command: \"\"\n    }]);\n  }\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }, useRowSelect);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n        ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n          ...column.getHeaderProps(),\n          children: column.render(\"Header\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      ...getTableBodyProps(),\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...row.getRowProps(),\n          children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n            ...cell.getCellProps(),\n            children: cell.render(\"Cell\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n// ------------------------------Check if the last row is complete, and if so, add a new row---------- //\n_s(LatLongTable, \"KFWBgNIpy39FWBgegDvGE0jL8ZE=\", false, function () {\n  return [useTable];\n});\n_c = LatLongTable;\nexport default LatLongTable;\nvar _c;\n$RefreshReg$(_c, \"LatLongTable\");","map":{"version":3,"names":["React","useState","useMemo","useTable","useRowSelect","jsxDEV","_jsxDEV","LatLongTable","_s","columns","Header","accessor","Cell","_ref","row","updateMyData","value","values","command","onChange","e","index","target","children","fileName","_jsxFileName","lineNumber","columnNumber","data","setData","id","p1","p2","p3","p4","latitude","longitude","alt","frame","grad","angle","dist","az","rowIndex","columnId","old","map","lastRow","length","Object","every","cell","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","getCellProps","_c","$RefreshReg$"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/src/components/Mission Planner/latLongTable.jsx"],"sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport { useTable, useRowSelect } from \"react-table\";\n\nconst LatLongTable = () => {\n  // ------------------------------Define the structure of your table----------------------------------- //\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"ID\",\n        accessor: \"id\",\n      },\n      {\n        Header: \"Command\",\n        accessor: \"command\",\n        Cell: ({ row, updateMyData }) => (\n          <select\n            value={row.values.command}\n            onChange={(e) => updateMyData(row.index, \"command\", e.target.value)}\n          >\n            <option>Yes</option>\n            <option>No</option>\n            <option>Maybe</option>\n            <option>So</option>\n          </select>\n        ),\n      },\n      {\n        Header: \"P1\",\n        accessor: \"p1\",\n      },\n      {\n        Header: \"P2\",\n        accessor: \"p2\",\n      },\n      {\n        Header: \"P3\",\n        accessor: \"p3\",\n      },\n      {\n        Header: \"P4\",\n        accessor: \"p4\",\n      },\n      {\n        Header: \"Latitude\",\n        accessor: \"latitude\",\n      },\n      {\n        Header: \"Longitude\",\n        accessor: \"longitude\",\n      },\n      {\n        Header: \"Alt\",\n        accessor: \"alt\",\n      },\n      {\n        Header: \"Frame\",\n        accessor: \"frame\",\n      },\n      {\n        Header: \"Grad %\",\n        accessor: \"grad\",\n      },\n      {\n        Header: \"Angle\",\n        accessor: \"angle\",\n      },\n      {\n        Header: \"Dist\",\n        accessor: \"dist\",\n      },\n      {\n        Header: \"AZ\",\n        accessor: \"az\",\n      },\n    ],\n    []\n  );\n  // ------------------------------Define the structure of your table----------------------------------- //\n  //\n  //\n  //\n  //\n  // ------------------------------Create a state for your table data----------------------------------- //\n  //\n  //initializes your data state with a single row, which is empty of values except for the id field.\n  //In this line, data is initialized as an array with a single object representing the first row.\n  //The id field is set to 1, and the command field is set to an empty string. You can add more fields to this row as per your requirements.\n  const [data, setData] = useState([\n    {\n      id: 1,\n      command: \"\",\n      p1: \"\",\n      p2: \"\",\n      p3: \"\",\n      p4: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      alt: \"\",\n      frame: \"\",\n      grad: \"\",\n      angle: \"\",\n      dist: \"\",\n      az: \"\",\n    },\n  ]);\n\n  // ------------------------------Create a function to handle changes in your table-------------------- //\n  const updateMyData = (rowIndex, columnId, value) => {\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          };\n        }\n        return row;\n      })\n    );\n  };\n  // ------------------------------Create a function to handle changes in your table-------------------- //\n  //\n  //\n  //\n  //\n  // ------------------------------Check if the last row is complete, and if so, add a new row---------- //\n  //\n  //As you interact with the table, filling in values for the cells, the state (data) will be updated accordingly.\n  //Once all cells in the current row are filled, a new empty row will be added, ready to be filled in.\n  //This behavior is managed by this part of the code:\n  const lastRow = data[data.length - 1];\n  if (Object.values(lastRow).every((cell) => cell !== \"\")) {\n    setData([...data, { id: data.length + 1, command: \"\" }]);\n  }\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable(\n      {\n        columns,\n        data,\n      },\n      useRowSelect\n    );\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => (\n                <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n              ))}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n// ------------------------------Check if the last row is complete, and if so, add a new row---------- //\n\nexport default LatLongTable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}