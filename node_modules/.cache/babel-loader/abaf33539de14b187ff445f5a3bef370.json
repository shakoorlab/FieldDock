{"ast":null,"code":"var __extends = this && this.t || function () {\n  var extendStatics = function (n, t) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (n, t) {\n      n.__proto__ = t;\n    } || function (n, t) {\n      for (var r in t) if (Object.prototype.hasOwnProperty.call(t, r)) n[r] = t[r];\n    };\n    return extendStatics(n, t);\n  };\n  return function (n, t) {\n    if (typeof t !== \"function\" && t !== null) throw new TypeError(\"Class extends value \" + String(t) + \" is not a constructor or null\");\n    extendStatics(n, t);\n    function __() {\n      this.constructor = n;\n    }\n    n.prototype = t === null ? Object.create(t) : (__.prototype = t.prototype, new __());\n  };\n}();\nvar ContainerIterator = function () {\n  function ContainerIterator(n) {\n    if (n === void 0) {\n      n = 0;\n    }\n    this.iteratorType = n;\n  }\n  ContainerIterator.prototype.equals = function (n) {\n    return this.o === n.o;\n  };\n  return ContainerIterator;\n}();\nexport { ContainerIterator };\nvar Base = function () {\n  function Base() {\n    this.M = 0;\n  }\n  Object.defineProperty(Base.prototype, \"length\", {\n    get: function () {\n      return this.M;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Base.prototype.size = function () {\n    return this.M;\n  };\n  Base.prototype.empty = function () {\n    return this.M === 0;\n  };\n  return Base;\n}();\nexport { Base };\nvar Container = function (n) {\n  __extends(Container, n);\n  function Container() {\n    return n !== null && n.apply(this, arguments) || this;\n  }\n  return Container;\n}(Base);\nexport { Container };","map":{"version":3,"names":["__extends","t","extendStatics","n","Object","setPrototypeOf","__proto__","Array","r","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","ContainerIterator","iteratorType","equals","o","Base","M","defineProperty","get","enumerable","configurable","size","empty","Container","apply","arguments"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/js-sdsl/dist/esm/container/ContainerBase/container/ContainerBase/index.js","/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/js-sdsl/dist/esm/src/container/ContainerBase/index.ts"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ContainerIterator = /** @class */ (function () {\n    /**\n     * @internal\n     */\n    function ContainerIterator(iteratorType) {\n        if (iteratorType === void 0) { iteratorType = 0 /* IteratorType.NORMAL */; }\n        this.iteratorType = iteratorType;\n    }\n    /**\n     * @param iter - The other iterator you want to compare.\n     * @returns Whether this equals to obj.\n     * @example\n     * container.find(1).equals(container.end());\n     */\n    ContainerIterator.prototype.equals = function (iter) {\n        return this._node === iter._node;\n    };\n    return ContainerIterator;\n}());\nexport { ContainerIterator };\nvar Base = /** @class */ (function () {\n    function Base() {\n        /**\n         * @description Container's size.\n         * @internal\n         */\n        this._length = 0;\n    }\n    Object.defineProperty(Base.prototype, \"length\", {\n        /**\n         * @returns The size of the container.\n         * @example\n         * const container = new Vector([1, 2]);\n         * console.log(container.length); // 2\n         */\n        get: function () {\n            return this._length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @returns The size of the container.\n     * @example\n     * const container = new Vector([1, 2]);\n     * console.log(container.size()); // 2\n     */\n    Base.prototype.size = function () {\n        return this._length;\n    };\n    /**\n     * @returns Whether the container is empty.\n     * @example\n     * container.clear();\n     * console.log(container.empty());  // true\n     */\n    Base.prototype.empty = function () {\n        return this._length === 0;\n    };\n    return Base;\n}());\nexport { Base };\nvar Container = /** @class */ (function (_super) {\n    __extends(Container, _super);\n    function Container() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Container;\n}(Base));\nexport { Container };\n","/**\n * @description The iterator type including `NORMAL` and `REVERSE`.\n */\nexport const enum IteratorType {\n  NORMAL = 0,\n  REVERSE = 1\n}\n\nexport abstract class ContainerIterator<T> {\n  /**\n   * @description The container pointed to by the iterator.\n   */\n  abstract readonly container: Container<T>;\n  /**\n   * @internal\n   */\n  abstract _node: unknown;\n  /**\n   * @description Iterator's type.\n   * @example\n   * console.log(container.end().iteratorType === IteratorType.NORMAL);  // true\n   */\n  readonly iteratorType: IteratorType;\n  /**\n   * @internal\n   */\n  protected constructor(iteratorType = IteratorType.NORMAL) {\n    this.iteratorType = iteratorType;\n  }\n  /**\n   * @param iter - The other iterator you want to compare.\n   * @returns Whether this equals to obj.\n   * @example\n   * container.find(1).equals(container.end());\n   */\n  equals(iter: ContainerIterator<T>) {\n    return this._node === iter._node;\n  }\n  /**\n   * @description Pointers to element.\n   * @returns The value of the pointer's element.\n   * @example\n   * const val = container.begin().pointer;\n   */\n  abstract get pointer(): T;\n  /**\n   * @description Set pointer's value (some containers are unavailable).\n   * @param newValue - The new value you want to set.\n   * @example\n   * (<LinkList<number>>container).begin().pointer = 1;\n   */\n  abstract set pointer(newValue: T);\n  /**\n   * @description Move `this` iterator to pre.\n   * @returns The iterator's self.\n   * @example\n   * const iter = container.find(1);  // container = [0, 1]\n   * const pre = iter.pre();\n   * console.log(pre === iter);  // true\n   * console.log(pre.equals(iter));  // true\n   * console.log(pre.pointer, iter.pointer); // 0, 0\n   */\n  abstract pre(): this;\n  /**\n   * @description Move `this` iterator to next.\n   * @returns The iterator's self.\n   * @example\n   * const iter = container.find(1);  // container = [1, 2]\n   * const next = iter.next();\n   * console.log(next === iter);  // true\n   * console.log(next.equals(iter));  // true\n   * console.log(next.pointer, iter.pointer); // 2, 2\n   */\n  abstract next(): this;\n  /**\n   * @description Get a copy of itself.\n   * @returns The copy of self.\n   * @example\n   * const iter = container.find(1);  // container = [1, 2]\n   * const next = iter.copy().next();\n   * console.log(next === iter);  // false\n   * console.log(next.equals(iter));  // false\n   * console.log(next.pointer, iter.pointer); // 2, 1\n   */\n  abstract copy(): ContainerIterator<T>;\n}\n\nexport abstract class Base {\n  /**\n   * @description Container's size.\n   * @internal\n   */\n  protected _length = 0;\n  /**\n   * @returns The size of the container.\n   * @example\n   * const container = new Vector([1, 2]);\n   * console.log(container.length); // 2\n   */\n  get length() {\n    return this._length;\n  }\n  /**\n   * @returns The size of the container.\n   * @example\n   * const container = new Vector([1, 2]);\n   * console.log(container.size()); // 2\n   */\n  size() {\n    return this._length;\n  }\n  /**\n   * @returns Whether the container is empty.\n   * @example\n   * container.clear();\n   * console.log(container.empty());  // true\n   */\n  empty() {\n    return this._length === 0;\n  }\n  /**\n   * @description Clear the container.\n   * @example\n   * container.clear();\n   * console.log(container.empty());  // true\n   */\n  abstract clear(): void;\n}\n\nexport abstract class Container<T> extends Base {\n  /**\n   * @returns Iterator pointing to the beginning element.\n   * @example\n   * const begin = container.begin();\n   * const end = container.end();\n   * for (const it = begin; !it.equals(end); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract begin(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the super end like c++.\n   * @example\n   * const begin = container.begin();\n   * const end = container.end();\n   * for (const it = begin; !it.equals(end); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract end(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the end element.\n   * @example\n   * const rBegin = container.rBegin();\n   * const rEnd = container.rEnd();\n   * for (const it = rBegin; !it.equals(rEnd); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract rBegin(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the super begin like c++.\n   * @example\n   * const rBegin = container.rBegin();\n   * const rEnd = container.rEnd();\n   * for (const it = rBegin; !it.equals(rEnd); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract rEnd(): ContainerIterator<T>;\n  /**\n   * @returns The first element of the container.\n   */\n  abstract front(): T | undefined;\n  /**\n   * @returns The last element of the container.\n   */\n  abstract back(): T | undefined;\n  /**\n   * @param element - The element you want to find.\n   * @returns An iterator pointing to the element if found, or super end if not found.\n   * @example\n   * container.find(1).equals(container.end());\n   */\n  abstract find(element: T): ContainerIterator<T>;\n  /**\n   * @description Iterate over all elements in the container.\n   * @param callback - Callback function like Array.forEach.\n   * @example\n   * container.forEach((element, index) => console.log(element, index));\n   */\n  abstract forEach(callback: (element: T, index: number, container: Container<T>) => void): void;\n  /**\n   * @description Gets the value of the element at the specified position.\n   * @example\n   * const val = container.getElementByPos(-1); // throw a RangeError\n   */\n  abstract getElementByPos(pos: number): T;\n  /**\n   * @description Removes the element at the specified position.\n   * @param pos - The element's position you want to remove.\n   * @returns The container length after erasing.\n   * @example\n   * container.eraseElementByPos(-1); // throw a RangeError\n   */\n  abstract eraseElementByPos(pos: number): number;\n  /**\n   * @description Removes element by iterator and move `iter` to next.\n   * @param iter - The iterator you want to erase.\n   * @returns The next iterator.\n   * @example\n   * container.eraseElementByIterator(container.begin());\n   * container.eraseElementByIterator(container.end()); // throw a RangeError\n   */\n  abstract eraseElementByIterator(\n    iter: ContainerIterator<T>\n  ): ContainerIterator<T>;\n  /**\n   * @description Using for `for...of` syntax like Array.\n   * @example\n   * for (const element of container) {\n   *   console.log(element);\n   * }\n   */\n  abstract [Symbol.iterator](): Generator<T, void>;\n}\n\n/**\n * @description The initial data type passed in when initializing the container.\n */\nexport type initContainer<T> = {\n  size?: number | (() => number);\n  length?: number;\n  forEach: (callback: (el: T) => void) => void;\n}\n"],"mappings":"AAAA,IAAIA,SAAA,GAAa,QAAQ,KAAKC,CAAA,IAAe;EACzC,IAAIC,aAAA,GAAgB,SAAAA,CAAUC,CAAA,EAAGF,CAAA;IAC7BC,aAAA,GAAgBE,MAAA,CAAOC,cAAA,IAClB;MAAEC,SAAA,EAAW;iBAAgBC,KAAA,IAAS,UAAUJ,CAAA,EAAGF,CAAA;MAAKE,CAAA,CAAEG,SAAA,GAAYL,CAAA;IAAG,KAC1E,UAAUE,CAAA,EAAGF,CAAA;MAAK,KAAK,IAAIO,CAAA,IAAKP,CAAA,EAAG,IAAIG,MAAA,CAAOK,SAAA,CAAUC,cAAA,CAAeC,IAAA,CAAKV,CAAA,EAAGO,CAAA,GAAIL,CAAA,CAAEK,CAAA,IAAKP,CAAA,CAAEO,CAAA;IAAI;IACpG,OAAON,aAAA,CAAcC,CAAA,EAAGF,CAAA;EAC5B;EACA,OAAO,UAAUE,CAAA,EAAGF,CAAA;IAChB,WAAWA,CAAA,KAAM,cAAcA,CAAA,KAAM,MACjC,MAAM,IAAIW,SAAA,CAAU,yBAAyBC,MAAA,CAAOZ,CAAA,IAAK;IAC7DC,aAAA,CAAcC,CAAA,EAAGF,CAAA;IACjB,SAASa,GAAA;MAAO,KAAKC,WAAA,GAAcZ,CAAA;IAAG;IACtCA,CAAA,CAAEM,SAAA,GAAYR,CAAA,KAAM,OAAOG,MAAA,CAAOY,MAAA,CAAOf,CAAA,KAAMa,EAAA,CAAGL,SAAA,GAAYR,CAAA,CAAEQ,SAAA,EAAW,IAAIK,EAAA;EACnF;AACJ,CAd6C;ACQ7C,IAAAG,iBAAA;EAkBE,SAAAA,kBAAsBd,CAAA;IAAA,IAAAA,CAAA;MAAAA,CAAA;IAAkC;IACtD,KAAKe,YAAA,GAAef,CAAA;EDLpB;ECaFc,iBAAA,CAAAR,SAAA,CAAAU,MAAA,aAAOhB,CAAA;IACL,OAAO,KAAKiB,CAAA,KAAUjB,CAAA,CAAKiB,CAAA;EDL3B;ECsDJ,OAAAH,iBAAA;AAAA,CA7EA;SD0BSA,iBAAA;ACqDT,IAAAI,IAAA;EAAA,SAAAA,KAAA;IAKY,KAAAC,CAAA,GAAU;EAmCtB;EA5BElB,MAAA,CAAAmB,cAAA,CAAIF,IAAA,CAAAZ,SAAA,YAAM;IDjDJe,GAAA,ECiDN,SAAAA,CAAA;MACE,OAAO,KAAKF,CAAA;IDhDR;IACAG,UAAA,EAAY;IACZC,YAAA,EAAc;;ECsDpBL,IAAA,CAAAZ,SAAA,CAAAkB,IAAA;IACE,OAAO,KAAKL,CAAA;ED7CZ;ECqDFD,IAAA,CAAAZ,SAAA,CAAAmB,KAAA;IACE,OAAO,KAAKN,CAAA,KAAY;ED7CxB;ECsDJ,OAAAD,IAAA;AAAA,CAxCA;SDXSA,IAAA;ACqDT,IAAAQ,SAAA,aAAA1B,CAAA;EAA2CH,SAAA,CAAA6B,SAAA,EAAA1B,CAAA;EAA3C,SAAA0B,UAAA;IDjDQ,OAAO1B,CAAA,KAAW,QAAQA,CAAA,CAAO2B,KAAA,CAAM,MAAMC,SAAA,KAAc;ECiJnE;EAAA,OAAAF,SAAA;AAAA,CAhGA,CAA2CR,IAAA;SD7ClCQ,SAAA"},"metadata":{},"sourceType":"module"}