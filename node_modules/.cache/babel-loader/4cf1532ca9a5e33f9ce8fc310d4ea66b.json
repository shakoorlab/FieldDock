{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst buffer_1 = require(\"buffer\");\nconst ws_1 = __importDefault(require(\"ws\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst duplexify_1 = __importDefault(require(\"duplexify\"));\nconst readable_stream_1 = require(\"readable-stream\");\nconst is_browser_1 = __importDefault(require(\"../is-browser\"));\nconst debug = (0, debug_1.default)('mqttjs:ws');\nconst WSS_OPTIONS = ['rejectUnauthorized', 'ca', 'cert', 'key', 'pfx', 'passphrase'];\nfunction buildUrl(opts, client) {\n  let url = `${opts.protocol}://${opts.hostname}:${opts.port}${opts.path}`;\n  if (typeof opts.transformWsUrl === 'function') {\n    url = opts.transformWsUrl(url, opts, client);\n  }\n  return url;\n}\nfunction setDefaultOpts(opts) {\n  const options = opts;\n  if (!opts.hostname) {\n    options.hostname = 'localhost';\n  }\n  if (!opts.port) {\n    if (opts.protocol === 'wss') {\n      options.port = 443;\n    } else {\n      options.port = 80;\n    }\n  }\n  if (!opts.path) {\n    options.path = '/';\n  }\n  if (!opts.wsOptions) {\n    options.wsOptions = {};\n  }\n  if (!is_browser_1.default && opts.protocol === 'wss') {\n    WSS_OPTIONS.forEach(prop => {\n      if (Object.prototype.hasOwnProperty.call(opts, prop) && !Object.prototype.hasOwnProperty.call(opts.wsOptions, prop)) {\n        options.wsOptions[prop] = opts[prop];\n      }\n    });\n  }\n  return options;\n}\nfunction setDefaultBrowserOpts(opts) {\n  const options = setDefaultOpts(opts);\n  if (!options.hostname) {\n    options.hostname = options.host;\n  }\n  if (!options.hostname) {\n    if (typeof document === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.');\n    }\n    const parsed = new URL(document.URL);\n    options.hostname = parsed.hostname;\n    if (!options.port) {\n      options.port = Number(parsed.port);\n    }\n  }\n  if (options.objectMode === undefined) {\n    options.objectMode = !(options.binary === true || options.binary === undefined);\n  }\n  return options;\n}\nfunction createWebSocket(client, url, opts) {\n  debug('createWebSocket');\n  debug(`protocol: ${opts.protocolId} ${opts.protocolVersion}`);\n  const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';\n  debug(`creating new Websocket for url: ${url} and protocol: ${websocketSubProtocol}`);\n  const socket = new ws_1.default(url, [websocketSubProtocol], opts.wsOptions);\n  return socket;\n}\nfunction createBrowserWebSocket(client, opts) {\n  const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';\n  const url = buildUrl(opts, client);\n  const socket = new WebSocket(url, [websocketSubProtocol]);\n  socket.binaryType = 'arraybuffer';\n  return socket;\n}\nconst streamBuilder = (client, opts) => {\n  debug('streamBuilder');\n  const options = setDefaultOpts(opts);\n  const url = buildUrl(options, client);\n  const socket = createWebSocket(client, url, options);\n  const webSocketStream = ws_1.default.createWebSocketStream(socket, options.wsOptions);\n  webSocketStream['url'] = url;\n  socket.on('close', () => {\n    webSocketStream.destroy();\n  });\n  return webSocketStream;\n};\nconst browserStreamBuilder = (client, opts) => {\n  debug('browserStreamBuilder');\n  let stream;\n  const options = setDefaultBrowserOpts(opts);\n  const bufferSize = options.browserBufferSize || 1024 * 512;\n  const bufferTimeout = opts.browserBufferTimeout || 1000;\n  const coerceToBuffer = !opts.objectMode;\n  const socket = createBrowserWebSocket(client, opts);\n  const proxy = buildProxy(opts, socketWriteBrowser, socketEndBrowser);\n  if (!opts.objectMode) {\n    proxy._writev = writev;\n  }\n  proxy.on('close', () => {\n    socket.close();\n  });\n  const eventListenerSupport = typeof socket.addEventListener !== 'undefined';\n  if (socket.readyState === socket.OPEN) {\n    stream = proxy;\n  } else {\n    stream = (0, duplexify_1.default)(undefined, undefined, opts);\n    if (!opts.objectMode) {\n      stream._writev = writev;\n    }\n    if (eventListenerSupport) {\n      socket.addEventListener('open', onOpen);\n    } else {\n      socket.onopen = onOpen;\n    }\n  }\n  stream.socket = socket;\n  if (eventListenerSupport) {\n    socket.addEventListener('close', onClose);\n    socket.addEventListener('error', onError);\n    socket.addEventListener('message', onMessage);\n  } else {\n    socket.onclose = onClose;\n    socket.onerror = onError;\n    socket.onmessage = onMessage;\n  }\n  function buildProxy(pOptions, socketWrite, socketEnd) {\n    const _proxy = new readable_stream_1.Transform({\n      objectMode: pOptions.objectMode\n    });\n    _proxy._write = socketWrite;\n    _proxy._flush = socketEnd;\n    return _proxy;\n  }\n  function onOpen() {\n    stream.setReadable(proxy);\n    stream.setWritable(proxy);\n    stream.emit('connect');\n  }\n  function onClose() {\n    stream.end();\n    stream.destroy();\n  }\n  function onError(err) {\n    stream.destroy(err);\n  }\n  function onMessage(event) {\n    let {\n      data\n    } = event;\n    if (data instanceof ArrayBuffer) data = buffer_1.Buffer.from(data);else data = buffer_1.Buffer.from(data, 'utf8');\n    proxy.push(data);\n  }\n  function writev(chunks, cb) {\n    const buffers = new Array(chunks.length);\n    for (let i = 0; i < chunks.length; i++) {\n      if (typeof chunks[i].chunk === 'string') {\n        buffers[i] = buffer_1.Buffer.from(chunks[i], 'utf8');\n      } else {\n        buffers[i] = chunks[i].chunk;\n      }\n    }\n    this._write(buffer_1.Buffer.concat(buffers), 'binary', cb);\n  }\n  function socketWriteBrowser(chunk, enc, next) {\n    if (socket.bufferedAmount > bufferSize) {\n      setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next);\n    }\n    if (coerceToBuffer && typeof chunk === 'string') {\n      chunk = buffer_1.Buffer.from(chunk, 'utf8');\n    }\n    try {\n      socket.send(chunk);\n    } catch (err) {\n      return next(err);\n    }\n    next();\n  }\n  function socketEndBrowser(done) {\n    socket.close();\n    done();\n  }\n  return stream;\n};\nexports.default = is_browser_1.default ? browserStreamBuilder : streamBuilder;","map":{"version":3,"names":["buffer_1","require","ws_1","__importDefault","debug_1","duplexify_1","readable_stream_1","is_browser_1","debug","default","WSS_OPTIONS","buildUrl","opts","client","url","protocol","hostname","port","path","transformWsUrl","setDefaultOpts","options","wsOptions","forEach","prop","Object","prototype","hasOwnProperty","call","setDefaultBrowserOpts","host","document","Error","parsed","URL","Number","objectMode","undefined","binary","createWebSocket","protocolId","protocolVersion","websocketSubProtocol","socket","createBrowserWebSocket","WebSocket","binaryType","streamBuilder","webSocketStream","createWebSocketStream","on","destroy","browserStreamBuilder","stream","bufferSize","browserBufferSize","bufferTimeout","browserBufferTimeout","coerceToBuffer","proxy","buildProxy","socketWriteBrowser","socketEndBrowser","_writev","writev","close","eventListenerSupport","addEventListener","readyState","OPEN","onOpen","onopen","onClose","onError","onMessage","onclose","onerror","onmessage","pOptions","socketWrite","socketEnd","_proxy","Transform","_write","_flush","setReadable","setWritable","emit","end","err","event","data","ArrayBuffer","Buffer","from","push","chunks","cb","buffers","Array","length","i","chunk","concat","enc","next","bufferedAmount","setTimeout","send","done","exports"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/mqtt/src/lib/connect/ws.ts"],"sourcesContent":["import { StreamBuilder } from '../shared'\n\nimport { Buffer } from 'buffer'\nimport WS, { ClientOptions } from 'ws'\nimport _debug from 'debug'\nimport duplexify from 'duplexify'\nimport { DuplexOptions, Transform } from 'readable-stream'\nimport IS_BROWSER from '../is-browser'\nimport MqttClient, { IClientOptions } from '../client'\n\nconst debug = _debug('mqttjs:ws')\n\nconst WSS_OPTIONS = [\n\t'rejectUnauthorized',\n\t'ca',\n\t'cert',\n\t'key',\n\t'pfx',\n\t'passphrase',\n]\n\nfunction buildUrl(opts: IClientOptions, client: MqttClient) {\n\tlet url = `${opts.protocol}://${opts.hostname}:${opts.port}${opts.path}`\n\tif (typeof opts.transformWsUrl === 'function') {\n\t\turl = opts.transformWsUrl(url, opts, client)\n\t}\n\treturn url\n}\n\nfunction setDefaultOpts(opts: IClientOptions) {\n\tconst options = opts\n\tif (!opts.hostname) {\n\t\toptions.hostname = 'localhost'\n\t}\n\tif (!opts.port) {\n\t\tif (opts.protocol === 'wss') {\n\t\t\toptions.port = 443\n\t\t} else {\n\t\t\toptions.port = 80\n\t\t}\n\t}\n\tif (!opts.path) {\n\t\toptions.path = '/'\n\t}\n\n\tif (!opts.wsOptions) {\n\t\toptions.wsOptions = {}\n\t}\n\tif (!IS_BROWSER && opts.protocol === 'wss') {\n\t\t// Add cert/key/ca etc options\n\t\tWSS_OPTIONS.forEach((prop) => {\n\t\t\tif (\n\t\t\t\tObject.prototype.hasOwnProperty.call(opts, prop) &&\n\t\t\t\t!Object.prototype.hasOwnProperty.call(opts.wsOptions, prop)\n\t\t\t) {\n\t\t\t\toptions.wsOptions[prop] = opts[prop]\n\t\t\t}\n\t\t})\n\t}\n\n\treturn options\n}\n\nfunction setDefaultBrowserOpts(opts: IClientOptions) {\n\tconst options = setDefaultOpts(opts)\n\n\tif (!options.hostname) {\n\t\toptions.hostname = options.host\n\t}\n\n\tif (!options.hostname) {\n\t\t// Throwing an error in a Web Worker if no `hostname` is given, because we\n\t\t// can not determine the `hostname` automatically.  If connecting to\n\t\t// localhost, please supply the `hostname` as an argument.\n\t\tif (typeof document === 'undefined') {\n\t\t\tthrow new Error('Could not determine host. Specify host manually.')\n\t\t}\n\t\tconst parsed = new URL(document.URL)\n\t\toptions.hostname = parsed.hostname\n\n\t\tif (!options.port) {\n\t\t\toptions.port = Number(parsed.port)\n\t\t}\n\t}\n\n\t// objectMode should be defined for logic\n\tif (options.objectMode === undefined) {\n\t\toptions.objectMode = !(\n\t\t\toptions.binary === true || options.binary === undefined\n\t\t)\n\t}\n\n\treturn options\n}\n\nfunction createWebSocket(\n\tclient: MqttClient,\n\turl: string,\n\topts: IClientOptions,\n) {\n\tdebug('createWebSocket')\n\tdebug(`protocol: ${opts.protocolId} ${opts.protocolVersion}`)\n\tconst websocketSubProtocol =\n\t\topts.protocolId === 'MQIsdp' && opts.protocolVersion === 3\n\t\t\t? 'mqttv3.1'\n\t\t\t: 'mqtt'\n\n\tdebug(\n\t\t`creating new Websocket for url: ${url} and protocol: ${websocketSubProtocol}`,\n\t)\n\tconst socket = new WS(\n\t\turl,\n\t\t[websocketSubProtocol],\n\t\topts.wsOptions as ClientOptions,\n\t)\n\treturn socket\n}\n\nfunction createBrowserWebSocket(client: MqttClient, opts: IClientOptions) {\n\tconst websocketSubProtocol =\n\t\topts.protocolId === 'MQIsdp' && opts.protocolVersion === 3\n\t\t\t? 'mqttv3.1'\n\t\t\t: 'mqtt'\n\n\tconst url = buildUrl(opts, client)\n\tconst socket = new WebSocket(url, [websocketSubProtocol])\n\tsocket.binaryType = 'arraybuffer'\n\treturn socket\n}\n\nconst streamBuilder: StreamBuilder = (client, opts) => {\n\tdebug('streamBuilder')\n\tconst options = setDefaultOpts(opts)\n\tconst url = buildUrl(options, client)\n\tconst socket = createWebSocket(client, url, options)\n\tconst webSocketStream = WS.createWebSocketStream(\n\t\tsocket,\n\t\toptions.wsOptions as DuplexOptions,\n\t)\n\n\twebSocketStream['url'] = url\n\tsocket.on('close', () => {\n\t\twebSocketStream.destroy()\n\t})\n\treturn webSocketStream\n}\n\nconst browserStreamBuilder: StreamBuilder = (client, opts) => {\n\tdebug('browserStreamBuilder')\n\tlet stream\n\tconst options = setDefaultBrowserOpts(opts)\n\t// sets the maximum socket buffer size before throttling\n\tconst bufferSize = options.browserBufferSize || 1024 * 512\n\n\tconst bufferTimeout = opts.browserBufferTimeout || 1000\n\n\tconst coerceToBuffer = !opts.objectMode\n\n\tconst socket = createBrowserWebSocket(client, opts)\n\tconst proxy = buildProxy(opts, socketWriteBrowser, socketEndBrowser)\n\n\tif (!opts.objectMode) {\n\t\tproxy._writev = writev\n\t}\n\tproxy.on('close', () => {\n\t\tsocket.close()\n\t})\n\n\tconst eventListenerSupport = typeof socket.addEventListener !== 'undefined'\n\n\t// was already open when passed in\n\tif (socket.readyState === socket.OPEN) {\n\t\tstream = proxy\n\t} else {\n\t\tstream = duplexify(undefined, undefined, opts)\n\t\tif (!opts.objectMode) {\n\t\t\tstream._writev = writev\n\t\t}\n\n\t\tif (eventListenerSupport) {\n\t\t\tsocket.addEventListener('open', onOpen)\n\t\t} else {\n\t\t\tsocket.onopen = onOpen\n\t\t}\n\t}\n\n\tstream.socket = socket\n\n\tif (eventListenerSupport) {\n\t\tsocket.addEventListener('close', onClose)\n\t\tsocket.addEventListener('error', onError)\n\t\tsocket.addEventListener('message', onMessage)\n\t} else {\n\t\tsocket.onclose = onClose\n\t\tsocket.onerror = onError\n\t\tsocket.onmessage = onMessage\n\t}\n\n\t// methods for browserStreamBuilder\n\n\tfunction buildProxy(pOptions: IClientOptions, socketWrite, socketEnd) {\n\t\tconst _proxy = new Transform({\n\t\t\tobjectMode: pOptions.objectMode,\n\t\t})\n\n\t\t_proxy._write = socketWrite\n\t\t_proxy._flush = socketEnd\n\n\t\treturn _proxy\n\t}\n\n\tfunction onOpen() {\n\t\tstream.setReadable(proxy)\n\t\tstream.setWritable(proxy)\n\t\tstream.emit('connect')\n\t}\n\n\tfunction onClose() {\n\t\tstream.end()\n\t\tstream.destroy()\n\t}\n\n\tfunction onError(err: Event) {\n\t\tstream.destroy(err)\n\t}\n\n\tfunction onMessage(event: MessageEvent) {\n\t\tlet { data } = event\n\t\tif (data instanceof ArrayBuffer) data = Buffer.from(data)\n\t\telse data = Buffer.from(data, 'utf8')\n\t\tproxy.push(data)\n\t}\n\n\t// this is to be enabled only if objectMode is false\n\tfunction writev(chunks: any, cb: (err?: Error) => void) {\n\t\tconst buffers = new Array(chunks.length)\n\t\tfor (let i = 0; i < chunks.length; i++) {\n\t\t\tif (typeof chunks[i].chunk === 'string') {\n\t\t\t\tbuffers[i] = Buffer.from(chunks[i], 'utf8')\n\t\t\t} else {\n\t\t\t\tbuffers[i] = chunks[i].chunk\n\t\t\t}\n\t\t}\n\n\t\tthis._write(Buffer.concat(buffers), 'binary', cb)\n\t}\n\n\tfunction socketWriteBrowser(\n\t\tchunk: any,\n\t\tenc: string,\n\t\tnext: (err?: Error) => void,\n\t) {\n\t\tif (socket.bufferedAmount > bufferSize) {\n\t\t\t// throttle data until buffered amount is reduced.\n\t\t\tsetTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next)\n\t\t}\n\n\t\tif (coerceToBuffer && typeof chunk === 'string') {\n\t\t\tchunk = Buffer.from(chunk, 'utf8')\n\t\t}\n\n\t\ttry {\n\t\t\tsocket.send(chunk)\n\t\t} catch (err) {\n\t\t\treturn next(err)\n\t\t}\n\n\t\tnext()\n\t}\n\n\tfunction socketEndBrowser(done) {\n\t\tsocket.close()\n\t\tdone()\n\t}\n\n\t// end methods for browserStreamBuilder\n\n\treturn stream\n}\n\nexport default IS_BROWSER ? browserStreamBuilder : streamBuilder\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}