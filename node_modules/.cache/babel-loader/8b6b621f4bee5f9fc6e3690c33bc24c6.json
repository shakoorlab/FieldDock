{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst lru_cache_1 = __importDefault(require(\"lru-cache\"));\nconst number_allocator_1 = require(\"number-allocator\");\nclass TopicAliasSend {\n  constructor(max) {\n    if (max > 0) {\n      this.aliasToTopic = new lru_cache_1.default({\n        max\n      });\n      this.topicToAlias = {};\n      this.numberAllocator = new number_allocator_1.NumberAllocator(1, max);\n      this.max = max;\n      this.length = 0;\n    }\n  }\n  put(topic, alias) {\n    if (alias === 0 || alias > this.max) {\n      return false;\n    }\n    const entry = this.aliasToTopic.get(alias);\n    if (entry) {\n      delete this.topicToAlias[entry];\n    }\n    this.aliasToTopic.set(alias, topic);\n    this.topicToAlias[topic] = alias;\n    this.numberAllocator.use(alias);\n    this.length = this.aliasToTopic.size;\n    return true;\n  }\n  getTopicByAlias(alias) {\n    return this.aliasToTopic.get(alias);\n  }\n  getAliasByTopic(topic) {\n    const alias = this.topicToAlias[topic];\n    if (typeof alias !== 'undefined') {\n      this.aliasToTopic.get(alias);\n    }\n    return alias;\n  }\n  clear() {\n    this.aliasToTopic.clear();\n    this.topicToAlias = {};\n    this.numberAllocator.clear();\n    this.length = 0;\n  }\n  getLruAlias() {\n    const alias = this.numberAllocator.firstVacant();\n    if (alias) return alias;\n    return [...this.aliasToTopic.keys()][this.aliasToTopic.size - 1];\n  }\n}\nexports.default = TopicAliasSend;","map":{"version":3,"names":["lru_cache_1","__importDefault","require","number_allocator_1","TopicAliasSend","constructor","max","aliasToTopic","default","topicToAlias","numberAllocator","NumberAllocator","length","put","topic","alias","entry","get","set","use","size","getTopicByAlias","getAliasByTopic","clear","getLruAlias","firstVacant","keys","exports"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/mqtt/src/lib/topic-alias-send.ts"],"sourcesContent":["/**\n * Module dependencies\n */\nimport LRUCache from 'lru-cache'\nimport { NumberAllocator } from 'number-allocator'\n\n/**\n * Topic Alias sending manager\n * This holds both topic to alias and alias to topic map\n * @param {Number} [max] - topic alias maximum entries\n */\nexport default class TopicAliasSend {\n\tprivate aliasToTopic: LRUCache<number, string>\n\n\tprivate topicToAlias: Record<string, number>\n\n\tprivate max: number\n\n\tprivate numberAllocator: NumberAllocator\n\n\tpublic length: number\n\n\tconstructor(max: number) {\n\t\tif (max > 0) {\n\t\t\tthis.aliasToTopic = new LRUCache<number, string>({ max })\n\t\t\tthis.topicToAlias = {}\n\t\t\tthis.numberAllocator = new NumberAllocator(1, max)\n\t\t\tthis.max = max\n\t\t\tthis.length = 0\n\t\t}\n\t}\n\n\t/**\n\t * Insert or update topic - alias entry.\n\t * @param {String} [topic] - topic\n\t * @param {Number} [alias] - topic alias\n\t * @returns {Boolean} - if success return true otherwise false\n\t */\n\tput(topic: string, alias: number): boolean {\n\t\tif (alias === 0 || alias > this.max) {\n\t\t\treturn false\n\t\t}\n\t\tconst entry = this.aliasToTopic.get(alias)\n\t\tif (entry) {\n\t\t\tdelete this.topicToAlias[entry]\n\t\t}\n\t\tthis.aliasToTopic.set(alias, topic)\n\t\tthis.topicToAlias[topic] = alias\n\t\tthis.numberAllocator.use(alias)\n\t\tthis.length = this.aliasToTopic.size\n\t\treturn true\n\t}\n\n\t/**\n\t * Get topic by alias\n\t * @param {Number} [alias] - topic alias\n\t * @returns {String} - if mapped topic exists return topic, otherwise return undefined\n\t */\n\tgetTopicByAlias(alias: number): string {\n\t\treturn this.aliasToTopic.get(alias)\n\t}\n\n\t/**\n\t * Get topic by alias\n\t * @param {String} [topic] - topic\n\t * @returns {Number} - if mapped topic exists return topic alias, otherwise return undefined\n\t */\n\tgetAliasByTopic(topic: string): number | undefined {\n\t\tconst alias = this.topicToAlias[topic]\n\t\tif (typeof alias !== 'undefined') {\n\t\t\tthis.aliasToTopic.get(alias) // LRU update\n\t\t}\n\t\treturn alias\n\t}\n\n\t/**\n\t * Clear all entries\n\t */\n\tclear() {\n\t\tthis.aliasToTopic.clear()\n\t\tthis.topicToAlias = {}\n\t\tthis.numberAllocator.clear()\n\t\tthis.length = 0\n\t}\n\n\t/**\n\t * Get Least Recently Used (LRU) topic alias\n\t * @returns {Number} - if vacant alias exists then return it, otherwise then return LRU alias\n\t */\n\tgetLruAlias(): number {\n\t\tconst alias = this.numberAllocator.firstVacant()\n\t\tif (alias) return alias\n\t\t// get last alias (key) from LRU cache\n\t\treturn [...this.aliasToTopic.keys()][this.aliasToTopic.size - 1]\n\t}\n}\n"],"mappings":";;;;;;;;;;AAGA,MAAAA,WAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,kBAAA,GAAAD,OAAA;AAOA,MAAqBE,cAAc;EAWlCC,YAAYC,GAAW;IACtB,IAAIA,GAAG,GAAG,CAAC,EAAE;MACZ,IAAI,CAACC,YAAY,GAAG,IAAIP,WAAA,CAAAQ,OAAQ,CAAiB;QAAEF;MAAG,CAAE,CAAC;MACzD,IAAI,CAACG,YAAY,GAAG,EAAE;MACtB,IAAI,CAACC,eAAe,GAAG,IAAIP,kBAAA,CAAAQ,eAAe,CAAC,CAAC,EAAEL,GAAG,CAAC;MAClD,IAAI,CAACA,GAAG,GAAGA,GAAG;MACd,IAAI,CAACM,MAAM,GAAG,CAAC;;EAEjB;EAQAC,GAAGA,CAACC,KAAa,EAAEC,KAAa;IAC/B,IAAIA,KAAK,KAAK,CAAC,IAAIA,KAAK,GAAG,IAAI,CAACT,GAAG,EAAE;MACpC,OAAO,KAAK;;IAEb,MAAMU,KAAK,GAAG,IAAI,CAACT,YAAY,CAACU,GAAG,CAACF,KAAK,CAAC;IAC1C,IAAIC,KAAK,EAAE;MACV,OAAO,IAAI,CAACP,YAAY,CAACO,KAAK,CAAC;;IAEhC,IAAI,CAACT,YAAY,CAACW,GAAG,CAACH,KAAK,EAAED,KAAK,CAAC;IACnC,IAAI,CAACL,YAAY,CAACK,KAAK,CAAC,GAAGC,KAAK;IAChC,IAAI,CAACL,eAAe,CAACS,GAAG,CAACJ,KAAK,CAAC;IAC/B,IAAI,CAACH,MAAM,GAAG,IAAI,CAACL,YAAY,CAACa,IAAI;IACpC,OAAO,IAAI;EACZ;EAOAC,eAAeA,CAACN,KAAa;IAC5B,OAAO,IAAI,CAACR,YAAY,CAACU,GAAG,CAACF,KAAK,CAAC;EACpC;EAOAO,eAAeA,CAACR,KAAa;IAC5B,MAAMC,KAAK,GAAG,IAAI,CAACN,YAAY,CAACK,KAAK,CAAC;IACtC,IAAI,OAAOC,KAAK,KAAK,WAAW,EAAE;MACjC,IAAI,CAACR,YAAY,CAACU,GAAG,CAACF,KAAK,CAAC;;IAE7B,OAAOA,KAAK;EACb;EAKAQ,KAAKA,CAAA;IACJ,IAAI,CAAChB,YAAY,CAACgB,KAAK,EAAE;IACzB,IAAI,CAACd,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,eAAe,CAACa,KAAK,EAAE;IAC5B,IAAI,CAACX,MAAM,GAAG,CAAC;EAChB;EAMAY,WAAWA,CAAA;IACV,MAAMT,KAAK,GAAG,IAAI,CAACL,eAAe,CAACe,WAAW,EAAE;IAChD,IAAIV,KAAK,EAAE,OAAOA,KAAK;IAEvB,OAAO,CAAC,GAAG,IAAI,CAACR,YAAY,CAACmB,IAAI,EAAE,CAAC,CAAC,IAAI,CAACnB,YAAY,CAACa,IAAI,GAAG,CAAC,CAAC;EACjE;;AAnFDO,OAAA,CAAAnB,OAAA,GAAAJ,cAAA"},"metadata":{},"sourceType":"script"}