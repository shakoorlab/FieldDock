{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions) {\n  let sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = _ref2 => {\n  let {\n    firstIndex,\n    lastIndex,\n    buffer,\n    minFirstIndex,\n    maxLastIndex\n  } = _ref2;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();\n    const lastMeasuredIndexRelativeToCurrentPage = lastMeasuredIndexRelativeToAllRows - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);\n    const lastMeasuredIndex = Math.max(0, lastMeasuredIndexRelativeToCurrentPage);\n    let allRowsMeasured = lastMeasuredIndex === Infinity;\n\n    if ((_currentPage$range2 = currentPage.range) != null && _currentPage$range2.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndex >= currentPage.range.lastRowIndex;\n    }\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndex] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndex);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + rootRef.current.clientHeight);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerWidth, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerWidth]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(params => {\n    setContainerWidth(params.width);\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext\n    };\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5, _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: function () {\n      let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function () {\n      let {\n        style = {}\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","ReactDOM","useForkRef","useGridApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridDensityRowHeightSelector","gridFocusCellSelector","gridTabIndexCellSelector","gridEditRowsStateSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","jsx","_jsx","binarySearch","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","min","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","columnPositions","columnsTotalWidth","rowHeight","cellFocus","cellTabIndex","rowsMeta","editRowsState","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerWidth","setContainerWidth","prevTotalWidth","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","unstable_getLastMeasuredRowIndex","lastMeasuredIndexRelativeToCurrentPage","range","firstRowIndex","lastMeasuredIndex","max","allRowsMeasured","Infinity","lastRowIndex","computeRenderContext","rows","firstColumnIndex","lastColumnIndex","autoHeight","clientHeight","hasRowWithAutoHeight","firstRowToRender","lastRowToRender","rowBuffer","i","row","unstable_rowHasAutoHeight","id","useEffect","style","transform","scrollLeft","scrollTop","clientWidth","currentPageTotalHeight","handleResize","params","width","updateRenderZonePosition","nextRenderContext","initialFirstColumnToRender","columnBuffer","firstColumnToRender","visibleRows","state","useLayoutEffect","updateRenderContext","publishEvent","initialRenderContext","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","abs","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","getRows","minFirstColumn","maxLastColumn","availableSpace","rowIndexOffset","position","renderedRows","forEach","push","unstable_calculateColSpan","rowId","columns","lastColumnToRender","renderedColumns","slice","_currentPage$range5","_rootProps$components","model","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","components","Row","selected","isLastVisible","componentsProps","needsHorizontalScrollbar","contentSize","useMemo","height","shouldExtendContent","size","minHeight","rootStyle","overflowX","overflowY","getRenderContext","unstable_getRenderContext","getRootProps","_ref","other","onScroll","onWheel","onTouchMove","getContentProps","getRenderZoneProps"],"sources":["/Users/jstanton/Desktop/Coding/FieldDockMain/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();\n    const lastMeasuredIndexRelativeToCurrentPage = lastMeasuredIndexRelativeToAllRows - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);\n    const lastMeasuredIndex = Math.max(0, lastMeasuredIndexRelativeToCurrentPage);\n    let allRowsMeasured = lastMeasuredIndex === Infinity;\n\n    if ((_currentPage$range2 = currentPage.range) != null && _currentPage$range2.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndex >= currentPage.range.lastRowIndex;\n    }\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndex] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndex);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + rootRef.current.clientHeight);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerWidth, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerWidth]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(params => {\n    setContainerWidth(params.width);\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5, _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}