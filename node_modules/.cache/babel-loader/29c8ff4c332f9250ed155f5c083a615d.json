{"ast":null,"code":"/* Protocol - protocol constants */\nconst protocol = module.exports;\nconst {\n  Buffer\n} = require('buffer');\n\n/* Command code => mnemonic */\nprotocol.types = {\n  0: 'reserved',\n  1: 'connect',\n  2: 'connack',\n  3: 'publish',\n  4: 'puback',\n  5: 'pubrec',\n  6: 'pubrel',\n  7: 'pubcomp',\n  8: 'subscribe',\n  9: 'suback',\n  10: 'unsubscribe',\n  11: 'unsuback',\n  12: 'pingreq',\n  13: 'pingresp',\n  14: 'disconnect',\n  15: 'auth'\n};\nprotocol.requiredHeaderFlags = {\n  1: 0,\n  // 'connect'\n  2: 0,\n  // 'connack'\n  4: 0,\n  // 'puback'\n  5: 0,\n  // 'pubrec'\n  6: 2,\n  // 'pubrel'\n  7: 0,\n  // 'pubcomp'\n  8: 2,\n  // 'subscribe'\n  9: 0,\n  // 'suback'\n  10: 2,\n  // 'unsubscribe'\n  11: 0,\n  // 'unsuback'\n  12: 0,\n  // 'pingreq'\n  13: 0,\n  // 'pingresp'\n  14: 0,\n  // 'disconnect'\n  15: 0 // 'auth'\n};\n\nprotocol.requiredHeaderFlagsErrors = {};\nfor (const k in protocol.requiredHeaderFlags) {\n  const v = protocol.requiredHeaderFlags[k];\n  protocol.requiredHeaderFlagsErrors[k] = 'Invalid header flag bits, must be 0x' + v.toString(16) + ' for ' + protocol.types[k] + ' packet';\n}\n\n/* Mnemonic => Command code */\nprotocol.codes = {};\nfor (const k in protocol.types) {\n  const v = protocol.types[k];\n  protocol.codes[v] = k;\n}\n\n/* Header */\nprotocol.CMD_SHIFT = 4;\nprotocol.CMD_MASK = 0xF0;\nprotocol.DUP_MASK = 0x08;\nprotocol.QOS_MASK = 0x03;\nprotocol.QOS_SHIFT = 1;\nprotocol.RETAIN_MASK = 0x01;\n\n/* Length */\nprotocol.VARBYTEINT_MASK = 0x7F;\nprotocol.VARBYTEINT_FIN_MASK = 0x80;\nprotocol.VARBYTEINT_MAX = 268435455;\n\n/* Connack */\nprotocol.SESSIONPRESENT_MASK = 0x01;\nprotocol.SESSIONPRESENT_HEADER = Buffer.from([protocol.SESSIONPRESENT_MASK]);\nprotocol.CONNACK_HEADER = Buffer.from([protocol.codes.connack << protocol.CMD_SHIFT]);\n\n/* Connect */\nprotocol.USERNAME_MASK = 0x80;\nprotocol.PASSWORD_MASK = 0x40;\nprotocol.WILL_RETAIN_MASK = 0x20;\nprotocol.WILL_QOS_MASK = 0x18;\nprotocol.WILL_QOS_SHIFT = 3;\nprotocol.WILL_FLAG_MASK = 0x04;\nprotocol.CLEAN_SESSION_MASK = 0x02;\nprotocol.CONNECT_HEADER = Buffer.from([protocol.codes.connect << protocol.CMD_SHIFT]);\n\n/* Properties */\nprotocol.properties = {\n  sessionExpiryInterval: 17,\n  willDelayInterval: 24,\n  receiveMaximum: 33,\n  maximumPacketSize: 39,\n  topicAliasMaximum: 34,\n  requestResponseInformation: 25,\n  requestProblemInformation: 23,\n  userProperties: 38,\n  authenticationMethod: 21,\n  authenticationData: 22,\n  payloadFormatIndicator: 1,\n  messageExpiryInterval: 2,\n  contentType: 3,\n  responseTopic: 8,\n  correlationData: 9,\n  maximumQoS: 36,\n  retainAvailable: 37,\n  assignedClientIdentifier: 18,\n  reasonString: 31,\n  wildcardSubscriptionAvailable: 40,\n  subscriptionIdentifiersAvailable: 41,\n  sharedSubscriptionAvailable: 42,\n  serverKeepAlive: 19,\n  responseInformation: 26,\n  serverReference: 28,\n  topicAlias: 35,\n  subscriptionIdentifier: 11\n};\nprotocol.propertiesCodes = {};\nfor (const prop in protocol.properties) {\n  const id = protocol.properties[prop];\n  protocol.propertiesCodes[id] = prop;\n}\nprotocol.propertiesTypes = {\n  sessionExpiryInterval: 'int32',\n  willDelayInterval: 'int32',\n  receiveMaximum: 'int16',\n  maximumPacketSize: 'int32',\n  topicAliasMaximum: 'int16',\n  requestResponseInformation: 'byte',\n  requestProblemInformation: 'byte',\n  userProperties: 'pair',\n  authenticationMethod: 'string',\n  authenticationData: 'binary',\n  payloadFormatIndicator: 'byte',\n  messageExpiryInterval: 'int32',\n  contentType: 'string',\n  responseTopic: 'string',\n  correlationData: 'binary',\n  maximumQoS: 'int8',\n  retainAvailable: 'byte',\n  assignedClientIdentifier: 'string',\n  reasonString: 'string',\n  wildcardSubscriptionAvailable: 'byte',\n  subscriptionIdentifiersAvailable: 'byte',\n  sharedSubscriptionAvailable: 'byte',\n  serverKeepAlive: 'int16',\n  responseInformation: 'string',\n  serverReference: 'string',\n  topicAlias: 'int16',\n  subscriptionIdentifier: 'var'\n};\nfunction genHeader(type) {\n  return [0, 1, 2].map(qos => {\n    return [0, 1].map(dup => {\n      return [0, 1].map(retain => {\n        const buf = Buffer.alloc(1);\n        buf.writeUInt8(protocol.codes[type] << protocol.CMD_SHIFT | (dup ? protocol.DUP_MASK : 0) | qos << protocol.QOS_SHIFT | retain, 0, true);\n        return buf;\n      });\n    });\n  });\n}\n\n/* Publish */\nprotocol.PUBLISH_HEADER = genHeader('publish');\n\n/* Subscribe */\nprotocol.SUBSCRIBE_HEADER = genHeader('subscribe');\nprotocol.SUBSCRIBE_OPTIONS_QOS_MASK = 0x03;\nprotocol.SUBSCRIBE_OPTIONS_NL_MASK = 0x01;\nprotocol.SUBSCRIBE_OPTIONS_NL_SHIFT = 2;\nprotocol.SUBSCRIBE_OPTIONS_RAP_MASK = 0x01;\nprotocol.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3;\nprotocol.SUBSCRIBE_OPTIONS_RH_MASK = 0x03;\nprotocol.SUBSCRIBE_OPTIONS_RH_SHIFT = 4;\nprotocol.SUBSCRIBE_OPTIONS_RH = [0x00, 0x10, 0x20];\nprotocol.SUBSCRIBE_OPTIONS_NL = 0x04;\nprotocol.SUBSCRIBE_OPTIONS_RAP = 0x08;\nprotocol.SUBSCRIBE_OPTIONS_QOS = [0x00, 0x01, 0x02];\n\n/* Unsubscribe */\nprotocol.UNSUBSCRIBE_HEADER = genHeader('unsubscribe');\n\n/* Confirmations */\nprotocol.ACKS = {\n  unsuback: genHeader('unsuback'),\n  puback: genHeader('puback'),\n  pubcomp: genHeader('pubcomp'),\n  pubrel: genHeader('pubrel'),\n  pubrec: genHeader('pubrec')\n};\nprotocol.SUBACK_HEADER = Buffer.from([protocol.codes.suback << protocol.CMD_SHIFT]);\n\n/* Protocol versions */\nprotocol.VERSION3 = Buffer.from([3]);\nprotocol.VERSION4 = Buffer.from([4]);\nprotocol.VERSION5 = Buffer.from([5]);\nprotocol.VERSION131 = Buffer.from([131]);\nprotocol.VERSION132 = Buffer.from([132]);\n\n/* QoS */\nprotocol.QOS = [0, 1, 2].map(qos => {\n  return Buffer.from([qos]);\n});\n\n/* Empty packets */\nprotocol.EMPTY = {\n  pingreq: Buffer.from([protocol.codes.pingreq << 4, 0]),\n  pingresp: Buffer.from([protocol.codes.pingresp << 4, 0]),\n  disconnect: Buffer.from([protocol.codes.disconnect << 4, 0])\n};\nprotocol.MQTT5_PUBACK_PUBREC_CODES = {\n  0x00: 'Success',\n  0x10: 'No matching subscribers',\n  0x80: 'Unspecified error',\n  0x83: 'Implementation specific error',\n  0x87: 'Not authorized',\n  0x90: 'Topic Name invalid',\n  0x91: 'Packet identifier in use',\n  0x97: 'Quota exceeded',\n  0x99: 'Payload format invalid'\n};\nprotocol.MQTT5_PUBREL_PUBCOMP_CODES = {\n  0x00: 'Success',\n  0x92: 'Packet Identifier not found'\n};\nprotocol.MQTT5_SUBACK_CODES = {\n  0x00: 'Granted QoS 0',\n  0x01: 'Granted QoS 1',\n  0x02: 'Granted QoS 2',\n  0x80: 'Unspecified error',\n  0x83: 'Implementation specific error',\n  0x87: 'Not authorized',\n  0x8F: 'Topic Filter invalid',\n  0x91: 'Packet Identifier in use',\n  0x97: 'Quota exceeded',\n  0x9E: 'Shared Subscriptions not supported',\n  0xA1: 'Subscription Identifiers not supported',\n  0xA2: 'Wildcard Subscriptions not supported'\n};\nprotocol.MQTT5_UNSUBACK_CODES = {\n  0x00: 'Success',\n  0x11: 'No subscription existed',\n  0x80: 'Unspecified error',\n  0x83: 'Implementation specific error',\n  0x87: 'Not authorized',\n  0x8F: 'Topic Filter invalid',\n  0x91: 'Packet Identifier in use'\n};\nprotocol.MQTT5_DISCONNECT_CODES = {\n  0x00: 'Normal disconnection',\n  0x04: 'Disconnect with Will Message',\n  0x80: 'Unspecified error',\n  0x81: 'Malformed Packet',\n  0x82: 'Protocol Error',\n  0x83: 'Implementation specific error',\n  0x87: 'Not authorized',\n  0x89: 'Server busy',\n  0x8B: 'Server shutting down',\n  0x8D: 'Keep Alive timeout',\n  0x8E: 'Session taken over',\n  0x8F: 'Topic Filter invalid',\n  0x90: 'Topic Name invalid',\n  0x93: 'Receive Maximum exceeded',\n  0x94: 'Topic Alias invalid',\n  0x95: 'Packet too large',\n  0x96: 'Message rate too high',\n  0x97: 'Quota exceeded',\n  0x98: 'Administrative action',\n  0x99: 'Payload format invalid',\n  0x9A: 'Retain not supported',\n  0x9B: 'QoS not supported',\n  0x9C: 'Use another server',\n  0x9D: 'Server moved',\n  0x9E: 'Shared Subscriptions not supported',\n  0x9F: 'Connection rate exceeded',\n  0xA0: 'Maximum connect time',\n  0xA1: 'Subscription Identifiers not supported',\n  0xA2: 'Wildcard Subscriptions not supported'\n};\nprotocol.MQTT5_AUTH_CODES = {\n  0x00: 'Success',\n  0x18: 'Continue authentication',\n  0x19: 'Re-authenticate'\n};","map":{"version":3,"names":["protocol","module","exports","Buffer","require","types","requiredHeaderFlags","requiredHeaderFlagsErrors","k","v","toString","codes","CMD_SHIFT","CMD_MASK","DUP_MASK","QOS_MASK","QOS_SHIFT","RETAIN_MASK","VARBYTEINT_MASK","VARBYTEINT_FIN_MASK","VARBYTEINT_MAX","SESSIONPRESENT_MASK","SESSIONPRESENT_HEADER","from","CONNACK_HEADER","connack","USERNAME_MASK","PASSWORD_MASK","WILL_RETAIN_MASK","WILL_QOS_MASK","WILL_QOS_SHIFT","WILL_FLAG_MASK","CLEAN_SESSION_MASK","CONNECT_HEADER","connect","properties","sessionExpiryInterval","willDelayInterval","receiveMaximum","maximumPacketSize","topicAliasMaximum","requestResponseInformation","requestProblemInformation","userProperties","authenticationMethod","authenticationData","payloadFormatIndicator","messageExpiryInterval","contentType","responseTopic","correlationData","maximumQoS","retainAvailable","assignedClientIdentifier","reasonString","wildcardSubscriptionAvailable","subscriptionIdentifiersAvailable","sharedSubscriptionAvailable","serverKeepAlive","responseInformation","serverReference","topicAlias","subscriptionIdentifier","propertiesCodes","prop","id","propertiesTypes","genHeader","type","map","qos","dup","retain","buf","alloc","writeUInt8","PUBLISH_HEADER","SUBSCRIBE_HEADER","SUBSCRIBE_OPTIONS_QOS_MASK","SUBSCRIBE_OPTIONS_NL_MASK","SUBSCRIBE_OPTIONS_NL_SHIFT","SUBSCRIBE_OPTIONS_RAP_MASK","SUBSCRIBE_OPTIONS_RAP_SHIFT","SUBSCRIBE_OPTIONS_RH_MASK","SUBSCRIBE_OPTIONS_RH_SHIFT","SUBSCRIBE_OPTIONS_RH","SUBSCRIBE_OPTIONS_NL","SUBSCRIBE_OPTIONS_RAP","SUBSCRIBE_OPTIONS_QOS","UNSUBSCRIBE_HEADER","ACKS","unsuback","puback","pubcomp","pubrel","pubrec","SUBACK_HEADER","suback","VERSION3","VERSION4","VERSION5","VERSION131","VERSION132","QOS","EMPTY","pingreq","pingresp","disconnect","MQTT5_PUBACK_PUBREC_CODES","MQTT5_PUBREL_PUBCOMP_CODES","MQTT5_SUBACK_CODES","MQTT5_UNSUBACK_CODES","MQTT5_DISCONNECT_CODES","MQTT5_AUTH_CODES"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/mqtt-packet/constants.js"],"sourcesContent":["/* Protocol - protocol constants */\nconst protocol = module.exports\nconst { Buffer } = require('buffer')\n\n/* Command code => mnemonic */\nprotocol.types = {\n  0: 'reserved',\n  1: 'connect',\n  2: 'connack',\n  3: 'publish',\n  4: 'puback',\n  5: 'pubrec',\n  6: 'pubrel',\n  7: 'pubcomp',\n  8: 'subscribe',\n  9: 'suback',\n  10: 'unsubscribe',\n  11: 'unsuback',\n  12: 'pingreq',\n  13: 'pingresp',\n  14: 'disconnect',\n  15: 'auth'\n}\n\nprotocol.requiredHeaderFlags = {\n  1: 0, // 'connect'\n  2: 0, // 'connack'\n  4: 0, // 'puback'\n  5: 0, // 'pubrec'\n  6: 2, // 'pubrel'\n  7: 0, // 'pubcomp'\n  8: 2, // 'subscribe'\n  9: 0, // 'suback'\n  10: 2, // 'unsubscribe'\n  11: 0, // 'unsuback'\n  12: 0, // 'pingreq'\n  13: 0, // 'pingresp'\n  14: 0, // 'disconnect'\n  15: 0 // 'auth'\n}\n\nprotocol.requiredHeaderFlagsErrors = {}\nfor (const k in protocol.requiredHeaderFlags) {\n  const v = protocol.requiredHeaderFlags[k]\n  protocol.requiredHeaderFlagsErrors[k] = 'Invalid header flag bits, must be 0x' + v.toString(16) + ' for ' + protocol.types[k] + ' packet'\n}\n\n/* Mnemonic => Command code */\nprotocol.codes = {}\nfor (const k in protocol.types) {\n  const v = protocol.types[k]\n  protocol.codes[v] = k\n}\n\n/* Header */\nprotocol.CMD_SHIFT = 4\nprotocol.CMD_MASK = 0xF0\nprotocol.DUP_MASK = 0x08\nprotocol.QOS_MASK = 0x03\nprotocol.QOS_SHIFT = 1\nprotocol.RETAIN_MASK = 0x01\n\n/* Length */\nprotocol.VARBYTEINT_MASK = 0x7F\nprotocol.VARBYTEINT_FIN_MASK = 0x80\nprotocol.VARBYTEINT_MAX = 268435455\n\n/* Connack */\nprotocol.SESSIONPRESENT_MASK = 0x01\nprotocol.SESSIONPRESENT_HEADER = Buffer.from([protocol.SESSIONPRESENT_MASK])\nprotocol.CONNACK_HEADER = Buffer.from([protocol.codes.connack << protocol.CMD_SHIFT])\n\n/* Connect */\nprotocol.USERNAME_MASK = 0x80\nprotocol.PASSWORD_MASK = 0x40\nprotocol.WILL_RETAIN_MASK = 0x20\nprotocol.WILL_QOS_MASK = 0x18\nprotocol.WILL_QOS_SHIFT = 3\nprotocol.WILL_FLAG_MASK = 0x04\nprotocol.CLEAN_SESSION_MASK = 0x02\nprotocol.CONNECT_HEADER = Buffer.from([protocol.codes.connect << protocol.CMD_SHIFT])\n\n/* Properties */\nprotocol.properties = {\n  sessionExpiryInterval: 17,\n  willDelayInterval: 24,\n  receiveMaximum: 33,\n  maximumPacketSize: 39,\n  topicAliasMaximum: 34,\n  requestResponseInformation: 25,\n  requestProblemInformation: 23,\n  userProperties: 38,\n  authenticationMethod: 21,\n  authenticationData: 22,\n  payloadFormatIndicator: 1,\n  messageExpiryInterval: 2,\n  contentType: 3,\n  responseTopic: 8,\n  correlationData: 9,\n  maximumQoS: 36,\n  retainAvailable: 37,\n  assignedClientIdentifier: 18,\n  reasonString: 31,\n  wildcardSubscriptionAvailable: 40,\n  subscriptionIdentifiersAvailable: 41,\n  sharedSubscriptionAvailable: 42,\n  serverKeepAlive: 19,\n  responseInformation: 26,\n  serverReference: 28,\n  topicAlias: 35,\n  subscriptionIdentifier: 11\n}\nprotocol.propertiesCodes = {}\nfor (const prop in protocol.properties) {\n  const id = protocol.properties[prop]\n  protocol.propertiesCodes[id] = prop\n}\nprotocol.propertiesTypes = {\n  sessionExpiryInterval: 'int32',\n  willDelayInterval: 'int32',\n  receiveMaximum: 'int16',\n  maximumPacketSize: 'int32',\n  topicAliasMaximum: 'int16',\n  requestResponseInformation: 'byte',\n  requestProblemInformation: 'byte',\n  userProperties: 'pair',\n  authenticationMethod: 'string',\n  authenticationData: 'binary',\n  payloadFormatIndicator: 'byte',\n  messageExpiryInterval: 'int32',\n  contentType: 'string',\n  responseTopic: 'string',\n  correlationData: 'binary',\n  maximumQoS: 'int8',\n  retainAvailable: 'byte',\n  assignedClientIdentifier: 'string',\n  reasonString: 'string',\n  wildcardSubscriptionAvailable: 'byte',\n  subscriptionIdentifiersAvailable: 'byte',\n  sharedSubscriptionAvailable: 'byte',\n  serverKeepAlive: 'int16',\n  responseInformation: 'string',\n  serverReference: 'string',\n  topicAlias: 'int16',\n  subscriptionIdentifier: 'var'\n}\n\nfunction genHeader (type) {\n  return [0, 1, 2].map(qos => {\n    return [0, 1].map(dup => {\n      return [0, 1].map(retain => {\n        const buf = Buffer.alloc(1)\n        buf.writeUInt8(\n          protocol.codes[type] << protocol.CMD_SHIFT |\n          (dup ? protocol.DUP_MASK : 0) |\n          qos << protocol.QOS_SHIFT | retain, 0, true)\n        return buf\n      })\n    })\n  })\n}\n\n/* Publish */\nprotocol.PUBLISH_HEADER = genHeader('publish')\n\n/* Subscribe */\nprotocol.SUBSCRIBE_HEADER = genHeader('subscribe')\nprotocol.SUBSCRIBE_OPTIONS_QOS_MASK = 0x03\nprotocol.SUBSCRIBE_OPTIONS_NL_MASK = 0x01\nprotocol.SUBSCRIBE_OPTIONS_NL_SHIFT = 2\nprotocol.SUBSCRIBE_OPTIONS_RAP_MASK = 0x01\nprotocol.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3\nprotocol.SUBSCRIBE_OPTIONS_RH_MASK = 0x03\nprotocol.SUBSCRIBE_OPTIONS_RH_SHIFT = 4\nprotocol.SUBSCRIBE_OPTIONS_RH = [0x00, 0x10, 0x20]\nprotocol.SUBSCRIBE_OPTIONS_NL = 0x04\nprotocol.SUBSCRIBE_OPTIONS_RAP = 0x08\nprotocol.SUBSCRIBE_OPTIONS_QOS = [0x00, 0x01, 0x02]\n\n/* Unsubscribe */\nprotocol.UNSUBSCRIBE_HEADER = genHeader('unsubscribe')\n\n/* Confirmations */\nprotocol.ACKS = {\n  unsuback: genHeader('unsuback'),\n  puback: genHeader('puback'),\n  pubcomp: genHeader('pubcomp'),\n  pubrel: genHeader('pubrel'),\n  pubrec: genHeader('pubrec')\n}\n\nprotocol.SUBACK_HEADER = Buffer.from([protocol.codes.suback << protocol.CMD_SHIFT])\n\n/* Protocol versions */\nprotocol.VERSION3 = Buffer.from([3])\nprotocol.VERSION4 = Buffer.from([4])\nprotocol.VERSION5 = Buffer.from([5])\nprotocol.VERSION131 = Buffer.from([131])\nprotocol.VERSION132 = Buffer.from([132])\n\n/* QoS */\nprotocol.QOS = [0, 1, 2].map(qos => {\n  return Buffer.from([qos])\n})\n\n/* Empty packets */\nprotocol.EMPTY = {\n  pingreq: Buffer.from([protocol.codes.pingreq << 4, 0]),\n  pingresp: Buffer.from([protocol.codes.pingresp << 4, 0]),\n  disconnect: Buffer.from([protocol.codes.disconnect << 4, 0])\n}\n\nprotocol.MQTT5_PUBACK_PUBREC_CODES = {\n  0x00: 'Success',\n  0x10: 'No matching subscribers',\n  0x80: 'Unspecified error',\n  0x83: 'Implementation specific error',\n  0x87: 'Not authorized',\n  0x90: 'Topic Name invalid',\n  0x91: 'Packet identifier in use',\n  0x97: 'Quota exceeded',\n  0x99: 'Payload format invalid'\n}\n\nprotocol.MQTT5_PUBREL_PUBCOMP_CODES = {\n  0x00: 'Success',\n  0x92: 'Packet Identifier not found'\n}\n\nprotocol.MQTT5_SUBACK_CODES = {\n  0x00: 'Granted QoS 0',\n  0x01: 'Granted QoS 1',\n  0x02: 'Granted QoS 2',\n  0x80: 'Unspecified error',\n  0x83: 'Implementation specific error',\n  0x87: 'Not authorized',\n  0x8F: 'Topic Filter invalid',\n  0x91: 'Packet Identifier in use',\n  0x97: 'Quota exceeded',\n  0x9E: 'Shared Subscriptions not supported',\n  0xA1: 'Subscription Identifiers not supported',\n  0xA2: 'Wildcard Subscriptions not supported'\n}\n\nprotocol.MQTT5_UNSUBACK_CODES = {\n  0x00: 'Success',\n  0x11: 'No subscription existed',\n  0x80: 'Unspecified error',\n  0x83: 'Implementation specific error',\n  0x87: 'Not authorized',\n  0x8F: 'Topic Filter invalid',\n  0x91: 'Packet Identifier in use'\n}\n\nprotocol.MQTT5_DISCONNECT_CODES = {\n  0x00: 'Normal disconnection',\n  0x04: 'Disconnect with Will Message',\n  0x80: 'Unspecified error',\n  0x81: 'Malformed Packet',\n  0x82: 'Protocol Error',\n  0x83: 'Implementation specific error',\n  0x87: 'Not authorized',\n  0x89: 'Server busy',\n  0x8B: 'Server shutting down',\n  0x8D: 'Keep Alive timeout',\n  0x8E: 'Session taken over',\n  0x8F: 'Topic Filter invalid',\n  0x90: 'Topic Name invalid',\n  0x93: 'Receive Maximum exceeded',\n  0x94: 'Topic Alias invalid',\n  0x95: 'Packet too large',\n  0x96: 'Message rate too high',\n  0x97: 'Quota exceeded',\n  0x98: 'Administrative action',\n  0x99: 'Payload format invalid',\n  0x9A: 'Retain not supported',\n  0x9B: 'QoS not supported',\n  0x9C: 'Use another server',\n  0x9D: 'Server moved',\n  0x9E: 'Shared Subscriptions not supported',\n  0x9F: 'Connection rate exceeded',\n  0xA0: 'Maximum connect time',\n  0xA1: 'Subscription Identifiers not supported',\n  0xA2: 'Wildcard Subscriptions not supported'\n}\n\nprotocol.MQTT5_AUTH_CODES = {\n  0x00: 'Success',\n  0x18: 'Continue authentication',\n  0x19: 'Re-authenticate'\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}