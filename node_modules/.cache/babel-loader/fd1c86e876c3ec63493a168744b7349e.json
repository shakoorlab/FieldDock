{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { TimeField } from '../TimeField';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport { useLocaleText, useUtils } from '../internals/hooks/useUtils';\nimport { validateTime } from '../internals/utils/validation/validateTime';\nimport { ClockIcon } from '../icons';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderDigitalClockTimeView, renderMultiSectionDigitalClockTimeView } from '../timeViewRenderers';\nimport { resolveTimeFormat } from '../internals/utils/time-utils';\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  var _defaultizedProps$thr, _defaultizedProps$amp, _viewRenderers$hours, _defaultizedProps$slo2, _defaultizedProps$slo3;\n  const localeText = useLocaleText();\n  const utils = useUtils();\n\n  // Props with the default values common to all time pickers\n  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const thresholdToRenderTimeInASingleColumn = (_defaultizedProps$thr = defaultizedProps.thresholdToRenderTimeInASingleColumn) != null ? _defaultizedProps$thr : 24;\n  const timeSteps = _extends({\n    hours: 1,\n    minutes: 5,\n    seconds: 5\n  }, defaultizedProps.timeSteps);\n  const shouldRenderTimeInASingleColumn = 24 * 60 / (timeSteps.hours * timeSteps.minutes) <= thresholdToRenderTimeInASingleColumn;\n  const renderTimeView = shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView : renderMultiSectionDigitalClockTimeView;\n  const viewRenderers = _extends({\n    hours: renderTimeView,\n    minutes: renderTimeView,\n    seconds: renderTimeView,\n    meridiem: renderTimeView\n  }, defaultizedProps.viewRenderers);\n  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;\n  const actionBarActions = shouldRenderTimeInASingleColumn ? [] : ['accept'];\n  // Need to avoid adding the `meridiem` view when unexpected renderer is specified\n  const shouldHoursRendererContainMeridiemView = ((_viewRenderers$hours = viewRenderers.hours) == null ? void 0 : _viewRenderers$hours.name) === renderMultiSectionDigitalClockTimeView.name;\n  const views = defaultizedProps.ampm && shouldHoursRendererContainMeridiemView ? [...defaultizedProps.views, 'meridiem'] : defaultizedProps.views;\n\n  // Props with the default values specific to the desktop variant\n  const props = _extends({}, defaultizedProps, {\n    ampmInClock,\n    timeSteps,\n    viewRenderers,\n    format: resolveTimeFormat(utils, defaultizedProps),\n    // Setting only `hours` time view in case of single column time picker\n    // Allows for easy view lifecycle management\n    views: shouldRenderTimeInASingleColumn ? ['hours'] : views,\n    slots: _extends({\n      field: TimeField,\n      openPickerIcon: ClockIcon\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref\n        });\n      },\n      toolbar: _extends({\n        hidden: true,\n        ampmInClock\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),\n      actionBar: _extends({\n        actions: actionBarActions\n      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.actionBar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'time',\n    getOpenDialogAriaText: localeText.openTimePickerDialogue,\n    validator: validateTime\n  });\n  return renderPicker();\n});\nDesktopTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default true on desktop, false on mobile\n   */\n  ampmInClock: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Amount of time options below or at which the single column time renderer is used.\n   * @default 24\n   */\n  thresholdToRenderTimeInASingleColumn: PropTypes.number,\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * When single column time renderer is used, only `timeStep.minutes` will be used.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    meridiem: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n};\nexport { DesktopTimePicker };","map":{"version":3,"names":["_extends","React","PropTypes","resolveComponentProps","singleItemValueManager","TimeField","useTimePickerDefaultizedProps","useLocaleText","useUtils","validateTime","ClockIcon","useDesktopPicker","extractValidationProps","renderDigitalClockTimeView","renderMultiSectionDigitalClockTimeView","resolveTimeFormat","DesktopTimePicker","forwardRef","inProps","ref","_defaultizedProps$thr","_defaultizedProps$amp","_viewRenderers$hours","_defaultizedProps$slo2","_defaultizedProps$slo3","localeText","utils","defaultizedProps","thresholdToRenderTimeInASingleColumn","timeSteps","hours","minutes","seconds","shouldRenderTimeInASingleColumn","renderTimeView","viewRenderers","meridiem","ampmInClock","actionBarActions","shouldHoursRendererContainMeridiemView","name","views","ampm","props","format","slots","field","openPickerIcon","slotProps","ownerState","_defaultizedProps$slo","toolbar","hidden","actionBar","actions","renderPicker","valueManager","valueType","getOpenDialogAriaText","openTimePickerDialogue","validator","propTypes","bool","autoFocus","className","string","closeOnSelect","components","object","componentsProps","defaultValue","any","disabled","disableFuture","disableIgnoringDatePartForTimeValidation","disableOpenPicker","disablePast","formatDensity","oneOf","inputRef","oneOfType","func","shape","current","label","node","maxTime","minTime","minutesStep","number","onAccept","onChange","onClose","onError","onOpen","onSelectedSectionsChange","onViewChange","open","openTo","orientation","readOnly","selectedSections","endIndex","isRequired","startIndex","shouldDisableClock","shouldDisableTime","skipDisabled","sx","arrayOf","timezone","value","view"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/@mui/x-date-pickers/DesktopTimePicker/DesktopTimePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { TimeField } from '../TimeField';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport { useLocaleText, useUtils } from '../internals/hooks/useUtils';\nimport { validateTime } from '../internals/utils/validation/validateTime';\nimport { ClockIcon } from '../icons';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderDigitalClockTimeView, renderMultiSectionDigitalClockTimeView } from '../timeViewRenderers';\nimport { resolveTimeFormat } from '../internals/utils/time-utils';\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  var _defaultizedProps$thr, _defaultizedProps$amp, _viewRenderers$hours, _defaultizedProps$slo2, _defaultizedProps$slo3;\n  const localeText = useLocaleText();\n  const utils = useUtils();\n\n  // Props with the default values common to all time pickers\n  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const thresholdToRenderTimeInASingleColumn = (_defaultizedProps$thr = defaultizedProps.thresholdToRenderTimeInASingleColumn) != null ? _defaultizedProps$thr : 24;\n  const timeSteps = _extends({\n    hours: 1,\n    minutes: 5,\n    seconds: 5\n  }, defaultizedProps.timeSteps);\n  const shouldRenderTimeInASingleColumn = 24 * 60 / (timeSteps.hours * timeSteps.minutes) <= thresholdToRenderTimeInASingleColumn;\n  const renderTimeView = shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView : renderMultiSectionDigitalClockTimeView;\n  const viewRenderers = _extends({\n    hours: renderTimeView,\n    minutes: renderTimeView,\n    seconds: renderTimeView,\n    meridiem: renderTimeView\n  }, defaultizedProps.viewRenderers);\n  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;\n  const actionBarActions = shouldRenderTimeInASingleColumn ? [] : ['accept'];\n  // Need to avoid adding the `meridiem` view when unexpected renderer is specified\n  const shouldHoursRendererContainMeridiemView = ((_viewRenderers$hours = viewRenderers.hours) == null ? void 0 : _viewRenderers$hours.name) === renderMultiSectionDigitalClockTimeView.name;\n  const views = defaultizedProps.ampm && shouldHoursRendererContainMeridiemView ? [...defaultizedProps.views, 'meridiem'] : defaultizedProps.views;\n\n  // Props with the default values specific to the desktop variant\n  const props = _extends({}, defaultizedProps, {\n    ampmInClock,\n    timeSteps,\n    viewRenderers,\n    format: resolveTimeFormat(utils, defaultizedProps),\n    // Setting only `hours` time view in case of single column time picker\n    // Allows for easy view lifecycle management\n    views: shouldRenderTimeInASingleColumn ? ['hours'] : views,\n    slots: _extends({\n      field: TimeField,\n      openPickerIcon: ClockIcon\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref\n        });\n      },\n      toolbar: _extends({\n        hidden: true,\n        ampmInClock\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),\n      actionBar: _extends({\n        actions: actionBarActions\n      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.actionBar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'time',\n    getOpenDialogAriaText: localeText.openTimePickerDialogue,\n    validator: validateTime\n  });\n  return renderPicker();\n});\nDesktopTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default true on desktop, false on mobile\n   */\n  ampmInClock: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Amount of time options below or at which the single column time renderer is used.\n   * @default 24\n   */\n  thresholdToRenderTimeInASingleColumn: PropTypes.number,\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * When single column time renderer is used, only `timeStep.minutes` will be used.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    meridiem: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n};\nexport { DesktopTimePicker };"],"mappings":"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"},"metadata":{},"sourceType":"module"}