{"ast":null,"code":"import { useMemo as n, Fragment as e, createElement as i, useRef as o, useState as t, useCallback as r } from \"react\";\nimport { Container as l, useDimensions as u, SvgWrapper as a, ResponsiveWrapper as d, getRelativeCursor as s } from \"@nivo/core\";\nimport { scaleLinear as c } from \"d3-scale\";\nimport { Delaunay as h } from \"d3-delaunay\";\nimport { jsx as f, jsxs as v, Fragment as p } from \"react/jsx-runtime\";\n\nfunction m() {\n  return m = Object.assign || function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var i = arguments[e];\n\n      for (var o in i) Object.prototype.hasOwnProperty.call(i, o) && (n[o] = i[o]);\n    }\n\n    return n;\n  }, m.apply(this, arguments);\n}\n\nvar y = {\n  xDomain: [0, 1],\n  yDomain: [0, 1],\n  layers: [\"links\", \"cells\", \"points\", \"bounds\"],\n  enableLinks: !1,\n  linkLineWidth: 1,\n  linkLineColor: \"#bbbbbb\",\n  enableCells: !0,\n  cellLineWidth: 2,\n  cellLineColor: \"#000000\",\n  enablePoints: !0,\n  pointSize: 4,\n  pointColor: \"#666666\",\n  role: \"img\"\n},\n    g = function (n) {\n  return \"function\" == typeof n ? n : function (e) {\n    return e[n];\n  };\n},\n    b = function (n) {\n  var e = n.points,\n      i = n.x,\n      o = void 0 === i ? \"x\" : i,\n      t = n.y,\n      r = void 0 === t ? \"y\" : t,\n      l = g(o),\n      u = g(r);\n  return e.map(function (n) {\n    return [l(n), u(n)];\n  });\n},\n    k = function (n) {\n  var e = n.points,\n      i = n.width,\n      o = n.height,\n      t = n.debug,\n      r = h.from(e),\n      l = t ? r.voronoi([0, 0, i, o]) : void 0;\n  return {\n    delaunay: r,\n    voronoi: l\n  };\n},\n    x = function (e) {\n  var i = e.points,\n      o = e.x,\n      t = e.y,\n      r = e.width,\n      l = e.height,\n      u = e.debug,\n      a = n(function () {\n    return b({\n      points: i,\n      x: o,\n      y: t\n    });\n  }, [i, o, t]);\n  return n(function () {\n    return k({\n      points: a,\n      width: r,\n      height: l,\n      debug: u\n    });\n  }, [a, r, l, u]);\n},\n    C = function (e) {\n  var i = e.data,\n      o = e.width,\n      t = e.height,\n      r = e.xDomain,\n      l = e.yDomain,\n      u = n(function () {\n    return c().domain(r).range([0, o]);\n  }, [r, o]),\n      a = n(function () {\n    return c().domain(l).range([0, t]);\n  }, [l, t]),\n      d = n(function () {\n    return i.map(function (n) {\n      return {\n        x: u(n.x),\n        y: a(n.y),\n        data: n\n      };\n    });\n  }, [i, u, a]);\n  return n(function () {\n    var n = h.from(d.map(function (n) {\n      return [n.x, n.y];\n    })),\n        e = n.voronoi([0, 0, o, t]);\n    return {\n      points: d,\n      delaunay: n,\n      voronoi: e\n    };\n  }, [d, o, t]);\n},\n    L = function (e) {\n  var i = e.points,\n      o = e.delaunay,\n      t = e.voronoi;\n  return n(function () {\n    return {\n      points: i,\n      delaunay: o,\n      voronoi: t\n    };\n  }, [i, o, t]);\n},\n    w = [\"theme\"],\n    W = function (n) {\n  var o = n.data,\n      t = n.width,\n      r = n.height,\n      l = n.margin,\n      d = n.layers,\n      s = void 0 === d ? y.layers : d,\n      c = n.xDomain,\n      h = void 0 === c ? y.xDomain : c,\n      v = n.yDomain,\n      p = void 0 === v ? y.yDomain : v,\n      m = n.enableLinks,\n      g = void 0 === m ? y.enableLinks : m,\n      b = n.linkLineWidth,\n      k = void 0 === b ? y.linkLineWidth : b,\n      x = n.linkLineColor,\n      w = void 0 === x ? y.linkLineColor : x,\n      W = n.enableCells,\n      D = void 0 === W ? y.enableCells : W,\n      M = n.cellLineWidth,\n      P = void 0 === M ? y.cellLineWidth : M,\n      O = n.cellLineColor,\n      S = void 0 === O ? y.cellLineColor : O,\n      j = n.enablePoints,\n      z = void 0 === j ? y.enableCells : j,\n      A = n.pointSize,\n      E = void 0 === A ? y.pointSize : A,\n      H = n.pointColor,\n      B = void 0 === H ? y.pointColor : H,\n      F = n.role,\n      I = void 0 === F ? y.role : F,\n      q = u(t, r, l),\n      G = q.outerWidth,\n      J = q.outerHeight,\n      K = q.margin,\n      N = q.innerWidth,\n      Q = q.innerHeight,\n      R = C({\n    data: o,\n    width: N,\n    height: Q,\n    xDomain: h,\n    yDomain: p\n  }),\n      T = R.points,\n      U = R.delaunay,\n      V = R.voronoi,\n      X = {\n    links: null,\n    cells: null,\n    points: null,\n    bounds: null\n  };\n  g && s.includes(\"links\") && (X.links = f(\"path\", {\n    stroke: w,\n    strokeWidth: k,\n    fill: \"none\",\n    d: U.render()\n  }, \"links\")), D && s.includes(\"cells\") && (X.cells = f(\"path\", {\n    d: V.render(),\n    fill: \"none\",\n    stroke: S,\n    strokeWidth: P\n  }, \"cells\")), z && s.includes(\"points\") && (X.points = f(\"path\", {\n    stroke: \"none\",\n    fill: B,\n    d: U.renderPoints(void 0, E / 2)\n  }, \"points\")), s.includes(\"bounds\") && (X.bounds = f(\"path\", {\n    fill: \"none\",\n    stroke: S,\n    strokeWidth: P,\n    d: V.renderBounds()\n  }, \"bounds\"));\n  var Y = L({\n    points: T,\n    delaunay: U,\n    voronoi: V\n  });\n  return f(a, {\n    width: G,\n    height: J,\n    margin: K,\n    role: I,\n    children: s.map(function (n, o) {\n      return void 0 !== X[n] ? X[n] : \"function\" == typeof n ? f(e, {\n        children: i(n, Y)\n      }, o) : null;\n    })\n  });\n},\n    D = function (n) {\n  var e = n.theme,\n      i = function (n, e) {\n    if (null == n) return {};\n    var i,\n        o,\n        t = {},\n        r = Object.keys(n);\n\n    for (o = 0; o < r.length; o++) i = r[o], e.indexOf(i) >= 0 || (t[i] = n[i]);\n\n    return t;\n  }(n, w);\n\n  return f(l, {\n    isInteractive: !1,\n    animate: !1,\n    theme: e,\n    children: f(W, m({}, i))\n  });\n},\n    M = function (n) {\n  return f(d, {\n    children: function (e) {\n      var i = e.width,\n          o = e.height;\n      return f(D, m({\n        width: i,\n        height: o\n      }, n));\n    }\n  });\n},\n    P = function (e) {\n  var i = e.nodes,\n      l = e.width,\n      u = e.height,\n      a = e.x,\n      d = e.y,\n      c = e.onMouseEnter,\n      h = e.onMouseMove,\n      m = e.onMouseLeave,\n      y = e.onClick,\n      g = e.debug,\n      b = o(null),\n      k = t(null),\n      C = k[0],\n      L = k[1],\n      w = x({\n    points: i,\n    x: a,\n    y: d,\n    width: l,\n    height: u,\n    debug: g\n  }),\n      W = w.delaunay,\n      D = w.voronoi,\n      M = n(function () {\n    if (g && D) return D.render();\n  }, [g, D]),\n      P = r(function (n) {\n    if (!b.current) return [null, null];\n    var e = s(b.current, n),\n        o = e[0],\n        t = e[1],\n        r = W.find(o, t);\n    return [r, void 0 !== r ? i[r] : null];\n  }, [b, W]),\n      O = r(function (n) {\n    var e = P(n),\n        i = e[0],\n        o = e[1];\n    L(i), o && (null == c || c(o, n));\n  }, [P, L, c]),\n      S = r(function (n) {\n    var e = P(n),\n        i = e[0],\n        o = e[1];\n    L(i), o && (null == h || h(o, n));\n  }, [P, L, h]),\n      j = r(function (n) {\n    if (L(null), m) {\n      var e = void 0;\n      null !== C && (e = i[C]), e && m(e, n);\n    }\n  }, [L, C, m, i]),\n      z = r(function (n) {\n    var e = P(n),\n        i = e[0],\n        o = e[1];\n    L(i), o && (null == y || y(o, n));\n  }, [P, L, y]);\n  return v(\"g\", {\n    ref: b,\n    children: [g && D && v(p, {\n      children: [f(\"path\", {\n        d: M,\n        stroke: \"red\",\n        strokeWidth: 1,\n        opacity: .75\n      }), null !== C && f(\"path\", {\n        fill: \"pink\",\n        opacity: .35,\n        d: D.renderCell(C)\n      })]\n    }), f(\"rect\", {\n      width: l,\n      height: u,\n      fill: \"red\",\n      opacity: 0,\n      style: {\n        cursor: \"auto\"\n      },\n      onMouseEnter: O,\n      onMouseMove: S,\n      onMouseLeave: j,\n      onClick: z\n    })]\n  });\n},\n    O = function (n, e) {\n  n.save(), n.globalAlpha = .75, n.beginPath(), e.render(n), n.strokeStyle = \"red\", n.lineWidth = 1, n.stroke(), n.restore();\n},\n    S = function (n, e, i) {\n  n.save(), n.globalAlpha = .35, n.beginPath(), e.renderCell(i, n), n.fillStyle = \"red\", n.fill(), n.restore();\n};\n\nexport { P as Mesh, M as ResponsiveVoronoi, D as Voronoi, k as computeMesh, b as computeMeshPoints, y as defaultVoronoiProps, S as renderVoronoiCellToCanvas, O as renderVoronoiToCanvas, C as useVoronoi, L as useVoronoiLayerContext, x as useVoronoiMesh };","map":{"version":3,"mappings":"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","names":["defaultVoronoiProps","xDomain","yDomain","layers","enableLinks","linkLineWidth","linkLineColor","enableCells","cellLineWidth","cellLineColor","enablePoints","pointSize","pointColor","role","getAccessor","directive","datum","computeMeshPoints","points","x","i","t","y","getX","getY","map","point","computeMesh","width","height","debug","delaunay","Delaunay","from","voronoi","undefined","useVoronoiMesh","points2d","useMemo","useVoronoi","data","xScale","scaleLinear","domain","range","yScale","d","p","useVoronoiLayerContext","InnerVoronoi","partialMargin","margin","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","links","cells","bounds","includes","_jsx","stroke","strokeWidth","fill","render","renderPoints","renderBounds","layerContext","SvgWrapper","layer","Fragment","createElement","Voronoi","theme","otherProps","Container","isInteractive","animate","ResponsiveVoronoi","props","ResponsiveWrapper","Mesh","nodes","onMouseEnter","onMouseMove","onMouseLeave","onClick","elementRef","useRef","k","useState","currentIndex","setCurrentIndex","voronoiPath","getIndexAndNodeFromEvent","useCallback","event","current","getRelativeCursor","index","find","handleMouseEnter","node","handleMouseMove","handleMouseLeave","previousNode","handleClick","_jsxs","ref","opacity","renderCell","style","cursor","renderVoronoiToCanvas","ctx","save","globalAlpha","beginPath","strokeStyle","lineWidth","restore","renderVoronoiCellToCanvas","fillStyle"],"sources":["/Users/jstanton/Desktop/react-admin-dashboard/node_modules/@nivo/voronoi/src/props.ts","/Users/jstanton/Desktop/react-admin-dashboard/node_modules/@nivo/voronoi/src/computeMesh.ts","/Users/jstanton/Desktop/react-admin-dashboard/node_modules/@nivo/voronoi/src/hooks.ts","/Users/jstanton/Desktop/react-admin-dashboard/node_modules/@nivo/voronoi/src/Voronoi.tsx","/Users/jstanton/Desktop/react-admin-dashboard/node_modules/@nivo/voronoi/src/ResponsiveVoronoi.tsx","/Users/jstanton/Desktop/react-admin-dashboard/node_modules/@nivo/voronoi/src/Mesh.tsx","/Users/jstanton/Desktop/react-admin-dashboard/node_modules/@nivo/voronoi/src/meshCanvas.ts"],"sourcesContent":["import { VoronoiDomain, VoronoiLayer } from './types'\n\nexport const defaultVoronoiProps = {\n    xDomain: [0, 1] as VoronoiDomain,\n    yDomain: [0, 1] as VoronoiDomain,\n    layers: ['links', 'cells', 'points', 'bounds'] as VoronoiLayer[],\n    enableLinks: false,\n    linkLineWidth: 1,\n    linkLineColor: '#bbbbbb',\n    enableCells: true,\n    cellLineWidth: 2,\n    cellLineColor: '#000000',\n    enablePoints: true,\n    pointSize: 4,\n    pointColor: '#666666',\n    role: 'img',\n}\n","import { Delaunay } from 'd3-delaunay'\n\ntype NumberPropertyNames<T> = {\n    [K in keyof T]: T[K] extends number ? K : never\n}[keyof T]\n\nexport type XYAccessor<Datum> = NumberPropertyNames<Datum> | ((datum: Datum) => number)\n\nconst getAccessor = <Datum>(directive: XYAccessor<Datum>) =>\n    typeof directive === 'function' ? directive : (datum: Datum) => datum[directive]\n\n/**\n * The delaunay generator requires an array\n * where each point is defined as an array\n * of 2 elements: [x: number, y: number].\n *\n * Points represent the raw input data\n * and x/y represent accessors to x & y.\n */\nexport const computeMeshPoints = <Datum>({\n    points,\n    x = 'x' as NumberPropertyNames<Datum>,\n    y = 'y' as NumberPropertyNames<Datum>,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n}): [number, number][] => {\n    const getX = getAccessor<Datum>(x)\n    const getY = getAccessor<Datum>(y)\n\n    return points.map(point => [getX(point) as number, getY(point) as number])\n}\n\nexport const computeMesh = ({\n    points,\n    width,\n    height,\n    debug,\n}: {\n    points: [number, number][]\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const delaunay = Delaunay.from(points)\n    const voronoi = debug ? delaunay.voronoi([0, 0, width, height]) : undefined\n\n    return { delaunay, voronoi }\n}\n","import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport { Delaunay } from 'd3-delaunay'\nimport { computeMeshPoints, computeMesh, XYAccessor } from './computeMesh'\nimport { VoronoiCommonProps, VoronoiDatum, VoronoiCustomLayerProps } from './types'\n\nexport const useVoronoiMesh = <Datum>({\n    points,\n    x,\n    y,\n    width,\n    height,\n    debug,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const points2d = useMemo(() => computeMeshPoints<Datum>({ points, x, y }), [points, x, y])\n\n    return useMemo(\n        () => computeMesh({ points: points2d, width, height, debug }),\n        [points2d, width, height, debug]\n    )\n}\n\nexport const useVoronoi = ({\n    data,\n    width,\n    height,\n    xDomain,\n    yDomain,\n}: {\n    data: VoronoiDatum[]\n    width: number\n    height: number\n    xDomain: VoronoiCommonProps['xDomain']\n    yDomain: VoronoiCommonProps['yDomain']\n}) => {\n    const xScale = useMemo(() => scaleLinear().domain(xDomain).range([0, width]), [xDomain, width])\n    const yScale = useMemo(\n        () => scaleLinear().domain(yDomain).range([0, height]),\n        [yDomain, height]\n    )\n\n    const points = useMemo(\n        () =>\n            data.map(d => ({\n                x: xScale(d.x),\n                y: yScale(d.y),\n                data: d,\n            })),\n        [data, xScale, yScale]\n    )\n\n    return useMemo(() => {\n        const delaunay = Delaunay.from(points.map(p => [p.x, p.y]))\n        const voronoi = delaunay.voronoi([0, 0, width, height])\n\n        return {\n            points,\n            delaunay,\n            voronoi,\n        }\n    }, [points, width, height])\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useVoronoiLayerContext = ({\n    points,\n    delaunay,\n    voronoi,\n}: VoronoiCustomLayerProps): VoronoiCustomLayerProps =>\n    useMemo(\n        () => ({\n            points,\n            delaunay,\n            voronoi,\n        }),\n        [points, delaunay, voronoi]\n    )\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { VoronoiSvgProps, VoronoiLayerId } from './types'\nimport { defaultVoronoiProps } from './props'\nimport { useVoronoi, useVoronoiLayerContext } from './hooks'\n\ntype InnerVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>\n\nconst InnerVoronoi = ({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    layers = defaultVoronoiProps.layers,\n    xDomain = defaultVoronoiProps.xDomain,\n    yDomain = defaultVoronoiProps.yDomain,\n    enableLinks = defaultVoronoiProps.enableLinks,\n    linkLineWidth = defaultVoronoiProps.linkLineWidth,\n    linkLineColor = defaultVoronoiProps.linkLineColor,\n    enableCells = defaultVoronoiProps.enableCells,\n    cellLineWidth = defaultVoronoiProps.cellLineWidth,\n    cellLineColor = defaultVoronoiProps.cellLineColor,\n    enablePoints = defaultVoronoiProps.enableCells,\n    pointSize = defaultVoronoiProps.pointSize,\n    pointColor = defaultVoronoiProps.pointColor,\n    role = defaultVoronoiProps.role,\n}: InnerVoronoiProps) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { points, delaunay, voronoi } = useVoronoi({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        xDomain,\n        yDomain,\n    })\n\n    const layerById: Record<VoronoiLayerId, ReactNode> = {\n        links: null,\n        cells: null,\n        points: null,\n        bounds: null,\n    }\n\n    if (enableLinks && layers.includes('links')) {\n        layerById.links = (\n            <path\n                key=\"links\"\n                stroke={linkLineColor}\n                strokeWidth={linkLineWidth}\n                fill=\"none\"\n                d={delaunay.render()}\n            />\n        )\n    }\n\n    if (enableCells && layers.includes('cells')) {\n        layerById.cells = (\n            <path\n                key=\"cells\"\n                d={voronoi.render()}\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n            />\n        )\n    }\n\n    if (enablePoints && layers.includes('points')) {\n        layerById.points = (\n            <path\n                key=\"points\"\n                stroke=\"none\"\n                fill={pointColor}\n                d={delaunay.renderPoints(undefined, pointSize / 2)}\n            />\n        )\n    }\n\n    if (layers.includes('bounds')) {\n        layerById.bounds = (\n            <path\n                key=\"bounds\"\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n                d={voronoi.renderBounds()}\n            />\n        )\n    }\n\n    const layerContext = useVoronoiLayerContext({\n        points,\n        delaunay,\n        voronoi,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as VoronoiLayerId] !== undefined) {\n                    return layerById[layer as VoronoiLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Voronoi = ({\n    theme,\n    ...otherProps\n}: Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={false} animate={false} theme={theme}>\n        <InnerVoronoi {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { VoronoiSvgProps } from './types'\nimport { Voronoi } from './Voronoi'\n\ntype ResponsiveVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data'>\n\nexport const ResponsiveVoronoi = (props: ResponsiveVoronoiProps) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Voronoi width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { useRef, useState, useCallback, useMemo } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor } from '@nivo/core'\nimport { useVoronoiMesh } from './hooks'\nimport { XYAccessor } from './computeMesh'\n\ntype MouseHandler<Datum> = (datum: Datum, event: React.MouseEvent) => void\n\ninterface MeshProps<Datum> {\n    nodes: Datum[]\n    width: number\n    height: number\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    onMouseEnter?: MouseHandler<Datum>\n    onMouseMove?: MouseHandler<Datum>\n    onMouseLeave?: MouseHandler<Datum>\n    onClick?: MouseHandler<Datum>\n    debug?: boolean\n}\n\nexport const Mesh = <Datum,>({\n    nodes,\n    width,\n    height,\n    x,\n    y,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    debug,\n}: MeshProps<Datum>) => {\n    const elementRef = useRef<SVGGElement>(null)\n    const [currentIndex, setCurrentIndex] = useState<number | null>(null)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        x,\n        y,\n        width,\n        height,\n        debug,\n    })\n\n    const voronoiPath = useMemo(() => {\n        if (debug && voronoi) {\n            return voronoi.render()\n        }\n\n        return undefined\n    }, [debug, voronoi])\n\n    const getIndexAndNodeFromEvent = useCallback(\n        event => {\n            if (!elementRef.current) {\n                return [null, null]\n            }\n\n            const [x, y] = getRelativeCursor(elementRef.current, event)\n            const index = delaunay.find(x, y)\n\n            return [index, index !== undefined ? nodes[index] : null] as [number, Datum | null]\n        },\n        [elementRef, delaunay]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseEnter?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseMove?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent) => {\n            setCurrentIndex(null)\n            if (onMouseLeave) {\n                let previousNode: Datum | undefined = undefined\n                if (currentIndex !== null) {\n                    previousNode = nodes[currentIndex]\n                }\n                previousNode && onMouseLeave(previousNode, event)\n            }\n        },\n        [setCurrentIndex, currentIndex, onMouseLeave, nodes]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onClick]\n    )\n\n    return (\n        <g ref={elementRef}>\n            {debug && voronoi && (\n                <>\n                    <path d={voronoiPath} stroke=\"red\" strokeWidth={1} opacity={0.75} />\n                    {/* highlight current cell */}\n                    {currentIndex !== null && (\n                        <path fill=\"pink\" opacity={0.35} d={voronoi.renderCell(currentIndex)} />\n                    )}\n                </>\n            )}\n            {/* transparent rect to intercept mouse events */}\n            <rect\n                width={width}\n                height={height}\n                fill=\"red\"\n                opacity={0}\n                style={{ cursor: 'auto' }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        </g>\n    )\n}\n","import { Delaunay, Voronoi } from 'd3-delaunay'\n\nexport const renderVoronoiToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.75\n    ctx.beginPath()\n    voronoi.render(ctx)\n    ctx.strokeStyle = 'red'\n    ctx.lineWidth = 1\n    ctx.stroke()\n\n    ctx.restore()\n}\n\nexport const renderVoronoiCellToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>,\n    index: number\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.35\n    ctx.beginPath()\n    voronoi.renderCell(index, ctx)\n    ctx.fillStyle = 'red'\n    ctx.fill()\n\n    ctx.restore()\n}\n"]},"metadata":{},"sourceType":"module"}