{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { debounce, capitalize } from '@mui/material/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef({}); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const rowHeightFromDensity = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const hydrateRowsMeta = React.useCallback(() => {\n    var _pinnedRows$top, _pinnedRows$bottom;\n\n    hasRowWithAutoHeight.current = false;\n    const densityFactor = gridDensityFactorSelector(apiRef.current.state, apiRef.current.instanceId);\n\n    const calculateRowProcessedSizes = row => {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeightFromDensity\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = rowHeightFromDensity;\n      const existingBaseRowHeight = sizes.baseCenter;\n\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeightFromDensity; // If the row was not measured yet use the estimated row height\n\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeightFromDensity;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns null or undefined.\n          baseRowHeight = rowHeightFromUser != null ? rowHeightFromUser : rowHeightFromDensity;\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n\n      const existingBaseSizes = Object.entries(sizes).reduce((acc, _ref) => {\n        let [key, size] = _ref;\n\n        if (/^base[A-Z]/.test(key)) {\n          acc[key] = size;\n        }\n\n        return acc;\n      }, {}); // We use an object to make simple to check if a height is already added or not\n\n      const initialHeights = _extends({}, existingBaseSizes, {\n        baseCenter: baseRowHeight\n      });\n\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      let maximumBaseSize = 0;\n      let otherSizes = 0;\n      const processedSizes = calculateRowProcessedSizes(row);\n      Object.entries(processedSizes).forEach(_ref2 => {\n        let [size, value] = _ref2;\n\n        if (/^base[A-Z]/.test(size)) {\n          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;\n        } else {\n          otherSizes += value;\n        }\n      });\n      return acc + maximumBaseSize + otherSizes;\n    }, 0);\n    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeightFromDensity, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeightFromDensity;\n  }, [rowHeightFromDensity]);\n\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height, position) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    } // Only trigger hydration if the value is different, otherwise we trigger a loop\n\n\n    const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] = height;\n\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  const resetRowHeights = React.useCallback(() => {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeightFromDensity, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_getLastMeasuredRowIndex: getLastMeasuredRowIndex,\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_rowHasAutoHeight: rowHasAutoHeight,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};","map":{"version":3,"names":["_extends","React","debounce","capitalize","useGridVisibleRows","useGridApiMethod","useGridSelector","gridDensityRowHeightSelector","gridDensityFactorSelector","gridFilterStateSelector","gridPaginationSelector","gridSortingStateSelector","useGridRegisterPipeApplier","gridPinnedRowsSelector","rowsMetaStateInitializer","state","rowsMeta","currentPageTotalHeight","positions","useGridRowsMeta","apiRef","props","getRowHeight","getRowHeightProp","getRowSpacing","getEstimatedRowHeight","rowsHeightLookup","useRef","lastMeasuredRowIndex","hasRowWithAutoHeight","rowHeightFromDensity","filterState","paginationState","sortingState","currentPage","pinnedRows","hydrateRowsMeta","useCallback","_pinnedRows$top","_pinnedRows$bottom","current","densityFactor","instanceId","calculateRowProcessedSizes","row","id","sizes","baseCenter","isResized","autoHeight","needsFirstMeasurement","baseRowHeight","existingBaseRowHeight","rowHeightFromUser","estimatedRowHeight","existingBaseSizes","Object","entries","reduce","acc","key","size","test","initialHeights","_spacing$top","_spacing$bottom","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","rows","length","spacingTop","top","spacingBottom","bottom","processedSizes","unstable_applyPipeProcessors","push","maximumBaseSize","otherSizes","forEach","value","setState","Infinity","forceUpdate","rowId","height","getRowInternalSizes","_rowsHeightLookup$cur","setRowHeight","debouncedHydrateRowsMeta","useMemo","storeMeasuredRowHeight","position","needsHydration","rowHasAutoHeight","_rowsHeightLookup$cur2","getLastMeasuredRowIndex","setLastMeasuredRowIndex","index","resetRowHeights","useEffect","rowsMetaApi","unstable_getLastMeasuredRowIndex","unstable_setLastMeasuredRowIndex","unstable_rowHasAutoHeight","unstable_getRowHeight","unstable_getRowInternalSizes","unstable_setRowHeight","unstable_storeRowHeightMeasurement"],"sources":["/Users/jstanton/Desktop/react-admin-dashboard/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { debounce, capitalize } from '@mui/material/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef({}); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const rowHeightFromDensity = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const hydrateRowsMeta = React.useCallback(() => {\n    var _pinnedRows$top, _pinnedRows$bottom;\n\n    hasRowWithAutoHeight.current = false;\n    const densityFactor = gridDensityFactorSelector(apiRef.current.state, apiRef.current.instanceId);\n\n    const calculateRowProcessedSizes = row => {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeightFromDensity\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = rowHeightFromDensity;\n      const existingBaseRowHeight = sizes.baseCenter;\n\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeightFromDensity; // If the row was not measured yet use the estimated row height\n\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeightFromDensity;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns null or undefined.\n          baseRowHeight = rowHeightFromUser != null ? rowHeightFromUser : rowHeightFromDensity;\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n\n      const existingBaseSizes = Object.entries(sizes).reduce((acc, [key, size]) => {\n        if (/^base[A-Z]/.test(key)) {\n          acc[key] = size;\n        }\n\n        return acc;\n      }, {}); // We use an object to make simple to check if a height is already added or not\n\n      const initialHeights = _extends({}, existingBaseSizes, {\n        baseCenter: baseRowHeight\n      });\n\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      let maximumBaseSize = 0;\n      let otherSizes = 0;\n      const processedSizes = calculateRowProcessedSizes(row);\n      Object.entries(processedSizes).forEach(([size, value]) => {\n        if (/^base[A-Z]/.test(size)) {\n          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;\n        } else {\n          otherSizes += value;\n        }\n      });\n      return acc + maximumBaseSize + otherSizes;\n    }, 0);\n    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeightFromDensity, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeightFromDensity;\n  }, [rowHeightFromDensity]);\n\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height, position) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    } // Only trigger hydration if the value is different, otherwise we trigger a loop\n\n\n    const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] = height;\n\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  const resetRowHeights = React.useCallback(() => {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeightFromDensity, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_getLastMeasuredRowIndex: getLastMeasuredRowIndex,\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_rowHasAutoHeight: rowHasAutoHeight,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}