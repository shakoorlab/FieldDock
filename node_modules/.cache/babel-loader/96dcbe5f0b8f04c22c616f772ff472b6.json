{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GridLinkOperator } from '../../../models';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridColumnFieldsSelector, gridColumnLookupSelector } from '../columns';\n/**\n * Adds default values to the optional fields of a filter items.\n * @param {GridFilterItem} item The raw filter item.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @return {GridFilterItem} The clean filter item with an uniq ID and an always-defined operatorValue.\n * TODO: Make the typing reflect the different between GridFilterInputItem and GridFilterItem.\n */\n\nexport const cleanFilterItem = (item, apiRef) => {\n  const cleanItem = _extends({}, item);\n\n  if (cleanItem.id == null) {\n    cleanItem.id = Math.round(Math.random() * 1e5);\n  }\n\n  if (cleanItem.operatorValue == null) {\n    // Selects a default operator\n    // We don't use `apiRef.current.getColumn` because it is not ready during state initialization\n    const column = gridColumnLookupSelector(apiRef)[cleanItem.columnField];\n    cleanItem.operatorValue = column && column.filterOperators[0].value;\n  }\n\n  return cleanItem;\n};\nconst filterModelDisableMultiColumnsFilteringWarning = buildWarning(['MUI: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');\nconst filterModelMissingItemIdWarning = buildWarning(\"MUI: The 'id' field is required on `filterModel.items` when you use multiple filters.\", 'error');\nconst filterModelMissingItemOperatorWarning = buildWarning(['MUI: One of your filtering item have no `operatorValue` provided.', 'This property will become required on `@mui/x-data-grid@6.X`.']);\nexport const sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {\n  const hasSeveralItems = model.items.length > 1;\n  let items;\n\n  if (hasSeveralItems && disableMultipleColumnsFiltering) {\n    filterModelDisableMultiColumnsFilteringWarning();\n    items = [model.items[0]];\n  } else {\n    items = model.items;\n  }\n\n  const hasItemsWithoutIds = hasSeveralItems && items.some(item => item.id == null);\n  const hasItemWithoutOperator = items.some(item => item.operatorValue == null);\n\n  if (hasItemsWithoutIds) {\n    filterModelMissingItemIdWarning();\n  }\n\n  if (hasItemWithoutOperator) {\n    filterModelMissingItemOperatorWarning();\n  }\n\n  if (hasItemWithoutOperator || hasItemsWithoutIds) {\n    return _extends({}, model, {\n      items: items.map(item => cleanFilterItem(item, apiRef))\n    });\n  }\n\n  if (model.items !== items) {\n    return _extends({}, model, {\n      items\n    });\n  }\n\n  return model;\n};\nexport const mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => filteringState => _extends({}, filteringState, {\n  filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)\n});\n\nconst getFilterCallbackFromItem = (filterItem, apiRef) => {\n  if (!filterItem.columnField || !filterItem.operatorValue) {\n    return null;\n  }\n\n  const column = apiRef.current.getColumn(filterItem.columnField);\n\n  if (!column) {\n    return null;\n  }\n\n  let parsedValue;\n\n  if (column.valueParser) {\n    var _filterItem$value;\n\n    const parser = column.valueParser;\n    parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map(x => parser(x)) : parser(filterItem.value);\n  } else {\n    parsedValue = filterItem.value;\n  }\n\n  const newFilterItem = _extends({}, filterItem, {\n    value: parsedValue\n  });\n\n  const filterOperators = column.filterOperators;\n\n  if (!(filterOperators != null && filterOperators.length)) {\n    throw new Error(`MUI: No filter operators found for column '${column.field}'.`);\n  }\n\n  const filterOperator = filterOperators.find(operator => operator.value === newFilterItem.operatorValue);\n\n  if (!filterOperator) {\n    throw new Error(`MUI: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operatorValue}'.`);\n  }\n\n  const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);\n\n  if (typeof applyFilterOnRow !== 'function') {\n    return null;\n  }\n\n  const fn = rowId => {\n    const cellParams = apiRef.current.getCellParams(rowId, newFilterItem.columnField);\n    return applyFilterOnRow(cellParams);\n  };\n\n  return {\n    fn,\n    item: newFilterItem\n  };\n};\n/**\n * Generates a method to easily check if a row is matching the current filter model.\n * @param {GridFilterModel} filterModel The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\n\n\nexport const buildAggregatedFilterItemsApplier = (filterModel, apiRef) => {\n  const {\n    items\n  } = filterModel;\n  const appliers = items.map(item => getFilterCallbackFromItem(item, apiRef)).filter(callback => !!callback);\n\n  if (appliers.length === 0) {\n    return null;\n  }\n\n  return (rowId, shouldApplyFilter) => {\n    const resultPerItemId = {};\n    const filteredAppliers = shouldApplyFilter ? appliers.filter(applier => shouldApplyFilter(applier.item.columnField)) : appliers;\n    filteredAppliers.forEach(applier => {\n      resultPerItemId[applier.item.id] = applier.fn(rowId);\n    });\n    return resultPerItemId;\n  };\n};\n/**\n * Generates a method to easily check if a row is matching the current quick filter.\n * @param {any[]} values The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\n\nexport const buildAggregatedQuickFilterApplier = (filterModel, apiRef) => {\n  const {\n    quickFilterValues = []\n  } = filterModel;\n\n  if (quickFilterValues.length === 0) {\n    return null;\n  }\n\n  const columnsFields = gridColumnFieldsSelector(apiRef);\n  const appliersPerColumnField = {};\n  columnsFields.forEach(field => {\n    const column = apiRef.current.getColumn(field);\n    const getApplyQuickFilterFn = column == null ? void 0 : column.getApplyQuickFilterFn;\n\n    if (!getApplyQuickFilterFn) {\n      return;\n    }\n\n    appliersPerColumnField[field] = quickFilterValues.map(value => getApplyQuickFilterFn(value, column, apiRef));\n  }); // If some value does not have an applier we ignore them\n\n  const sanitizedQuickFilterValues = quickFilterValues.filter((value, index) => Object.keys(appliersPerColumnField).some(field => appliersPerColumnField[field][index] != null));\n\n  if (sanitizedQuickFilterValues.length === 0) {\n    return null;\n  }\n\n  return (rowId, shouldApplyFilter) => {\n    const usedCellParams = {};\n    const columnsFieldsToFilter = [];\n    Object.keys(appliersPerColumnField).forEach(columnField => {\n      if (!shouldApplyFilter || shouldApplyFilter(columnField)) {\n        usedCellParams[columnField] = apiRef.current.getCellParams(rowId, columnField);\n        columnsFieldsToFilter.push(columnField);\n      }\n    });\n    const quickFilterValueResult = {};\n    sanitizedQuickFilterValues.forEach((value, index) => {\n      const isPassing = columnsFieldsToFilter.some(field => {\n        var _appliersPerColumnFie, _appliersPerColumnFie2;\n\n        if (appliersPerColumnField[field][index] == null) {\n          return false;\n        }\n\n        return (_appliersPerColumnFie = (_appliersPerColumnFie2 = appliersPerColumnField[field])[index]) == null ? void 0 : _appliersPerColumnFie.call(_appliersPerColumnFie2, usedCellParams[field]);\n      });\n      quickFilterValueResult[value] = isPassing;\n    });\n    return quickFilterValueResult;\n  };\n};\nexport const buildAggregatedFilterApplier = (filterModel, apiRef) => {\n  const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef);\n  const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef);\n  return (rowId, shouldApplyFilter) => ({\n    passingFilterItems: isRowMatchingFilterItems && isRowMatchingFilterItems(rowId, shouldApplyFilter),\n    passingQuickFilterValues: isRowMatchingQuickFilter && isRowMatchingQuickFilter(rowId, shouldApplyFilter)\n  });\n};\nexport const passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef) => {\n  var _filterModel$quickFil, _filterModel$linkOper;\n\n  const cleanedFilterItems = filterModel.items.filter(item => getFilterCallbackFromItem(item, apiRef) !== null);\n  const cleanedAllFilterItemResults = allFilterItemResults.filter(result => result != null);\n  const cleanedAllQuickFilterResults = allQuickFilterResults.filter(result => result != null); // Defaultize operators\n\n  const quickFilterLogicOperator = (_filterModel$quickFil = filterModel.quickFilterLogicOperator) != null ? _filterModel$quickFil : getDefaultGridFilterModel().quickFilterLogicOperator;\n  const linkOperator = (_filterModel$linkOper = filterModel.linkOperator) != null ? _filterModel$linkOper : getDefaultGridFilterModel().linkOperator; // get result for filter items model\n\n  if (cleanedAllFilterItemResults.length > 0) {\n    // Return true if the item pass with one of the rows\n    const filterItemPredicate = item => {\n      return cleanedAllFilterItemResults.some(filterItemResult => filterItemResult[item.id]);\n    };\n\n    if (linkOperator === GridLinkOperator.And) {\n      const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);\n\n      if (!passesAllFilters) {\n        return false;\n      }\n    } else {\n      const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);\n\n      if (!passesSomeFilters) {\n        return false;\n      }\n    }\n  } // get result for quick filter model\n\n\n  if (cleanedAllQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {\n    // Return true if the item pass with one of the rows\n    const quickFilterValuePredicate = value => {\n      return cleanedAllQuickFilterResults.some(quickFilterValueResult => quickFilterValueResult[value]);\n    };\n\n    if (quickFilterLogicOperator === GridLinkOperator.And) {\n      const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);\n\n      if (!passesAllQuickFilterValues) {\n        return false;\n      }\n    } else {\n      const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);\n\n      if (!passesSomeQuickFilterValues) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};","map":{"version":3,"names":["_extends","GridLinkOperator","getDefaultGridFilterModel","buildWarning","gridColumnFieldsSelector","gridColumnLookupSelector","cleanFilterItem","item","apiRef","cleanItem","id","Math","round","random","operatorValue","column","columnField","filterOperators","value","filterModelDisableMultiColumnsFilteringWarning","filterModelMissingItemIdWarning","filterModelMissingItemOperatorWarning","sanitizeFilterModel","model","disableMultipleColumnsFiltering","hasSeveralItems","items","length","hasItemsWithoutIds","some","hasItemWithoutOperator","map","mergeStateWithFilterModel","filterModel","filteringState","getFilterCallbackFromItem","filterItem","current","getColumn","parsedValue","valueParser","_filterItem$value","parser","Array","isArray","x","newFilterItem","Error","field","filterOperator","find","operator","applyFilterOnRow","getApplyFilterFn","fn","rowId","cellParams","getCellParams","buildAggregatedFilterItemsApplier","appliers","filter","callback","shouldApplyFilter","resultPerItemId","filteredAppliers","applier","forEach","buildAggregatedQuickFilterApplier","quickFilterValues","columnsFields","appliersPerColumnField","getApplyQuickFilterFn","sanitizedQuickFilterValues","index","Object","keys","usedCellParams","columnsFieldsToFilter","push","quickFilterValueResult","isPassing","_appliersPerColumnFie","_appliersPerColumnFie2","call","buildAggregatedFilterApplier","isRowMatchingFilterItems","isRowMatchingQuickFilter","passingFilterItems","passingQuickFilterValues","passFilterLogic","allFilterItemResults","allQuickFilterResults","_filterModel$quickFil","_filterModel$linkOper","cleanedFilterItems","cleanedAllFilterItemResults","result","cleanedAllQuickFilterResults","quickFilterLogicOperator","linkOperator","filterItemPredicate","filterItemResult","And","passesAllFilters","every","passesSomeFilters","quickFilterValuePredicate","passesAllQuickFilterValues","passesSomeQuickFilterValues"],"sources":["/Users/jstanton/Desktop/Coding/FieldDockMain/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GridLinkOperator } from '../../../models';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridColumnFieldsSelector, gridColumnLookupSelector } from '../columns';\n\n/**\n * Adds default values to the optional fields of a filter items.\n * @param {GridFilterItem} item The raw filter item.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @return {GridFilterItem} The clean filter item with an uniq ID and an always-defined operatorValue.\n * TODO: Make the typing reflect the different between GridFilterInputItem and GridFilterItem.\n */\nexport const cleanFilterItem = (item, apiRef) => {\n  const cleanItem = _extends({}, item);\n\n  if (cleanItem.id == null) {\n    cleanItem.id = Math.round(Math.random() * 1e5);\n  }\n\n  if (cleanItem.operatorValue == null) {\n    // Selects a default operator\n    // We don't use `apiRef.current.getColumn` because it is not ready during state initialization\n    const column = gridColumnLookupSelector(apiRef)[cleanItem.columnField];\n    cleanItem.operatorValue = column && column.filterOperators[0].value;\n  }\n\n  return cleanItem;\n};\nconst filterModelDisableMultiColumnsFilteringWarning = buildWarning(['MUI: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');\nconst filterModelMissingItemIdWarning = buildWarning(\"MUI: The 'id' field is required on `filterModel.items` when you use multiple filters.\", 'error');\nconst filterModelMissingItemOperatorWarning = buildWarning(['MUI: One of your filtering item have no `operatorValue` provided.', 'This property will become required on `@mui/x-data-grid@6.X`.']);\nexport const sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {\n  const hasSeveralItems = model.items.length > 1;\n  let items;\n\n  if (hasSeveralItems && disableMultipleColumnsFiltering) {\n    filterModelDisableMultiColumnsFilteringWarning();\n    items = [model.items[0]];\n  } else {\n    items = model.items;\n  }\n\n  const hasItemsWithoutIds = hasSeveralItems && items.some(item => item.id == null);\n  const hasItemWithoutOperator = items.some(item => item.operatorValue == null);\n\n  if (hasItemsWithoutIds) {\n    filterModelMissingItemIdWarning();\n  }\n\n  if (hasItemWithoutOperator) {\n    filterModelMissingItemOperatorWarning();\n  }\n\n  if (hasItemWithoutOperator || hasItemsWithoutIds) {\n    return _extends({}, model, {\n      items: items.map(item => cleanFilterItem(item, apiRef))\n    });\n  }\n\n  if (model.items !== items) {\n    return _extends({}, model, {\n      items\n    });\n  }\n\n  return model;\n};\nexport const mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => filteringState => _extends({}, filteringState, {\n  filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)\n});\n\nconst getFilterCallbackFromItem = (filterItem, apiRef) => {\n  if (!filterItem.columnField || !filterItem.operatorValue) {\n    return null;\n  }\n\n  const column = apiRef.current.getColumn(filterItem.columnField);\n\n  if (!column) {\n    return null;\n  }\n\n  let parsedValue;\n\n  if (column.valueParser) {\n    var _filterItem$value;\n\n    const parser = column.valueParser;\n    parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map(x => parser(x)) : parser(filterItem.value);\n  } else {\n    parsedValue = filterItem.value;\n  }\n\n  const newFilterItem = _extends({}, filterItem, {\n    value: parsedValue\n  });\n\n  const filterOperators = column.filterOperators;\n\n  if (!(filterOperators != null && filterOperators.length)) {\n    throw new Error(`MUI: No filter operators found for column '${column.field}'.`);\n  }\n\n  const filterOperator = filterOperators.find(operator => operator.value === newFilterItem.operatorValue);\n\n  if (!filterOperator) {\n    throw new Error(`MUI: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operatorValue}'.`);\n  }\n\n  const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);\n\n  if (typeof applyFilterOnRow !== 'function') {\n    return null;\n  }\n\n  const fn = rowId => {\n    const cellParams = apiRef.current.getCellParams(rowId, newFilterItem.columnField);\n    return applyFilterOnRow(cellParams);\n  };\n\n  return {\n    fn,\n    item: newFilterItem\n  };\n};\n/**\n * Generates a method to easily check if a row is matching the current filter model.\n * @param {GridFilterModel} filterModel The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\n\n\nexport const buildAggregatedFilterItemsApplier = (filterModel, apiRef) => {\n  const {\n    items\n  } = filterModel;\n  const appliers = items.map(item => getFilterCallbackFromItem(item, apiRef)).filter(callback => !!callback);\n\n  if (appliers.length === 0) {\n    return null;\n  }\n\n  return (rowId, shouldApplyFilter) => {\n    const resultPerItemId = {};\n    const filteredAppliers = shouldApplyFilter ? appliers.filter(applier => shouldApplyFilter(applier.item.columnField)) : appliers;\n    filteredAppliers.forEach(applier => {\n      resultPerItemId[applier.item.id] = applier.fn(rowId);\n    });\n    return resultPerItemId;\n  };\n};\n/**\n * Generates a method to easily check if a row is matching the current quick filter.\n * @param {any[]} values The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\n\nexport const buildAggregatedQuickFilterApplier = (filterModel, apiRef) => {\n  const {\n    quickFilterValues = []\n  } = filterModel;\n\n  if (quickFilterValues.length === 0) {\n    return null;\n  }\n\n  const columnsFields = gridColumnFieldsSelector(apiRef);\n  const appliersPerColumnField = {};\n  columnsFields.forEach(field => {\n    const column = apiRef.current.getColumn(field);\n    const getApplyQuickFilterFn = column == null ? void 0 : column.getApplyQuickFilterFn;\n\n    if (!getApplyQuickFilterFn) {\n      return;\n    }\n\n    appliersPerColumnField[field] = quickFilterValues.map(value => getApplyQuickFilterFn(value, column, apiRef));\n  }); // If some value does not have an applier we ignore them\n\n  const sanitizedQuickFilterValues = quickFilterValues.filter((value, index) => Object.keys(appliersPerColumnField).some(field => appliersPerColumnField[field][index] != null));\n\n  if (sanitizedQuickFilterValues.length === 0) {\n    return null;\n  }\n\n  return (rowId, shouldApplyFilter) => {\n    const usedCellParams = {};\n    const columnsFieldsToFilter = [];\n    Object.keys(appliersPerColumnField).forEach(columnField => {\n      if (!shouldApplyFilter || shouldApplyFilter(columnField)) {\n        usedCellParams[columnField] = apiRef.current.getCellParams(rowId, columnField);\n        columnsFieldsToFilter.push(columnField);\n      }\n    });\n    const quickFilterValueResult = {};\n    sanitizedQuickFilterValues.forEach((value, index) => {\n      const isPassing = columnsFieldsToFilter.some(field => {\n        var _appliersPerColumnFie, _appliersPerColumnFie2;\n\n        if (appliersPerColumnField[field][index] == null) {\n          return false;\n        }\n\n        return (_appliersPerColumnFie = (_appliersPerColumnFie2 = appliersPerColumnField[field])[index]) == null ? void 0 : _appliersPerColumnFie.call(_appliersPerColumnFie2, usedCellParams[field]);\n      });\n      quickFilterValueResult[value] = isPassing;\n    });\n    return quickFilterValueResult;\n  };\n};\nexport const buildAggregatedFilterApplier = (filterModel, apiRef) => {\n  const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef);\n  const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef);\n  return (rowId, shouldApplyFilter) => ({\n    passingFilterItems: isRowMatchingFilterItems && isRowMatchingFilterItems(rowId, shouldApplyFilter),\n    passingQuickFilterValues: isRowMatchingQuickFilter && isRowMatchingQuickFilter(rowId, shouldApplyFilter)\n  });\n};\nexport const passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef) => {\n  var _filterModel$quickFil, _filterModel$linkOper;\n\n  const cleanedFilterItems = filterModel.items.filter(item => getFilterCallbackFromItem(item, apiRef) !== null);\n  const cleanedAllFilterItemResults = allFilterItemResults.filter(result => result != null);\n  const cleanedAllQuickFilterResults = allQuickFilterResults.filter(result => result != null); // Defaultize operators\n\n  const quickFilterLogicOperator = (_filterModel$quickFil = filterModel.quickFilterLogicOperator) != null ? _filterModel$quickFil : getDefaultGridFilterModel().quickFilterLogicOperator;\n  const linkOperator = (_filterModel$linkOper = filterModel.linkOperator) != null ? _filterModel$linkOper : getDefaultGridFilterModel().linkOperator; // get result for filter items model\n\n  if (cleanedAllFilterItemResults.length > 0) {\n    // Return true if the item pass with one of the rows\n    const filterItemPredicate = item => {\n      return cleanedAllFilterItemResults.some(filterItemResult => filterItemResult[item.id]);\n    };\n\n    if (linkOperator === GridLinkOperator.And) {\n      const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);\n\n      if (!passesAllFilters) {\n        return false;\n      }\n    } else {\n      const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);\n\n      if (!passesSomeFilters) {\n        return false;\n      }\n    }\n  } // get result for quick filter model\n\n\n  if (cleanedAllQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {\n    // Return true if the item pass with one of the rows\n    const quickFilterValuePredicate = value => {\n      return cleanedAllQuickFilterResults.some(quickFilterValueResult => quickFilterValueResult[value]);\n    };\n\n    if (quickFilterLogicOperator === GridLinkOperator.And) {\n      const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);\n\n      if (!passesAllQuickFilterValues) {\n        return false;\n      }\n    } else {\n      const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);\n\n      if (!passesSomeQuickFilterValues) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}