{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateTopics = exports.validateTopic = void 0;\nfunction validateTopic(topic) {\n  const parts = topic.split('/');\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i] === '+') {\n      continue;\n    }\n    if (parts[i] === '#') {\n      return i === parts.length - 1;\n    }\n    if (parts[i].indexOf('+') !== -1 || parts[i].indexOf('#') !== -1) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.validateTopic = validateTopic;\nfunction validateTopics(topics) {\n  if (topics.length === 0) {\n    return 'empty_topic_list';\n  }\n  for (let i = 0; i < topics.length; i++) {\n    if (!validateTopic(topics[i])) {\n      return topics[i];\n    }\n  }\n  return null;\n}\nexports.validateTopics = validateTopics;","map":{"version":3,"names":["validateTopic","topic","parts","split","i","length","indexOf","exports","validateTopics","topics"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/mqtt/src/lib/validations.ts"],"sourcesContent":["/**\n * Validate a topic to see if it's valid or not.\n * A topic is valid if it follow below rules:\n * - Rule #1: If any part of the topic is not `+` or `#`, then it must not contain `+` and '#'\n * - Rule #2: Part `#` must be located at the end of the mailbox\n *\n * @param {String} topic - A topic\n * @returns {Boolean} If the topic is valid, returns true. Otherwise, returns false.\n */\nexport function validateTopic(topic: string): boolean {\n\tconst parts = topic.split('/')\n\n\tfor (let i = 0; i < parts.length; i++) {\n\t\tif (parts[i] === '+') {\n\t\t\tcontinue\n\t\t}\n\n\t\tif (parts[i] === '#') {\n\t\t\t// for Rule #2\n\t\t\treturn i === parts.length - 1\n\t\t}\n\n\t\tif (parts[i].indexOf('+') !== -1 || parts[i].indexOf('#') !== -1) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n/**\n * Validate an array of topics to see if any of them is valid or not\n * @param {Array} topics - Array of topics\n * @returns {String} If the topics is valid, returns null. Otherwise, returns the invalid one\n */\nexport function validateTopics(topics: string[]): string {\n\tif (topics.length === 0) {\n\t\treturn 'empty_topic_list'\n\t}\n\tfor (let i = 0; i < topics.length; i++) {\n\t\tif (!validateTopic(topics[i])) {\n\t\t\treturn topics[i]\n\t\t}\n\t}\n\treturn null\n}\n"],"mappings":";;;;;;AASA,SAAgBA,aAAaA,CAACC,KAAa;EAC1C,MAAMC,KAAK,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EAE9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAIF,KAAK,CAACE,CAAC,CAAC,KAAK,GAAG,EAAE;MACrB;;IAGD,IAAIF,KAAK,CAACE,CAAC,CAAC,KAAK,GAAG,EAAE;MAErB,OAAOA,CAAC,KAAKF,KAAK,CAACG,MAAM,GAAG,CAAC;;IAG9B,IAAIH,KAAK,CAACE,CAAC,CAAC,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAIJ,KAAK,CAACE,CAAC,CAAC,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MACjE,OAAO,KAAK;;;EAId,OAAO,IAAI;AACZ;AAnBAC,OAAA,CAAAP,aAAA,GAAAA,aAAA;AA0BA,SAAgBQ,cAAcA,CAACC,MAAgB;EAC9C,IAAIA,MAAM,CAACJ,MAAM,KAAK,CAAC,EAAE;IACxB,OAAO,kBAAkB;;EAE1B,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,MAAM,CAACJ,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,IAAI,CAACJ,aAAa,CAACS,MAAM,CAACL,CAAC,CAAC,CAAC,EAAE;MAC9B,OAAOK,MAAM,CAACL,CAAC,CAAC;;;EAGlB,OAAO,IAAI;AACZ;AAVAG,OAAA,CAAAC,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script"}