{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"groupId\", \"children\"];\nimport * as React from 'react';\nimport { isLeaf } from '../../../models/gridColumnGrouping';\nimport { gridColumnGroupsLookupSelector } from './gridColumnGroupsSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nexport function hasGroupPath(lookupElement) {\n  return lookupElement.groupPath !== undefined;\n} // This is the recurrence function that help writing `unwrapGroupingColumnModel()`\n\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplet) => {\n  if (isLeaf(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplet[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurrs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplet[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n\n    unwrappedGroupingModelToComplet[columnGroupNode.field] = parents;\n    return;\n  }\n\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplet);\n  });\n};\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\n\n\nexport const unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\n\nconst createGroupLookup = columnGroupingModel => {\n  let groupLookup = {};\n  columnGroupingModel.forEach(node => {\n    if (isLeaf(node)) {\n      return;\n    }\n\n    const {\n      groupId,\n      children\n    } = node,\n          other = _objectWithoutPropertiesLoose(node, _excluded);\n\n    if (!groupId) {\n      throw new Error('MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.');\n    }\n\n    if (!children) {\n      console.warn(`MUI: group groupId=${groupId} has no children.`);\n    }\n\n    const groupParam = _extends({}, other, {\n      groupId\n    });\n\n    const subTreeLookup = createGroupLookup(children);\n\n    if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {\n      throw new Error(`MUI: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);\n    }\n\n    groupLookup = _extends({}, groupLookup, subTreeLookup, {\n      [groupId]: groupParam\n    });\n  });\n  return _extends({}, groupLookup);\n};\n\nexport const columnGroupsStateInitializer = (state, props) => {\n  var _props$columnGrouping;\n\n  const groupLookup = createGroupLookup((_props$columnGrouping = props.columnGroupingModel) != null ? _props$columnGrouping : []);\n  return _extends({}, state, {\n    columnGrouping: {\n      lookup: groupLookup,\n      groupCollapsedModel: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridColumnGrouping = (apiRef, props) => {\n  var _props$experimentalFe2;\n  /**\n   * API METHODS\n   */\n\n\n  const getColumnGroupPath = React.useCallback(field => {\n    var _columnLookup$field$g, _columnLookup$field;\n\n    const columnLookup = gridColumnLookupSelector(apiRef);\n    return (_columnLookup$field$g = (_columnLookup$field = columnLookup[field]) == null ? void 0 : _columnLookup$field.groupPath) != null ? _columnLookup$field$g : [];\n  }, [apiRef]);\n  const getAllGroupDetails = React.useCallback(() => {\n    const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);\n    return columnGroupLookup;\n  }, [apiRef]);\n  const columnGroupingApi = {\n    unstable_getColumnGroupPath: getColumnGroupPath,\n    unstable_getAllGroupDetails: getAllGroupDetails\n  };\n  useGridApiMethod(apiRef, columnGroupingApi, 'GridColumnGroupingApi');\n  /**\n   * EFFECTS\n   */\n  // The effect does not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    var _props$experimentalFe, _props$columnGrouping2;\n\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n      return;\n    }\n\n    const groupLookup = createGroupLookup((_props$columnGrouping2 = props.columnGroupingModel) != null ? _props$columnGrouping2 : []);\n    apiRef.current.setState(state => _extends({}, state, {\n      columnGrouping: _extends({}, state.columnGrouping, {\n        lookup: groupLookup\n      })\n    }));\n  }, [apiRef, props.columnGroupingModel, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.columnGrouping]);\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","isLeaf","gridColumnGroupsLookupSelector","gridColumnLookupSelector","useGridApiMethod","hasGroupPath","lookupElement","groupPath","undefined","recurrentUnwrapGroupingColumnModel","columnGroupNode","parents","unwrappedGroupingModelToComplet","field","Error","join","groupId","children","forEach","child","unwrapGroupingColumnModel","columnGroupingModel","unwrappedSubTree","createGroupLookup","groupLookup","node","other","console","warn","groupParam","subTreeLookup","columnGroupsStateInitializer","state","props","_props$columnGrouping","columnGrouping","lookup","groupCollapsedModel","useGridColumnGrouping","apiRef","_props$experimentalFe2","getColumnGroupPath","useCallback","_columnLookup$field$g","_columnLookup$field","columnLookup","getAllGroupDetails","columnGroupLookup","columnGroupingApi","unstable_getColumnGroupPath","unstable_getAllGroupDetails","isFirstRender","useRef","useEffect","_props$experimentalFe","_props$columnGrouping2","current","experimentalFeatures","setState"],"sources":["/Users/jstanton/Desktop/Coding/FieldDockMain/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"groupId\", \"children\"];\nimport * as React from 'react';\nimport { isLeaf } from '../../../models/gridColumnGrouping';\nimport { gridColumnGroupsLookupSelector } from './gridColumnGroupsSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nexport function hasGroupPath(lookupElement) {\n  return lookupElement.groupPath !== undefined;\n}\n\n// This is the recurrence function that help writing `unwrapGroupingColumnModel()`\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplet) => {\n  if (isLeaf(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplet[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurrs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplet[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n\n    unwrappedGroupingModelToComplet[columnGroupNode.field] = parents;\n    return;\n  }\n\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplet);\n  });\n};\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\n\n\nexport const unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\n\nconst createGroupLookup = columnGroupingModel => {\n  let groupLookup = {};\n  columnGroupingModel.forEach(node => {\n    if (isLeaf(node)) {\n      return;\n    }\n\n    const {\n      groupId,\n      children\n    } = node,\n          other = _objectWithoutPropertiesLoose(node, _excluded);\n\n    if (!groupId) {\n      throw new Error('MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.');\n    }\n\n    if (!children) {\n      console.warn(`MUI: group groupId=${groupId} has no children.`);\n    }\n\n    const groupParam = _extends({}, other, {\n      groupId\n    });\n\n    const subTreeLookup = createGroupLookup(children);\n\n    if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {\n      throw new Error(`MUI: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);\n    }\n\n    groupLookup = _extends({}, groupLookup, subTreeLookup, {\n      [groupId]: groupParam\n    });\n  });\n  return _extends({}, groupLookup);\n};\n\nexport const columnGroupsStateInitializer = (state, props) => {\n  var _props$columnGrouping;\n\n  const groupLookup = createGroupLookup((_props$columnGrouping = props.columnGroupingModel) != null ? _props$columnGrouping : []);\n  return _extends({}, state, {\n    columnGrouping: {\n      lookup: groupLookup,\n      groupCollapsedModel: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridColumnGrouping = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  /**\n   * API METHODS\n   */\n  const getColumnGroupPath = React.useCallback(field => {\n    var _columnLookup$field$g, _columnLookup$field;\n\n    const columnLookup = gridColumnLookupSelector(apiRef);\n    return (_columnLookup$field$g = (_columnLookup$field = columnLookup[field]) == null ? void 0 : _columnLookup$field.groupPath) != null ? _columnLookup$field$g : [];\n  }, [apiRef]);\n  const getAllGroupDetails = React.useCallback(() => {\n    const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);\n    return columnGroupLookup;\n  }, [apiRef]);\n  const columnGroupingApi = {\n    unstable_getColumnGroupPath: getColumnGroupPath,\n    unstable_getAllGroupDetails: getAllGroupDetails\n  };\n  useGridApiMethod(apiRef, columnGroupingApi, 'GridColumnGroupingApi');\n  /**\n   * EFFECTS\n   */\n  // The effect does not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    var _props$experimentalFe, _props$columnGrouping2;\n\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n      return;\n    }\n\n    const groupLookup = createGroupLookup((_props$columnGrouping2 = props.columnGroupingModel) != null ? _props$columnGrouping2 : []);\n    apiRef.current.setState(state => _extends({}, state, {\n      columnGrouping: _extends({}, state.columnGrouping, {\n        lookup: groupLookup\n      })\n    }));\n  }, [apiRef, props.columnGroupingModel, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.columnGrouping]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}