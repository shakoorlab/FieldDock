{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { unwrapGroupingColumnModel, hasGroupPath } from './useGridColumnGrouping';\nexport const useGridColumnGroupingPreProcessors = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  const addHeaderGroups = React.useCallback(columnsState => {\n    var _props$experimentalFe;\n\n    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n      return columnsState;\n    }\n\n    const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel);\n    columnsState.all.forEach(field => {\n      var _unwrappedGroupingMod, _unwrappedGroupingMod2;\n\n      const newGroupPath = (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];\n      const lookupElement = columnsState.lookup[field];\n\n      if (hasGroupPath(lookupElement) && isDeepEqual(newGroupPath, lookupElement == null ? void 0 : lookupElement.groupPath)) {\n        // Avoid modifying the pointer to allow shadow comparison in https://github.com/mui/mui-x/blob/f90afbf10a1264ee8b453d7549dd7cdd6110a4ed/packages/grid/x-data-grid/src/hooks/features/columns/gridColumnsUtils.ts#L446:L453\n        return;\n      }\n\n      columnsState.lookup[field] = _extends({}, columnsState.lookup[field], {\n        groupPath: (_unwrappedGroupingMod2 = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod2 : []\n      });\n    });\n    return columnsState;\n  }, [props.columnGroupingModel, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.columnGrouping]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', addHeaderGroups);\n};","map":{"version":3,"names":["_extends","React","useGridRegisterPipeProcessor","isDeepEqual","unwrapGroupingColumnModel","hasGroupPath","useGridColumnGroupingPreProcessors","apiRef","props","_props$experimentalFe2","addHeaderGroups","useCallback","columnsState","_props$experimentalFe","experimentalFeatures","columnGrouping","unwrappedGroupingModel","columnGroupingModel","all","forEach","field","_unwrappedGroupingMod","_unwrappedGroupingMod2","newGroupPath","lookupElement","lookup","groupPath"],"sources":["/Users/jstanton/Desktop/Coding/react-admin-dashboard/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGroupingPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { unwrapGroupingColumnModel, hasGroupPath } from './useGridColumnGrouping';\nexport const useGridColumnGroupingPreProcessors = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  const addHeaderGroups = React.useCallback(columnsState => {\n    var _props$experimentalFe;\n\n    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n      return columnsState;\n    }\n\n    const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel);\n    columnsState.all.forEach(field => {\n      var _unwrappedGroupingMod, _unwrappedGroupingMod2;\n\n      const newGroupPath = (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];\n      const lookupElement = columnsState.lookup[field];\n\n      if (hasGroupPath(lookupElement) && isDeepEqual(newGroupPath, lookupElement == null ? void 0 : lookupElement.groupPath)) {\n        // Avoid modifying the pointer to allow shadow comparison in https://github.com/mui/mui-x/blob/f90afbf10a1264ee8b453d7549dd7cdd6110a4ed/packages/grid/x-data-grid/src/hooks/features/columns/gridColumnsUtils.ts#L446:L453\n        return;\n      }\n\n      columnsState.lookup[field] = _extends({}, columnsState.lookup[field], {\n        groupPath: (_unwrappedGroupingMod2 = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod2 : []\n      });\n    });\n    return columnsState;\n  }, [props.columnGroupingModel, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.columnGrouping]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', addHeaderGroups);\n};"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,4BAAT,QAA6C,2BAA7C;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,yBAAT,EAAoCC,YAApC,QAAwD,yBAAxD;AACA,OAAO,MAAMC,kCAAkC,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;EACnE,IAAIC,sBAAJ;;EAEA,MAAMC,eAAe,GAAGT,KAAK,CAACU,WAAN,CAAkBC,YAAY,IAAI;IACxD,IAAIC,qBAAJ;;IAEA,IAAI,EAAE,CAACA,qBAAqB,GAAGL,KAAK,CAACM,oBAA/B,KAAwD,IAAxD,IAAgED,qBAAqB,CAACE,cAAxF,CAAJ,EAA6G;MAC3G,OAAOH,YAAP;IACD;;IAED,MAAMI,sBAAsB,GAAGZ,yBAAyB,CAACI,KAAK,CAACS,mBAAP,CAAxD;IACAL,YAAY,CAACM,GAAb,CAAiBC,OAAjB,CAAyBC,KAAK,IAAI;MAChC,IAAIC,qBAAJ,EAA2BC,sBAA3B;;MAEA,MAAMC,YAAY,GAAG,CAACF,qBAAqB,GAAGL,sBAAsB,CAACI,KAAD,CAA/C,KAA2D,IAA3D,GAAkEC,qBAAlE,GAA0F,EAA/G;MACA,MAAMG,aAAa,GAAGZ,YAAY,CAACa,MAAb,CAAoBL,KAApB,CAAtB;;MAEA,IAAIf,YAAY,CAACmB,aAAD,CAAZ,IAA+BrB,WAAW,CAACoB,YAAD,EAAeC,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACE,SAA9D,CAA9C,EAAwH;QACtH;QACA;MACD;;MAEDd,YAAY,CAACa,MAAb,CAAoBL,KAApB,IAA6BpB,QAAQ,CAAC,EAAD,EAAKY,YAAY,CAACa,MAAb,CAAoBL,KAApB,CAAL,EAAiC;QACpEM,SAAS,EAAE,CAACJ,sBAAsB,GAAGN,sBAAsB,CAACI,KAAD,CAAhD,KAA4D,IAA5D,GAAmEE,sBAAnE,GAA4F;MADnC,CAAjC,CAArC;IAGD,CAdD;IAeA,OAAOV,YAAP;EACD,CAxBuB,EAwBrB,CAACJ,KAAK,CAACS,mBAAP,EAA4B,CAACR,sBAAsB,GAAGD,KAAK,CAACM,oBAAhC,KAAyD,IAAzD,GAAgE,KAAK,CAArE,GAAyEL,sBAAsB,CAACM,cAA5H,CAxBqB,CAAxB;EAyBAb,4BAA4B,CAACK,MAAD,EAAS,gBAAT,EAA2BG,eAA3B,CAA5B;AACD,CA7BM"},"metadata":{},"sourceType":"module"}