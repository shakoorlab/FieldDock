{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst tls_1 = __importDefault(require(\"tls\"));\nconst net_1 = __importDefault(require(\"net\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)('mqttjs:tls');\nconst buildStream = (client, opts) => {\n  opts.port = opts.port || 8883;\n  opts.host = opts.hostname || opts.host || 'localhost';\n  if (net_1.default.isIP(opts.host) === 0) {\n    opts.servername = opts.host;\n  }\n  opts.rejectUnauthorized = opts.rejectUnauthorized !== false;\n  delete opts.path;\n  debug('port %d host %s rejectUnauthorized %b', opts.port, opts.host, opts.rejectUnauthorized);\n  const connection = tls_1.default.connect(opts);\n  connection.on('secureConnect', () => {\n    if (opts.rejectUnauthorized && !connection.authorized) {\n      connection.emit('error', new Error('TLS not authorized'));\n    } else {\n      connection.removeListener('error', handleTLSerrors);\n    }\n  });\n  function handleTLSerrors(err) {\n    if (opts.rejectUnauthorized) {\n      client.emit('error', err);\n    }\n    connection.end();\n  }\n  connection.on('error', handleTLSerrors);\n  return connection;\n};\nexports.default = buildStream;","map":{"version":3,"names":["tls_1","__importDefault","require","net_1","debug_1","debug","default","buildStream","client","opts","port","host","hostname","isIP","servername","rejectUnauthorized","path","connection","connect","on","authorized","emit","Error","removeListener","handleTLSerrors","err","end","exports"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/mqtt/src/lib/connect/tls.ts"],"sourcesContent":["import tls from 'tls'\nimport net from 'net'\nimport _debug from 'debug'\nimport { StreamBuilder } from '../shared'\n\nconst debug = _debug('mqttjs:tls')\n\nconst buildStream: StreamBuilder = (client, opts) => {\n\topts.port = opts.port || 8883\n\topts.host = opts.hostname || opts.host || 'localhost'\n\n\tif (net.isIP(opts.host) === 0) {\n\t\topts.servername = opts.host\n\t}\n\n\topts.rejectUnauthorized = opts.rejectUnauthorized !== false\n\n\tdelete opts.path\n\n\tdebug(\n\t\t'port %d host %s rejectUnauthorized %b',\n\t\topts.port,\n\t\topts.host,\n\t\topts.rejectUnauthorized,\n\t)\n\n\tconst connection = tls.connect(opts)\n\tconnection.on('secureConnect', () => {\n\t\tif (opts.rejectUnauthorized && !connection.authorized) {\n\t\t\tconnection.emit('error', new Error('TLS not authorized'))\n\t\t} else {\n\t\t\tconnection.removeListener('error', handleTLSerrors)\n\t\t}\n\t})\n\n\tfunction handleTLSerrors(err: Error) {\n\t\t// How can I get verify this error is a tls error?\n\t\tif (opts.rejectUnauthorized) {\n\t\t\tclient.emit('error', err)\n\t\t}\n\n\t\t// close this connection to match the behaviour of net\n\t\t// otherwise all we get is an error from the connection\n\t\t// and close event doesn't fire. This is a work around\n\t\t// to enable the reconnect code to work the same as with\n\t\t// net.createConnection\n\t\tconnection.end()\n\t}\n\n\tconnection.on('error', handleTLSerrors)\n\treturn connection\n}\n\nexport default buildStream\n"],"mappings":";;;;;;;;;;AAAA,MAAAA,KAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,KAAA,GAAAF,eAAA,CAAAC,OAAA;AACA,MAAAE,OAAA,GAAAH,eAAA,CAAAC,OAAA;AAGA,MAAMG,KAAK,GAAG,IAAAD,OAAA,CAAAE,OAAM,EAAC,YAAY,CAAC;AAElC,MAAMC,WAAW,GAAkBA,CAACC,MAAM,EAAEC,IAAI,KAAI;EACnDA,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACC,IAAI,IAAI,IAAI;EAC7BD,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACG,QAAQ,IAAIH,IAAI,CAACE,IAAI,IAAI,WAAW;EAErD,IAAIR,KAAA,CAAAG,OAAG,CAACO,IAAI,CAACJ,IAAI,CAACE,IAAI,CAAC,KAAK,CAAC,EAAE;IAC9BF,IAAI,CAACK,UAAU,GAAGL,IAAI,CAACE,IAAI;;EAG5BF,IAAI,CAACM,kBAAkB,GAAGN,IAAI,CAACM,kBAAkB,KAAK,KAAK;EAE3D,OAAON,IAAI,CAACO,IAAI;EAEhBX,KAAK,CACJ,uCAAuC,EACvCI,IAAI,CAACC,IAAI,EACTD,IAAI,CAACE,IAAI,EACTF,IAAI,CAACM,kBAAkB,CACvB;EAED,MAAME,UAAU,GAAGjB,KAAA,CAAAM,OAAG,CAACY,OAAO,CAACT,IAAI,CAAC;EACpCQ,UAAU,CAACE,EAAE,CAAC,eAAe,EAAE,MAAK;IACnC,IAAIV,IAAI,CAACM,kBAAkB,IAAI,CAACE,UAAU,CAACG,UAAU,EAAE;MACtDH,UAAU,CAACI,IAAI,CAAC,OAAO,EAAE,IAAIC,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACzD,MAAM;MACNL,UAAU,CAACM,cAAc,CAAC,OAAO,EAAEC,eAAe,CAAC;;EAErD,CAAC,CAAC;EAEF,SAASA,eAAeA,CAACC,GAAU;IAElC,IAAIhB,IAAI,CAACM,kBAAkB,EAAE;MAC5BP,MAAM,CAACa,IAAI,CAAC,OAAO,EAAEI,GAAG,CAAC;;IAQ1BR,UAAU,CAACS,GAAG,EAAE;EACjB;EAEAT,UAAU,CAACE,EAAE,CAAC,OAAO,EAAEK,eAAe,CAAC;EACvC,OAAOP,UAAU;AAClB,CAAC;AAEDU,OAAA,CAAArB,OAAA,GAAeC,WAAW"},"metadata":{},"sourceType":"script"}