{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nclass DefaultMessageIdProvider {\n  constructor() {\n    this.nextId = Math.max(1, Math.floor(Math.random() * 65535));\n  }\n  allocate() {\n    const id = this.nextId++;\n    if (this.nextId === 65536) {\n      this.nextId = 1;\n    }\n    return id;\n  }\n  getLastAllocated() {\n    return this.nextId === 1 ? 65535 : this.nextId - 1;\n  }\n  register(messageId) {\n    return true;\n  }\n  deallocate(messageId) {}\n  clear() {}\n}\nexports.default = DefaultMessageIdProvider;","map":{"version":3,"names":["DefaultMessageIdProvider","constructor","nextId","Math","max","floor","random","allocate","id","getLastAllocated","register","messageId","deallocate","clear","exports","default"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/mqtt/src/lib/default-message-id-provider.ts"],"sourcesContent":["export interface IMessageIdProvider {\n\t/**\n\t * Allocate the first vacant messageId. The messageId become occupied status.\n\t * @return {Number} - The first vacant messageId. If all messageIds are occupied, return null.\n\t */\n\tallocate(): number | null\n\n\t/**\n\t * Get the last allocated messageId.\n\t * @return {Number} - messageId.\n\t */\n\tgetLastAllocated(): number | null\n\n\t/**\n\t * Register the messageId. The messageId become occupied status.\n\t * If the messageId has already been occupied, then return false.\n\t * @param {number} num - The messageId to request use.\n\t * @return {boolean} - If `num` was not occupied, then return true, otherwise return false.\n\t */\n\tregister(num: number): boolean\n\n\t/**\n\t * Deallocate the messageId. The messageId become vacant status.\n\t * @param {Number} num - The messageId to deallocate. The messageId must be occupied status.\n\t *                       In other words, the messageId must be allocated by allocate() or\n\t *                       occupied by register().\n\t */\n\tdeallocate(num: number): void\n\n\t/**\n\t * Clear all occupied messageIds.\n\t * The all messageIds are set to vacant status.\n\t */\n\tclear(): void\n}\n\n/**\n * DefaultMessageAllocator constructor\n * @constructor\n */\nexport default class DefaultMessageIdProvider implements IMessageIdProvider {\n\tprivate nextId: number\n\n\tconstructor() {\n\t\t/**\n\t\t * MessageIDs starting with 1\n\t\t * ensure that nextId is min. 1, see https://github.com/mqttjs/MQTT.js/issues/810\n\t\t */\n\t\tthis.nextId = Math.max(1, Math.floor(Math.random() * 65535))\n\t}\n\n\t/**\n\t * allocate\n\t *\n\t * Get the next messageId.\n\t * @return unsigned int\n\t */\n\tallocate() {\n\t\t// id becomes current state of this.nextId and increments afterwards\n\t\tconst id = this.nextId++\n\t\t// Ensure 16 bit unsigned int (max 65535, nextId got one higher)\n\t\tif (this.nextId === 65536) {\n\t\t\tthis.nextId = 1\n\t\t}\n\t\treturn id\n\t}\n\n\t/**\n\t * getLastAllocated\n\t * Get the last allocated messageId.\n\t * @return unsigned int\n\t */\n\tgetLastAllocated() {\n\t\treturn this.nextId === 1 ? 65535 : this.nextId - 1\n\t}\n\n\t/**\n\t * register\n\t * Register messageId. If success return true, otherwise return false.\n\t * @param { unsigned int } - messageId to register,\n\t * @return boolean\n\t */\n\tregister(messageId: number) {\n\t\treturn true\n\t}\n\n\t/**\n\t * deallocate\n\t * Deallocate messageId.\n\t * @param { unsigned int } - messageId to deallocate,\n\t */\n\tdeallocate(messageId: number) {}\n\n\t/**\n\t * clear\n\t * Deallocate all messageIds.\n\t */\n\tclear() {}\n}\n"],"mappings":";;;;;AAwCA,MAAqBA,wBAAwB;EAG5CC,YAAA;IAKC,IAAI,CAACC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC;EAC7D;EAQAC,QAAQA,CAAA;IAEP,MAAMC,EAAE,GAAG,IAAI,CAACN,MAAM,EAAE;IAExB,IAAI,IAAI,CAACA,MAAM,KAAK,KAAK,EAAE;MAC1B,IAAI,CAACA,MAAM,GAAG,CAAC;;IAEhB,OAAOM,EAAE;EACV;EAOAC,gBAAgBA,CAAA;IACf,OAAO,IAAI,CAACP,MAAM,KAAK,CAAC,GAAG,KAAK,GAAG,IAAI,CAACA,MAAM,GAAG,CAAC;EACnD;EAQAQ,QAAQA,CAACC,SAAiB;IACzB,OAAO,IAAI;EACZ;EAOAC,UAAUA,CAACD,SAAiB,GAAG;EAM/BE,KAAKA,CAAA,GAAI;;AAzDVC,OAAA,CAAAC,OAAA,GAAAf,wBAAA"},"metadata":{},"sourceType":"script"}