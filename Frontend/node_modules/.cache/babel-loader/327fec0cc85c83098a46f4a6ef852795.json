{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPreferencePanelStateSelector } from './gridPreferencePanelSelector';\nexport const preferencePanelStateInitializer = (state, props) => {\n  var _props$initialState$p, _props$initialState;\n\n  return _extends({}, state, {\n    preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {\n      open: false\n    }\n  });\n};\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\n\nexport const useGridPreferencesPanel = (apiRef, props) => {\n  var _props$initialState3;\n\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n  const hideTimeout = React.useRef();\n  const immediateTimeout = React.useRef();\n  /**\n   * API METHODS\n   */\n\n  const hidePreferences = React.useCallback(() => {\n    logger.debug('Hiding Preferences Panel');\n    const preferencePanelState = gridPreferencePanelStateSelector(apiRef.current.state);\n\n    if (preferencePanelState.openedPanelValue) {\n      apiRef.current.publishEvent('preferencePanelClose', {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: {\n        open: false\n      }\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]); // This is to prevent the preferences from closing when you open a select box or another panel,\n  // The issue is in MUI core V4 => Fixed in V5\n\n  const doNotHidePanel = React.useCallback(() => {\n    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);\n  }, []); // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,\n  // we can cancel the action if the trigger element still need the panel...\n\n  const hidePreferencesDelayed = React.useCallback(() => {\n    hideTimeout.current = setTimeout(hidePreferences, 100);\n  }, [hidePreferences]);\n  const showPreferences = React.useCallback(newValue => {\n    logger.debug('Opening Preferences Panel');\n    doNotHidePanel();\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue\n      })\n    }));\n    apiRef.current.publishEvent('preferencePanelOpen', {\n      openedPanelValue: newValue\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, doNotHidePanel, apiRef]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences: hidePreferencesDelayed\n  }, 'ColumnMenuApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2;\n\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);\n    const shouldExportPreferencePanel = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the panel was initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.preferencePanel) != null || // Always export if the panel is opened\n    preferencePanelToExport.open;\n\n    if (!shouldExportPreferencePanel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef, (_props$initialState3 = props.initialState) == null ? void 0 : _props$initialState3.preferencePanel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(hideTimeout.current);\n      clearTimeout(immediateTimeout.current);\n    };\n  }, []);\n};","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","useGridRegisterPipeProcessor","gridPreferencePanelStateSelector","preferencePanelStateInitializer","state","props","_props$initialState$p","_props$initialState","preferencePanel","initialState","open","useGridPreferencesPanel","apiRef","_props$initialState3","logger","hideTimeout","useRef","immediateTimeout","hidePreferences","useCallback","debug","preferencePanelState","current","openedPanelValue","publishEvent","setState","forceUpdate","doNotHidePanel","setTimeout","clearTimeout","hidePreferencesDelayed","showPreferences","newValue","stateExportPreProcessing","prevState","context","_props$initialState2","preferencePanelToExport","shouldExportPreferencePanel","exportOnlyDirtyModels","stateRestorePreProcessing","params","stateToRestore","useEffect"],"sources":["/Users/jstanton/Desktop/Coding/FieldDockMain/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPreferencePanelStateSelector } from './gridPreferencePanelSelector';\nexport const preferencePanelStateInitializer = (state, props) => {\n  var _props$initialState$p, _props$initialState;\n\n  return _extends({}, state, {\n    preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {\n      open: false\n    }\n  });\n};\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\n\nexport const useGridPreferencesPanel = (apiRef, props) => {\n  var _props$initialState3;\n\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n  const hideTimeout = React.useRef();\n  const immediateTimeout = React.useRef();\n  /**\n   * API METHODS\n   */\n\n  const hidePreferences = React.useCallback(() => {\n    logger.debug('Hiding Preferences Panel');\n    const preferencePanelState = gridPreferencePanelStateSelector(apiRef.current.state);\n\n    if (preferencePanelState.openedPanelValue) {\n      apiRef.current.publishEvent('preferencePanelClose', {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: {\n        open: false\n      }\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]); // This is to prevent the preferences from closing when you open a select box or another panel,\n  // The issue is in MUI core V4 => Fixed in V5\n\n  const doNotHidePanel = React.useCallback(() => {\n    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);\n  }, []); // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,\n  // we can cancel the action if the trigger element still need the panel...\n\n  const hidePreferencesDelayed = React.useCallback(() => {\n    hideTimeout.current = setTimeout(hidePreferences, 100);\n  }, [hidePreferences]);\n  const showPreferences = React.useCallback(newValue => {\n    logger.debug('Opening Preferences Panel');\n    doNotHidePanel();\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue\n      })\n    }));\n    apiRef.current.publishEvent('preferencePanelOpen', {\n      openedPanelValue: newValue\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, doNotHidePanel, apiRef]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences: hidePreferencesDelayed\n  }, 'ColumnMenuApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2;\n\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);\n    const shouldExportPreferencePanel = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the panel was initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.preferencePanel) != null || // Always export if the panel is opened\n    preferencePanelToExport.open;\n\n    if (!shouldExportPreferencePanel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef, (_props$initialState3 = props.initialState) == null ? void 0 : _props$initialState3.preferencePanel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(hideTimeout.current);\n      clearTimeout(immediateTimeout.current);\n    };\n  }, []);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}