{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst number_allocator_1 = require(\"number-allocator\");\nclass UniqueMessageIdProvider {\n  constructor() {\n    this.numberAllocator = new number_allocator_1.NumberAllocator(1, 65535);\n  }\n  allocate() {\n    this.lastId = this.numberAllocator.alloc();\n    return this.lastId;\n  }\n  getLastAllocated() {\n    return this.lastId;\n  }\n  register(messageId) {\n    return this.numberAllocator.use(messageId);\n  }\n  deallocate(messageId) {\n    this.numberAllocator.free(messageId);\n  }\n  clear() {\n    this.numberAllocator.clear();\n  }\n}\nexports.default = UniqueMessageIdProvider;","map":{"version":3,"names":["number_allocator_1","require","UniqueMessageIdProvider","constructor","numberAllocator","NumberAllocator","allocate","lastId","alloc","getLastAllocated","register","messageId","use","deallocate","free","clear","exports","default"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/node_modules/mqtt/src/lib/unique-message-id-provider.ts"],"sourcesContent":["import { NumberAllocator } from 'number-allocator'\nimport { IMessageIdProvider } from './default-message-id-provider'\n\n/**\n * UniqueMessageAllocator constructor\n * @constructor\n */\nexport default class UniqueMessageIdProvider implements IMessageIdProvider {\n\tprivate numberAllocator: NumberAllocator\n\n\tprivate lastId: number\n\n\tconstructor() {\n\t\tthis.numberAllocator = new NumberAllocator(1, 65535)\n\t}\n\n\t/**\n\t * allocate\n\t *\n\t * Get the next messageId.\n\t * @return if messageId is fully allocated then return null,\n\t *         otherwise return the smallest usable unsigned int messageId.\n\t */\n\tallocate() {\n\t\tthis.lastId = this.numberAllocator.alloc()\n\t\treturn this.lastId\n\t}\n\n\t/**\n\t * getLastAllocated\n\t * Get the last allocated messageId.\n\t * @return unsigned int\n\t */\n\tgetLastAllocated() {\n\t\treturn this.lastId\n\t}\n\n\t/**\n\t * register\n\t * Register messageId. If success return true, otherwise return false.\n\t * @param { unsigned int } - messageId to register,\n\t * @return boolean\n\t */\n\tregister(messageId: number) {\n\t\treturn this.numberAllocator.use(messageId) as boolean\n\t}\n\n\t/**\n\t * deallocate\n\t * Deallocate messageId.\n\t * @param { unsigned int } - messageId to deallocate,\n\t */\n\tdeallocate(messageId: number) {\n\t\tthis.numberAllocator.free(messageId)\n\t}\n\n\t/**\n\t * clear\n\t * Deallocate all messageIds.\n\t */\n\tclear() {\n\t\tthis.numberAllocator.clear()\n\t}\n}\n"],"mappings":";;;;;AAAA,MAAAA,kBAAA,GAAAC,OAAA;AAOA,MAAqBC,uBAAuB;EAK3CC,YAAA;IACC,IAAI,CAACC,eAAe,GAAG,IAAIJ,kBAAA,CAAAK,eAAe,CAAC,CAAC,EAAE,KAAK,CAAC;EACrD;EASAC,QAAQA,CAAA;IACP,IAAI,CAACC,MAAM,GAAG,IAAI,CAACH,eAAe,CAACI,KAAK,EAAE;IAC1C,OAAO,IAAI,CAACD,MAAM;EACnB;EAOAE,gBAAgBA,CAAA;IACf,OAAO,IAAI,CAACF,MAAM;EACnB;EAQAG,QAAQA,CAACC,SAAiB;IACzB,OAAO,IAAI,CAACP,eAAe,CAACQ,GAAG,CAACD,SAAS,CAAY;EACtD;EAOAE,UAAUA,CAACF,SAAiB;IAC3B,IAAI,CAACP,eAAe,CAACU,IAAI,CAACH,SAAS,CAAC;EACrC;EAMAI,KAAKA,CAAA;IACJ,IAAI,CAACX,eAAe,CAACW,KAAK,EAAE;EAC7B;;AAvDDC,OAAA,CAAAC,OAAA,GAAAf,uBAAA"},"metadata":{},"sourceType":"script"}