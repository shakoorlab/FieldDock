{"ast":null,"code":"var _jsxFileName = \"/Users/jstanton/Coding/FieldDock/FieldDockMain/src/components/Breadcrumb Elements/Status/status.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport mqtt from \"mqtt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MQTTComponent = () => {\n  _s();\n  const [mqttMessage, setMqttMessage] = useState(\"\");\n\n  // MQTT connection settings\n  const brokerUrl = \"mqtt://3.145.131.67:9001\";\n  const topic = \"drone/status\";\n  const client = mqtt.connect(brokerUrl);\n  useEffect(() => {\n    client.on(\"connect\", () => {\n      console.log(\"Connected to MQTT broker\");\n      client.subscribe(topic);\n    });\n    client.on(\"message\", (topic, message) => {\n      console.log(`Received message on topic ${topic}: ${message.toString()}`);\n      setMqttMessage(message.toString()); // Update the state with the received message\n    });\n\n    // Cleanup the MQTT client when the component unmounts\n    return () => {\n      client.end();\n    };\n  }, []); // Empty dependency array to run this effect once on mount //*! needing to include 'client' in brackets?\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: mqttMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(MQTTComponent, \"oja62EcH7aTs8VXYwMd0LVh3t7Y=\");\n_c = MQTTComponent;\nexport default MQTTComponent;\nvar _c;\n$RefreshReg$(_c, \"MQTTComponent\");","map":{"version":3,"names":["React","useState","useEffect","mqtt","jsxDEV","_jsxDEV","MQTTComponent","_s","mqttMessage","setMqttMessage","brokerUrl","topic","client","connect","on","console","log","subscribe","message","toString","end","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jstanton/Coding/FieldDock/FieldDockMain/src/components/Breadcrumb Elements/Status/status.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport mqtt from \"mqtt\";\n\nconst MQTTComponent = () => {\n  const [mqttMessage, setMqttMessage] = useState(\"\");\n\n  // MQTT connection settings\n  const brokerUrl = \"mqtt://3.145.131.67:9001\";\n  const topic = \"drone/status\";\n\n  const client = mqtt.connect(brokerUrl);\n\n  useEffect(() => {\n    client.on(\"connect\", () => {\n      console.log(\"Connected to MQTT broker\");\n      client.subscribe(topic);\n    });\n\n    client.on(\"message\", (topic, message) => {\n      console.log(`Received message on topic ${topic}: ${message.toString()}`);\n      setMqttMessage(message.toString()); // Update the state with the received message\n    });\n\n    // Cleanup the MQTT client when the component unmounts\n    return () => {\n      client.end();\n    };\n  }, []); // Empty dependency array to run this effect once on mount //*! needing to include 'client' in brackets?\n\n  return (\n    <div>\n      {/* Display the MQTT message */}\n      <p>{mqttMessage}</p>\n    </div>\n  );\n};\n\nexport default MQTTComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMS,SAAS,GAAG,0BAA0B;EAC5C,MAAMC,KAAK,GAAG,cAAc;EAE5B,MAAMC,MAAM,GAAGT,IAAI,CAACU,OAAO,CAACH,SAAS,CAAC;EAEtCR,SAAS,CAAC,MAAM;IACdU,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCJ,MAAM,CAACK,SAAS,CAACN,KAAK,CAAC;IACzB,CAAC,CAAC;IAEFC,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,CAACH,KAAK,EAAEO,OAAO,KAAK;MACvCH,OAAO,CAACC,GAAG,CAAE,6BAA4BL,KAAM,KAAIO,OAAO,CAACC,QAAQ,CAAC,CAAE,EAAC,CAAC;MACxEV,cAAc,CAACS,OAAO,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXP,MAAM,CAACQ,GAAG,CAAC,CAAC;IACd,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEf,OAAA;IAAAgB,QAAA,eAEEhB,OAAA;MAAAgB,QAAA,EAAIb;IAAW;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEV,CAAC;AAAClB,EAAA,CAhCID,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AAkCnB,eAAeA,aAAa;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}